/* eslint-disable */
/*! jQuery v3.3.1 | (c) JS Foundation and other contributors | jquery.org/license */
!(function (e, t) {
  typeof module === 'object' && typeof module.exports === 'object' ? module.exports = e.document ? t(e, !0) : function (e) { if (!e.document) throw new Error('jQuery requires a window with a document'); return t(e); } : t(e);
}(typeof window !== 'undefined' ? window : this, (e, t) => {
  const n = [];
  const r = e.document;
  const i = Object.getPrototypeOf;
  const o = n.slice;
  const a = n.concat;
  const s = n.push;
  const u = n.indexOf;
  const l = {};
  const c = l.toString;
  const f = l.hasOwnProperty;
  const p = f.toString;
  const d = p.call(Object);
  const h = {};
  const g = function e(t) { return typeof t === 'function' && typeof t.nodeType !== 'number'; };
  const y = function e(t) { return t != null && t === t.window; };
  const v = { type: !0, src: !0, noModule: !0 };

  function m(e, t, n) {
    let i; const
      o = (t = t || r).createElement('script'); if (o.text = e, n) for (i in v) n[i] && (o[i] = n[i]);
    t.head.appendChild(o).parentNode.removeChild(o);
  }

  function x(e) { return e == null ? `${e}` : typeof e === 'object' || typeof e === 'function' ? l[c.call(e)] || 'object' : typeof e; } const b = '3.3.1';
  var w = function (e, t) { return new w.fn.init(e, t); };
  const T = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;
  w.fn = w.prototype = {
    jquery: '3.3.1',
    constructor: w,
    length: 0,
    toArray() { return o.call(this); },
    get(e) { return e == null ? o.call(this) : e < 0 ? this[e + this.length] : this[e]; },
    pushStack(e) { const t = w.merge(this.constructor(), e); return t.prevObject = this, t; },
    each(e) { return w.each(this, e); },
    map(e) { return this.pushStack(w.map(this, (t, n) => e.call(t, n, t))); },
    slice() { return this.pushStack(o.apply(this, arguments)); },
    first() { return this.eq(0); },
    last() { return this.eq(-1); },
    eq(e) {
      const t = this.length;
      const n = +e + (e < 0 ? t : 0); return this.pushStack(n >= 0 && n < t ? [this[n]] : []);
    },
    end() { return this.prevObject || this.constructor(); },
    push: s,
    sort: n.sort,
    splice: n.splice,
  }, w.extend = w.fn.extend = function () {
    let e; let t; let n; let r; let i; let o; let a = arguments[0] || {};
    let s = 1;
    const u = arguments.length;
    let l = !1; for (typeof a === 'boolean' && (l = a, a = arguments[s] || {}, s++), typeof a === 'object' || g(a) || (a = {}), s === u && (a = this, s--); s < u; s++) if ((e = arguments[s]) != null) for (t in e) n = a[t], a !== (r = e[t]) && (l && r && (w.isPlainObject(r) || (i = Array.isArray(r))) ? (i ? (i = !1, o = n && Array.isArray(n) ? n : []) : o = n && w.isPlainObject(n) ? n : {}, a[t] = w.extend(l, o, r)) : void 0 !== r && (a[t] = r));
    return a;
  }, w.extend({
    expando: `jQuery${(`3.3.1${Math.random()}`).replace(/\D/g, '')}`,
    isReady: !0,
    error(e) { throw new Error(e); },
    noop() {},
    isPlainObject(e) {
      let t; let
        n; return !(!e || c.call(e) !== '[object Object]') && (!(t = i(e)) || typeof (n = f.call(t, 'constructor') && t.constructor) === 'function' && p.call(n) === d);
    },
    isEmptyObject(e) { let t; for (t in e) return !1; return !0; },
    globalEval(e) { m(e); },
    each(e, t) {
      let n; let
        r = 0; if (C(e)) {
        for (n = e.length; r < n; r++) if (!1 === t.call(e[r], r, e[r])) break;
      } else for (r in e) if (!1 === t.call(e[r], r, e[r])) break; return e;
    },
    trim(e) { return e == null ? '' : (`${e}`).replace(T, ''); },
    makeArray(e, t) { const n = t || []; return e != null && (C(Object(e)) ? w.merge(n, typeof e === 'string' ? [e] : e) : s.call(n, e)), n; },
    inArray(e, t, n) { return t == null ? -1 : u.call(t, e, n); },
    merge(e, t) { for (var n = +t.length, r = 0, i = e.length; r < n; r++) e[i++] = t[r]; return e.length = i, e; },
    grep(e, t, n) { for (var r, i = [], o = 0, a = e.length, s = !n; o < a; o++)(r = !t(e[o], o)) !== s && i.push(e[o]); return i; },
    map(e, t, n) {
      let r; let i; let o = 0;
      const s = []; if (C(e)) for (r = e.length; o < r; o++) (i = t(e[o], o, n)) != null && s.push(i);
      else for (o in e) (i = t(e[o], o, n)) != null && s.push(i); return a.apply([], s);
    },
    guid: 1,
    support: h,
  }), typeof Symbol === 'function' && (w.fn[Symbol.iterator] = n[Symbol.iterator]), w.each('Boolean Number String Function Array Date RegExp Object Error Symbol'.split(' '), (e, t) => { l[`[object ${t}]`] = t.toLowerCase(); });

  function C(e) {
    const t = !!e && 'length' in e && e.length;
    const n = x(e); return !g(e) && !y(e) && (n === 'array' || t === 0 || typeof t === 'number' && t > 0 && t - 1 in e);
  } const E = (function (e) {
    let t; let n; let r; let i; let o; let a; let s; let u; let l; let c; let f; let p; let d; let h; let g; let y; let v; let m; let x; const b = `sizzle${1 * new Date()}`;
    const w = e.document;
    let T = 0;
    let C = 0;
    const E = ae();
    const k = ae();
    const S = ae();
    let D = function (e, t) { return e === t && (f = !0), 0; };
    const N = {}.hasOwnProperty;
    let A = [];
    const j = A.pop;
    const q = A.push;
    let L = A.push;
    const H = A.slice;
    const O = function (e, t) {
      for (let n = 0, r = e.length; n < r; n++) if (e[n] === t) return n;
      return -1;
    };
    const P = 'checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped';
    const M = '[\\x20\\t\\r\\n\\f]';
    const R = '(?:\\\\.|[\\w-]|[^\0-\\xa0])+';
    const I = `\\[${M}*(${R})(?:${M}*([*^$|!~]?=)${M}*(?:'((?:\\\\.|[^\\\\'])*)'|"((?:\\\\.|[^\\\\"])*)"|(${R}))|)${M}*\\]`;
    const W = `:(${R})(?:\\((('((?:\\\\.|[^\\\\'])*)'|"((?:\\\\.|[^\\\\"])*)")|((?:\\\\.|[^\\\\()[\\]]|${I})*)|.*)\\)|)`;
    const $ = new RegExp(`${M}+`, 'g');
    const B = new RegExp(`^${M}+|((?:^|[^\\\\])(?:\\\\.)*)${M}+$`, 'g');
    const F = new RegExp(`^${M}*,${M}*`);
    const _ = new RegExp(`^${M}*([>+~]|${M})${M}*`);
    const z = new RegExp(`=${M}*([^\\]'"]*?)${M}*\\]`, 'g');
    const X = new RegExp(W);
    const U = new RegExp(`^${R}$`);
    const V = {
      ID: new RegExp(`^#(${R})`), CLASS: new RegExp(`^\\.(${R})`), TAG: new RegExp(`^(${R}|[*])`), ATTR: new RegExp(`^${I}`), PSEUDO: new RegExp(`^${W}`), CHILD: new RegExp(`^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(${M}*(even|odd|(([+-]|)(\\d*)n|)${M}*(?:([+-]|)${M}*(\\d+)|))${M}*\\)|)`, 'i'), bool: new RegExp(`^(?:${P})$`, 'i'), needsContext: new RegExp(`^${M}*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(${M}*((?:-\\d)?\\d*)${M}*\\)|)(?=[^-]|$)`, 'i'),
    };
    const G = /^(?:input|select|textarea|button)$/i;
    const Y = /^h\d$/i;
    const Q = /^[^{]+\{\s*\[native \w/;
    const J = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/;
    const K = /[+~]/;
    const Z = new RegExp(`\\\\([\\da-f]{1,6}${M}?|(${M})|.)`, 'ig');
    const ee = function (e, t, n) { const r = `0x${t}` - 65536; return r !== r || n ? t : r < 0 ? String.fromCharCode(r + 65536) : String.fromCharCode(r >> 10 | 55296, 1023 & r | 56320); };
    const te = /([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g;
    const ne = function (e, t) { return t ? e === '\0' ? '\ufffd' : `${e.slice(0, -1)}\\${e.charCodeAt(e.length - 1).toString(16)} ` : `\\${e}`; };
    const re = function () { p(); };
    const ie = me((e) => !0 === e.disabled && ('form' in e || 'label' in e), { dir: 'parentNode', next: 'legend' }); try { L.apply(A = H.call(w.childNodes), w.childNodes), A[w.childNodes.length].nodeType; } catch (e) {
      L = {
        apply: A.length ? function (e, t) { q.apply(e, H.call(t)); } : function (e, t) {
          let n = e.length;
          let r = 0; while (e[n++] = t[r++]);
          e.length = n - 1;
        },
      };
    }

    function oe(e, t, r, i) {
      let o; let s; let l; let c; let f; let h; let v; let m = t && t.ownerDocument;
      const T = t ? t.nodeType : 9; if (r = r || [], typeof e !== 'string' || !e || T !== 1 && T !== 9 && T !== 11) return r; if (!i && ((t ? t.ownerDocument || t : w) !== d && p(t), t = t || d, g)) {
        if (T !== 11 && (f = J.exec(e))) if (o = f[1]) { if (T === 9) { if (!(l = t.getElementById(o))) return r; if (l.id === o) return r.push(l), r; } else if (m && (l = m.getElementById(o)) && x(t, l) && l.id === o) return r.push(l), r; } else { if (f[2]) return L.apply(r, t.getElementsByTagName(e)), r; if ((o = f[3]) && n.getElementsByClassName && t.getElementsByClassName) return L.apply(r, t.getElementsByClassName(o)), r; }
        if (n.qsa && !S[`${e} `] && (!y || !y.test(e))) {
          if (T !== 1) m = t, v = e;
          else if (t.nodeName.toLowerCase() !== 'object') {
            (c = t.getAttribute('id')) ? c = c.replace(te, ne) : t.setAttribute('id', c = b), s = (h = a(e)).length; while (s--) h[s] = `#${c} ${ve(h[s])}`;
            v = h.join(','), m = K.test(e) && ge(t.parentNode) || t;
          } if (v) try { return L.apply(r, m.querySelectorAll(v)), r; } catch (e) {} finally { c === b && t.removeAttribute('id'); }
        }
      } return u(e.replace(B, '$1'), t, r, i);
    }

    function ae() {
      const e = [];

      function t(n, i) { return e.push(`${n} `) > r.cacheLength && delete t[e.shift()], t[`${n} `] = i; } return t;
    }

    function se(e) { return e[b] = !0, e; }

    function ue(e) { let t = d.createElement('fieldset'); try { return !!e(t); } catch (e) { return !1; } finally { t.parentNode && t.parentNode.removeChild(t), t = null; } }

    function le(e, t) {
      const n = e.split('|');
      let i = n.length; while (i--) r.attrHandle[n[i]] = t;
    }

    function ce(e, t) {
      let n = t && e;
      const r = n && e.nodeType === 1 && t.nodeType === 1 && e.sourceIndex - t.sourceIndex; if (r) return r; if (n) while (n = n.nextSibling) if (n === t) return -1;
      return e ? 1 : -1;
    }

    function fe(e) { return function (t) { return t.nodeName.toLowerCase() === 'input' && t.type === e; }; }

    function pe(e) { return function (t) { const n = t.nodeName.toLowerCase(); return (n === 'input' || n === 'button') && t.type === e; }; }

    function de(e) { return function (t) { return 'form' in t ? t.parentNode && !1 === t.disabled ? 'label' in t ? 'label' in t.parentNode ? t.parentNode.disabled === e : t.disabled === e : t.isDisabled === e || t.isDisabled !== !e && ie(t) === e : t.disabled === e : 'label' in t && t.disabled === e; }; }

    function he(e) {
      return se((t) => (t = +t, se((n, r) => {
        let i; const o = e([], n.length, t);
        let a = o.length; while (a--) n[i = o[a]] && (n[i] = !(r[i] = n[i]));
      })));
    }

    function ge(e) { return e && typeof e.getElementsByTagName !== 'undefined' && e; }
    n = oe.support = {}, o = oe.isXML = function (e) { const t = e && (e.ownerDocument || e).documentElement; return !!t && t.nodeName !== 'HTML'; }, p = oe.setDocument = function (e) {
      let t; let i; const
        a = e ? e.ownerDocument || e : w; return a !== d && a.nodeType === 9 && a.documentElement ? (d = a, h = d.documentElement, g = !o(d), w !== d && (i = d.defaultView) && i.top !== i && (i.addEventListener ? i.addEventListener('unload', re, !1) : i.attachEvent && i.attachEvent('onunload', re)), n.attributes = ue((e) => (e.className = 'i', !e.getAttribute('className'))), n.getElementsByTagName = ue((e) => (e.appendChild(d.createComment('')), !e.getElementsByTagName('*').length)), n.getElementsByClassName = Q.test(d.getElementsByClassName), n.getById = ue((e) => (h.appendChild(e).id = b, !d.getElementsByName || !d.getElementsByName(b).length)), n.getById ? (r.filter.ID = function (e) { const t = e.replace(Z, ee); return function (e) { return e.getAttribute('id') === t; }; }, r.find.ID = function (e, t) { if (typeof t.getElementById !== 'undefined' && g) { const n = t.getElementById(e); return n ? [n] : []; } }) : (r.filter.ID = function (e) { const t = e.replace(Z, ee); return function (e) { const n = typeof e.getAttributeNode !== 'undefined' && e.getAttributeNode('id'); return n && n.value === t; }; }, r.find.ID = function (e, t) {
        if (typeof t.getElementById !== 'undefined' && g) {
          let n; let r; let i; let
            o = t.getElementById(e); if (o) {
            if ((n = o.getAttributeNode('id')) && n.value === e) return [o];
            i = t.getElementsByName(e), r = 0; while (o = i[r++]) if ((n = o.getAttributeNode('id')) && n.value === e) return [o];
          } return [];
        }
      }), r.find.TAG = n.getElementsByTagName ? function (e, t) { return typeof t.getElementsByTagName !== 'undefined' ? t.getElementsByTagName(e) : n.qsa ? t.querySelectorAll(e) : void 0; } : function (e, t) {
        let n; const r = [];
        let i = 0;
        const o = t.getElementsByTagName(e); if (e === '*') { while (n = o[i++]) n.nodeType === 1 && r.push(n); return r; } return o;
      }, r.find.CLASS = n.getElementsByClassName && function (e, t) { if (typeof t.getElementsByClassName !== 'undefined' && g) return t.getElementsByClassName(e); }, v = [], y = [], (n.qsa = Q.test(d.querySelectorAll)) && (ue((e) => { h.appendChild(e).innerHTML = `<a id='${b}'></a><select id='${b}-\r\\' msallowcapture=''><option selected=''></option></select>`, e.querySelectorAll("[msallowcapture^='']").length && y.push(`[*^$]=${M}*(?:''|"")`), e.querySelectorAll('[selected]').length || y.push(`\\[${M}*(?:value|${P})`), e.querySelectorAll(`[id~=${b}-]`).length || y.push('~='), e.querySelectorAll(':checked').length || y.push(':checked'), e.querySelectorAll(`a#${b}+*`).length || y.push('.#.+[+~]'); }), ue((e) => {
        e.innerHTML = "<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>"; const t = d.createElement('input');
        t.setAttribute('type', 'hidden'), e.appendChild(t).setAttribute('name', 'D'), e.querySelectorAll('[name=d]').length && y.push(`name${M}*[*^$|!~]?=`), e.querySelectorAll(':enabled').length !== 2 && y.push(':enabled', ':disabled'), h.appendChild(e).disabled = !0, e.querySelectorAll(':disabled').length !== 2 && y.push(':enabled', ':disabled'), e.querySelectorAll('*,:x'), y.push(',.*:');
      })), (n.matchesSelector = Q.test(m = h.matches || h.webkitMatchesSelector || h.mozMatchesSelector || h.oMatchesSelector || h.msMatchesSelector)) && ue((e) => { n.disconnectedMatch = m.call(e, '*'), m.call(e, "[s!='']:x"), v.push('!=', W); }), y = y.length && new RegExp(y.join('|')), v = v.length && new RegExp(v.join('|')), t = Q.test(h.compareDocumentPosition), x = t || Q.test(h.contains) ? function (e, t) {
        const n = e.nodeType === 9 ? e.documentElement : e;
        const r = t && t.parentNode; return e === r || !(!r || r.nodeType !== 1 || !(n.contains ? n.contains(r) : e.compareDocumentPosition && 16 & e.compareDocumentPosition(r)));
      } : function (e, t) {
        if (t) while (t = t.parentNode) if (t === e) return !0;
        return !1;
      }, D = t ? function (e, t) { if (e === t) return f = !0, 0; let r = !e.compareDocumentPosition - !t.compareDocumentPosition; return r || (1 & (r = (e.ownerDocument || e) === (t.ownerDocument || t) ? e.compareDocumentPosition(t) : 1) || !n.sortDetached && t.compareDocumentPosition(e) === r ? e === d || e.ownerDocument === w && x(w, e) ? -1 : t === d || t.ownerDocument === w && x(w, t) ? 1 : c ? O(c, e) - O(c, t) : 0 : 4 & r ? -1 : 1); } : function (e, t) {
        if (e === t) return f = !0, 0; let n; let r = 0;
        const i = e.parentNode;
        const o = t.parentNode;
        const a = [e];
        const s = [t]; if (!i || !o) return e === d ? -1 : t === d ? 1 : i ? -1 : o ? 1 : c ? O(c, e) - O(c, t) : 0; if (i === o) return ce(e, t);
        n = e; while (n = n.parentNode) a.unshift(n);
        n = t; while (n = n.parentNode) s.unshift(n); while (a[r] === s[r]) r++; return r ? ce(a[r], s[r]) : a[r] === w ? -1 : s[r] === w ? 1 : 0;
      }, d) : d;
    }, oe.matches = function (e, t) { return oe(e, null, null, t); }, oe.matchesSelector = function (e, t) {
      if ((e.ownerDocument || e) !== d && p(e), t = t.replace(z, "='$1']"), n.matchesSelector && g && !S[`${t} `] && (!v || !v.test(t)) && (!y || !y.test(t))) try { const r = m.call(e, t); if (r || n.disconnectedMatch || e.document && e.document.nodeType !== 11) return r; } catch (e) {}
      return oe(t, d, null, [e]).length > 0;
    }, oe.contains = function (e, t) { return (e.ownerDocument || e) !== d && p(e), x(e, t); }, oe.attr = function (e, t) {
      (e.ownerDocument || e) !== d && p(e); const i = r.attrHandle[t.toLowerCase()];
      let o = i && N.call(r.attrHandle, t.toLowerCase()) ? i(e, t, !g) : void 0; return void 0 !== o ? o : n.attributes || !g ? e.getAttribute(t) : (o = e.getAttributeNode(t)) && o.specified ? o.value : null;
    }, oe.escape = function (e) { return (`${e}`).replace(te, ne); }, oe.error = function (e) { throw new Error(`Syntax error, unrecognized expression: ${e}`); }, oe.uniqueSort = function (e) {
      let t; const r = [];
      let i = 0;
      let o = 0; if (f = !n.detectDuplicates, c = !n.sortStable && e.slice(0), e.sort(D), f) { while (t = e[o++]) t === e[o] && (i = r.push(o)); while (i--) e.splice(r[i], 1); } return c = null, e;
    }, i = oe.getText = function (e) {
      let t; let n = '';
      let r = 0;
      const o = e.nodeType; if (o) { if (o === 1 || o === 9 || o === 11) { if (typeof e.textContent === 'string') return e.textContent; for (e = e.firstChild; e; e = e.nextSibling) n += i(e); } else if (o === 3 || o === 4) return e.nodeValue; } else while (t = e[r++]) n += i(t); return n;
    }, (r = oe.selectors = {
      cacheLength: 50,
      createPseudo: se,
      match: V,
      attrHandle: {},
      find: {},
      relative: {
        '>': { dir: 'parentNode', first: !0 }, ' ': { dir: 'parentNode' }, '+': { dir: 'previousSibling', first: !0 }, '~': { dir: 'previousSibling' },
      },
      preFilter: {
        ATTR(e) { return e[1] = e[1].replace(Z, ee), e[3] = (e[3] || e[4] || e[5] || '').replace(Z, ee), e[2] === '~=' && (e[3] = ` ${e[3]} `), e.slice(0, 4); },
        CHILD(e) { return e[1] = e[1].toLowerCase(), e[1].slice(0, 3) === 'nth' ? (e[3] || oe.error(e[0]), e[4] = +(e[4] ? e[5] + (e[6] || 1) : 2 * (e[3] === 'even' || e[3] === 'odd')), e[5] = +(e[7] + e[8] || e[3] === 'odd')) : e[3] && oe.error(e[0]), e; },
        PSEUDO(e) {
          let t; const
            n = !e[6] && e[2]; return V.CHILD.test(e[0]) ? null : (e[3] ? e[2] = e[4] || e[5] || '' : n && X.test(n) && (t = a(n, !0)) && (t = n.indexOf(')', n.length - t) - n.length) && (e[0] = e[0].slice(0, t), e[2] = n.slice(0, t)), e.slice(0, 3));
        },
      },
      filter: {
        TAG(e) { const t = e.replace(Z, ee).toLowerCase(); return e === '*' ? function () { return !0; } : function (e) { return e.nodeName && e.nodeName.toLowerCase() === t; }; },
        CLASS(e) { let t = E[`${e} `]; return t || (t = new RegExp(`(^|${M})${e}(${M}|$)`)) && E(e, (e) => t.test(typeof e.className === 'string' && e.className || typeof e.getAttribute !== 'undefined' && e.getAttribute('class') || '')); },
        ATTR(e, t, n) { return function (r) { let i = oe.attr(r, e); return i == null ? t === '!=' : !t || (i += '', t === '=' ? i === n : t === '!=' ? i !== n : t === '^=' ? n && i.indexOf(n) === 0 : t === '*=' ? n && i.indexOf(n) > -1 : t === '$=' ? n && i.slice(-n.length) === n : t === '~=' ? (` ${i.replace($, ' ')} `).indexOf(n) > -1 : t === '|=' && (i === n || i.slice(0, n.length + 1) === `${n}-`)); }; },
        CHILD(e, t, n, r, i) {
          const o = e.slice(0, 3) !== 'nth';
          const a = e.slice(-4) !== 'last';
          const s = t === 'of-type'; return r === 1 && i === 0 ? function (e) { return !!e.parentNode; } : function (t, n, u) {
            let l; let c; let f; let p; let d; let h; let g = o !== a ? 'nextSibling' : 'previousSibling';
            const y = t.parentNode;
            const v = s && t.nodeName.toLowerCase();
            const m = !u && !s;
            let x = !1; if (y) {
              if (o) {
                while (g) {
                  p = t; while (p = p[g]) if (s ? p.nodeName.toLowerCase() === v : p.nodeType === 1) return !1;
                  h = g = e === 'only' && !h && 'nextSibling';
                } return !0;
              } if (h = [a ? y.firstChild : y.lastChild], a && m) {
                x = (d = (l = (c = (f = (p = y)[b] || (p[b] = {}))[p.uniqueID] || (f[p.uniqueID] = {}))[e] || [])[0] === T && l[1]) && l[2], p = d && y.childNodes[d]; while (p = ++d && p && p[g] || (x = d = 0) || h.pop()) if (p.nodeType === 1 && ++x && p === t) { c[e] = [T, d, x]; break; }
              } else if (m && (x = d = (l = (c = (f = (p = t)[b] || (p[b] = {}))[p.uniqueID] || (f[p.uniqueID] = {}))[e] || [])[0] === T && l[1]), !1 === x) while (p = ++d && p && p[g] || (x = d = 0) || h.pop()) if ((s ? p.nodeName.toLowerCase() === v : p.nodeType === 1) && ++x && (m && ((c = (f = p[b] || (p[b] = {}))[p.uniqueID] || (f[p.uniqueID] = {}))[e] = [T, x]), p === t)) break;
              return (x -= i) === r || x % r == 0 && x / r >= 0;
            }
          };
        },
        PSEUDO(e, t) {
          let n; const
            i = r.pseudos[e] || r.setFilters[e.toLowerCase()] || oe.error(`unsupported pseudo: ${e}`); return i[b] ? i(t) : i.length > 1 ? (n = [e, e, '', t], r.setFilters.hasOwnProperty(e.toLowerCase()) ? se((e, n) => {
            let r; const o = i(e, t);
            let a = o.length; while (a--) e[r = O(e, o[a])] = !(n[r] = o[a]);
          }) : function (e) { return i(e, 0, n); }) : i;
        },
      },
      pseudos: {
        not: se((e) => {
          const t = [];
          const n = [];
          const r = s(e.replace(B, '$1')); return r[b] ? se((e, t, n, i) => {
            let o; const a = r(e, null, i, []);
            let s = e.length; while (s--)(o = a[s]) && (e[s] = !(t[s] = o));
          }) : function (e, i, o) { return t[0] = e, r(t, null, o, n), t[0] = null, !n.pop(); };
        }),
        has: se((e) => function (t) { return oe(e, t).length > 0; }),
        contains: se((e) => (e = e.replace(Z, ee),
        function (t) { return (t.textContent || t.innerText || i(t)).indexOf(e) > -1; })),
        lang: se((e) => (U.test(e || '') || oe.error(`unsupported lang: ${e}`), e = e.replace(Z, ee).toLowerCase(),
        function (t) {
          let n;
          do { if (n = g ? t.lang : t.getAttribute('xml:lang') || t.getAttribute('lang')) return (n = n.toLowerCase()) === e || n.indexOf(`${e}-`) === 0; } while ((t = t.parentNode) && t.nodeType === 1); return !1;
        })),
        target(t) { const n = e.location && e.location.hash; return n && n.slice(1) === t.id; },
        root(e) { return e === h; },
        focus(e) { return e === d.activeElement && (!d.hasFocus || d.hasFocus()) && !!(e.type || e.href || ~e.tabIndex); },
        enabled: de(!1),
        disabled: de(!0),
        checked(e) { const t = e.nodeName.toLowerCase(); return t === 'input' && !!e.checked || t === 'option' && !!e.selected; },
        selected(e) { return e.parentNode && e.parentNode.selectedIndex, !0 === e.selected; },
        empty(e) {
          for (e = e.firstChild; e; e = e.nextSibling) if (e.nodeType < 6) return !1;
          return !0;
        },
        parent(e) { return !r.pseudos.empty(e); },
        header(e) { return Y.test(e.nodeName); },
        input(e) { return G.test(e.nodeName); },
        button(e) { const t = e.nodeName.toLowerCase(); return t === 'input' && e.type === 'button' || t === 'button'; },
        text(e) { let t; return e.nodeName.toLowerCase() === 'input' && e.type === 'text' && ((t = e.getAttribute('type')) == null || t.toLowerCase() === 'text'); },
        first: he(() => [0]),
        last: he((e, t) => [t - 1]),
        eq: he((e, t, n) => [n < 0 ? n + t : n]),
        even: he((e, t) => { for (let n = 0; n < t; n += 2) e.push(n); return e; }),
        odd: he((e, t) => { for (let n = 1; n < t; n += 2) e.push(n); return e; }),
        lt: he((e, t, n) => { for (let r = n < 0 ? n + t : n; --r >= 0;) e.push(r); return e; }),
        gt: he((e, t, n) => { for (let r = n < 0 ? n + t : n; ++r < t;) e.push(r); return e; }),
      },
    }).pseudos.nth = r.pseudos.eq; for (t in {
      radio: !0, checkbox: !0, file: !0, password: !0, image: !0,
    }) r.pseudos[t] = fe(t); for (t in { submit: !0, reset: !0 }) r.pseudos[t] = pe(t);

    function ye() {}
    ye.prototype = r.filters = r.pseudos, r.setFilters = new ye(), a = oe.tokenize = function (e, t) {
      let n; let i; let o; let a; let s; let u; let l; const
        c = k[`${e} `]; if (c) return t ? 0 : c.slice(0);
      s = e, u = [], l = r.preFilter; while (s) { n && !(i = F.exec(s)) || (i && (s = s.slice(i[0].length) || s), u.push(o = [])), n = !1, (i = _.exec(s)) && (n = i.shift(), o.push({ value: n, type: i[0].replace(B, ' ') }), s = s.slice(n.length)); for (a in r.filter) !(i = V[a].exec(s)) || l[a] && !(i = l[a](i)) || (n = i.shift(), o.push({ value: n, type: a, matches: i }), s = s.slice(n.length)); if (!n) break; } return t ? s.length : s ? oe.error(e) : k(e, u).slice(0);
    };

    function ve(e) { for (var t = 0, n = e.length, r = ''; t < n; t++) r += e[t].value; return r; }

    function me(e, t, n) {
      const r = t.dir;
      const i = t.next;
      const o = i || r;
      const a = n && o === 'parentNode';
      const s = C++; return t.first ? function (t, n, i) {
        while (t = t[r]) if (t.nodeType === 1 || a) return e(t, n, i);
        return !1;
      } : function (t, n, u) {
        let l; let c; let f; const
          p = [T, s]; if (u) {
          while (t = t[r]) if ((t.nodeType === 1 || a) && e(t, n, u)) return !0;
        } else {
          while (t = t[r]) {
            if (t.nodeType === 1 || a) {
              if (f = t[b] || (t[b] = {}), c = f[t.uniqueID] || (f[t.uniqueID] = {}), i && i === t.nodeName.toLowerCase()) t = t[r] || t;
              else { if ((l = c[o]) && l[0] === T && l[1] === s) return p[2] = l[2]; if (c[o] = p, p[2] = e(t, n, u)) return !0; }
            }
          }
        } return !1;
      };
    }

    function xe(e) {
      return e.length > 1 ? function (t, n, r) {
        let i = e.length; while (i--) if (!e[i](t, n, r)) return !1;
        return !0;
      } : e[0];
    }

    function be(e, t, n) { for (let r = 0, i = t.length; r < i; r++) oe(e, t[r], n); return n; }

    function we(e, t, n, r, i) { for (var o, a = [], s = 0, u = e.length, l = t != null; s < u; s++)(o = e[s]) && (n && !n(o, r, i) || (a.push(o), l && t.push(s))); return a; }

    function Te(e, t, n, r, i, o) {
      return r && !r[b] && (r = Te(r)), i && !i[b] && (i = Te(i, o)), se((o, a, s, u) => {
        let l; let c; let f; const p = [];
        const d = [];
        const h = a.length;
        const g = o || be(t || '*', s.nodeType ? [s] : s, []);
        const y = !e || !o && t ? g : we(g, p, e, s, u);
        let v = n ? i || (o ? e : h || r) ? [] : a : y; if (n && n(y, v, s, u), r) { l = we(v, d), r(l, [], s, u), c = l.length; while (c--)(f = l[c]) && (v[d[c]] = !(y[d[c]] = f)); } if (o) {
          if (i || e) {
            if (i) {
              l = [], c = v.length; while (c--)(f = v[c]) && l.push(y[c] = f);
              i(null, v = [], l, u);
            }
            c = v.length; while (c--)(f = v[c]) && (l = i ? O(o, f) : p[c]) > -1 && (o[l] = !(a[l] = f));
          }
        } else v = we(v === a ? v.splice(h, v.length) : v), i ? i(null, a, v, u) : L.apply(a, v);
      });
    }

    function Ce(e) {
      for (var t, n, i, o = e.length, a = r.relative[e[0].type], s = a || r.relative[' '], u = a ? 1 : 0, c = me((e) => e === t, s, !0), f = me((e) => O(t, e) > -1, s, !0), p = [function (e, n, r) { const i = !a && (r || n !== l) || ((t = n).nodeType ? c(e, n, r) : f(e, n, r)); return t = null, i; }]; u < o; u++) {
        if (n = r.relative[e[u].type]) p = [me(xe(p), n)];
        else {
          if ((n = r.filter[e[u].type].apply(null, e[u].matches))[b]) {
            for (i = ++u; i < o; i++) if (r.relative[e[i].type]) break;
            return Te(u > 1 && xe(p), u > 1 && ve(e.slice(0, u - 1).concat({ value: e[u - 2].type === ' ' ? '*' : '' })).replace(B, '$1'), n, u < i && Ce(e.slice(u, i)), i < o && Ce(e = e.slice(i)), i < o && ve(e));
          }
          p.push(n);
        }
      }
      return xe(p);
    }

    function Ee(e, t) {
      const n = t.length > 0;
      const i = e.length > 0;
      const o = function (o, a, s, u, c) {
        let f; let h; let y; let v = 0;
        let m = '0';
        const x = o && [];
        let b = [];
        const w = l;
        const C = o || i && r.find.TAG('*', c);
        const E = T += w == null ? 1 : Math.random() || 0.1;
        const k = C.length; for (c && (l = a === d || a || c); m !== k && (f = C[m]) != null; m++) {
          if (i && f) {
            h = 0, a || f.ownerDocument === d || (p(f), s = !g); while (y = e[h++]) if (y(f, a || d, s)) { u.push(f); break; }
            c && (T = E);
          }
          n && ((f = !y && f) && v--, o && x.push(f));
        } if (v += m, n && m !== v) {
          h = 0; while (y = t[h++]) y(x, b, a, s); if (o) {
            if (v > 0) while (m--) x[m] || b[m] || (b[m] = j.call(u));
            b = we(b);
          }
          L.apply(u, b), c && !o && b.length > 0 && v + t.length > 1 && oe.uniqueSort(u);
        } return c && (T = E, l = w), x;
      }; return n ? se(o) : o;
    } return s = oe.compile = function (e, t) {
      let n; const r = [];
      const i = [];
      let o = S[`${e} `]; if (!o) {
        t || (t = a(e)), n = t.length; while (n--)(o = Ce(t[n]))[b] ? r.push(o) : i.push(o);
        (o = S(e, Ee(i, r))).selector = e;
      } return o;
    }, u = oe.select = function (e, t, n, i) {
      let o; let u; let l; let c; let f; const p = typeof e === 'function' && e;
      const d = !i && a(e = p.selector || e); if (n = n || [], d.length === 1) {
        if ((u = d[0] = d[0].slice(0)).length > 2 && (l = u[0]).type === 'ID' && t.nodeType === 9 && g && r.relative[u[1].type]) {
          if (!(t = (r.find.ID(l.matches[0].replace(Z, ee), t) || [])[0])) return n;
          p && (t = t.parentNode), e = e.slice(u.shift().value.length);
        }
        o = V.needsContext.test(e) ? 0 : u.length; while (o--) { if (l = u[o], r.relative[c = l.type]) break; if ((f = r.find[c]) && (i = f(l.matches[0].replace(Z, ee), K.test(u[0].type) && ge(t.parentNode) || t))) { if (u.splice(o, 1), !(e = i.length && ve(u))) return L.apply(n, i), n; break; } }
      } return (p || s(e, d))(i, t, !g, n, !t || K.test(e) && ge(t.parentNode) || t), n;
    }, n.sortStable = b.split('').sort(D).join('') === b, n.detectDuplicates = !!f, p(), n.sortDetached = ue((e) => 1 & e.compareDocumentPosition(d.createElement('fieldset'))), ue((e) => (e.innerHTML = "<a href='#'></a>", e.firstChild.getAttribute('href') === '#')) || le('type|href|height|width', (e, t, n) => { if (!n) return e.getAttribute(t, t.toLowerCase() === 'type' ? 1 : 2); }), n.attributes && ue((e) => (e.innerHTML = '<input/>', e.firstChild.setAttribute('value', ''), e.firstChild.getAttribute('value') === '')) || le('value', (e, t, n) => { if (!n && e.nodeName.toLowerCase() === 'input') return e.defaultValue; }), ue((e) => e.getAttribute('disabled') == null) || le(P, (e, t, n) => { let r; if (!n) return !0 === e[t] ? t.toLowerCase() : (r = e.getAttributeNode(t)) && r.specified ? r.value : null; }), oe;
  }(e));
  w.find = E, w.expr = E.selectors, w.expr[':'] = w.expr.pseudos, w.uniqueSort = w.unique = E.uniqueSort, w.text = E.getText, w.isXMLDoc = E.isXML, w.contains = E.contains, w.escapeSelector = E.escape; const k = function (e, t, n) {
    const r = [];
    const i = void 0 !== n; while ((e = e[t]) && e.nodeType !== 9) {
      if (e.nodeType === 1) {
        if (i && w(e).is(n)) break;
        r.push(e);
      }
    }
    return r;
  };
  const S = function (e, t) { for (var n = []; e; e = e.nextSibling) e.nodeType === 1 && e !== t && n.push(e); return n; };
  const D = w.expr.match.needsContext;

  function N(e, t) { return e.nodeName && e.nodeName.toLowerCase() === t.toLowerCase(); } const A = /^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;

  function j(e, t, n) { return g(t) ? w.grep(e, (e, r) => !!t.call(e, r, e) !== n) : t.nodeType ? w.grep(e, (e) => e === t !== n) : typeof t !== 'string' ? w.grep(e, (e) => u.call(t, e) > -1 !== n) : w.filter(t, e, n); }
  w.filter = function (e, t, n) { const r = t[0]; return n && (e = `:not(${e})`), t.length === 1 && r.nodeType === 1 ? w.find.matchesSelector(r, e) ? [r] : [] : w.find.matches(e, w.grep(t, (e) => e.nodeType === 1)); }, w.fn.extend({
    find(e) {
      let t; let n; const r = this.length;
      const i = this; if (typeof e !== 'string') {
        return this.pushStack(w(e).filter(function () {
          for (t = 0; t < r; t++) if (w.contains(i[t], this)) return !0;
        }));
      } for (n = this.pushStack([]), t = 0; t < r; t++) w.find(e, i[t], n); return r > 1 ? w.uniqueSort(n) : n;
    },
    filter(e) { return this.pushStack(j(this, e || [], !1)); },
    not(e) { return this.pushStack(j(this, e || [], !0)); },
    is(e) { return !!j(this, typeof e === 'string' && D.test(e) ? w(e) : e || [], !1).length; },
  }); let q; const
    L = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/;
  (w.fn.init = function (e, t, n) {
    let i; let
      o; if (!e) return this; if (n = n || q, typeof e === 'string') {
      if (!(i = e[0] === '<' && e[e.length - 1] === '>' && e.length >= 3 ? [null, e, null] : L.exec(e)) || !i[1] && t) return !t || t.jquery ? (t || n).find(e) : this.constructor(t).find(e); if (i[1]) {
        if (t = t instanceof w ? t[0] : t, w.merge(this, w.parseHTML(i[1], t && t.nodeType ? t.ownerDocument || t : r, !0)), A.test(i[1]) && w.isPlainObject(t)) for (i in t) g(this[i]) ? this[i](t[i]) : this.attr(i, t[i]); return this;
      } return (o = r.getElementById(i[2])) && (this[0] = o, this.length = 1), this;
    } return e.nodeType ? (this[0] = e, this.length = 1, this) : g(e) ? void 0 !== n.ready ? n.ready(e) : e(w) : w.makeArray(e, this);
  }).prototype = w.fn, q = w(r); const H = /^(?:parents|prev(?:Until|All))/;
  const O = {
    children: !0, contents: !0, next: !0, prev: !0,
  };
  w.fn.extend({
    has(e) {
      const t = w(e, this);
      const n = t.length; return this.filter(function () {
        for (let e = 0; e < n; e++) if (w.contains(this, t[e])) return !0;
      });
    },
    closest(e, t) {
      let n; let r = 0;
      const i = this.length;
      const o = [];
      const a = typeof e !== 'string' && w(e); if (!D.test(e)) for (; r < i; r++) for (n = this[r]; n && n !== t; n = n.parentNode) if (n.nodeType < 11 && (a ? a.index(n) > -1 : n.nodeType === 1 && w.find.matchesSelector(n, e))) { o.push(n); break; }
      return this.pushStack(o.length > 1 ? w.uniqueSort(o) : o);
    },
    index(e) { return e ? typeof e === 'string' ? u.call(w(e), this[0]) : u.call(this, e.jquery ? e[0] : e) : this[0] && this[0].parentNode ? this.first().prevAll().length : -1; },
    add(e, t) { return this.pushStack(w.uniqueSort(w.merge(this.get(), w(e, t)))); },
    addBack(e) { return this.add(e == null ? this.prevObject : this.prevObject.filter(e)); },
  });

  function P(e, t) { while ((e = e[t]) && e.nodeType !== 1); return e; }
  w.each({
    parent(e) { const t = e.parentNode; return t && t.nodeType !== 11 ? t : null; }, parents(e) { return k(e, 'parentNode'); }, parentsUntil(e, t, n) { return k(e, 'parentNode', n); }, next(e) { return P(e, 'nextSibling'); }, prev(e) { return P(e, 'previousSibling'); }, nextAll(e) { return k(e, 'nextSibling'); }, prevAll(e) { return k(e, 'previousSibling'); }, nextUntil(e, t, n) { return k(e, 'nextSibling', n); }, prevUntil(e, t, n) { return k(e, 'previousSibling', n); }, siblings(e) { return S((e.parentNode || {}).firstChild, e); }, children(e) { return S(e.firstChild); }, contents(e) { return N(e, 'iframe') ? e.contentDocument : (N(e, 'template') && (e = e.content || e), w.merge([], e.childNodes)); },
  }, (e, t) => { w.fn[e] = function (n, r) { let i = w.map(this, t, n); return e.slice(-5) !== 'Until' && (r = n), r && typeof r === 'string' && (i = w.filter(r, i)), this.length > 1 && (O[e] || w.uniqueSort(i), H.test(e) && i.reverse()), this.pushStack(i); }; }); const M = /[^\x20\t\r\n\f]+/g;

  function R(e) { const t = {}; return w.each(e.match(M) || [], (e, n) => { t[n] = !0; }), t; }
  w.Callbacks = function (e) {
    e = typeof e === 'string' ? R(e) : w.extend({}, e); let t; let n; let r; let i; let o = [];
    let a = [];
    let s = -1;
    const u = function () {
      for (i = i || e.once, r = t = !0; a.length; s = -1) { n = a.shift(); while (++s < o.length) !1 === o[s].apply(n[0], n[1]) && e.stopOnFalse && (s = o.length, n = !1); }
      e.memory || (n = !1), t = !1, i && (o = n ? [] : '');
    };
    var l = {
      add() { return o && (n && !t && (s = o.length - 1, a.push(n)), (function t(n) { w.each(n, (n, r) => { g(r) ? e.unique && l.has(r) || o.push(r) : r && r.length && x(r) !== 'string' && t(r); }); }(arguments)), n && !t && u()), this; }, remove() { return w.each(arguments, (e, t) => { let n; while ((n = w.inArray(t, o, n)) > -1) o.splice(n, 1), n <= s && s--; }), this; }, has(e) { return e ? w.inArray(e, o) > -1 : o.length > 0; }, empty() { return o && (o = []), this; }, disable() { return i = a = [], o = n = '', this; }, disabled() { return !o; }, lock() { return i = a = [], n || t || (o = n = ''), this; }, locked() { return !!i; }, fireWith(e, n) { return i || (n = [e, (n = n || []).slice ? n.slice() : n], a.push(n), t || u()), this; }, fire() { return l.fireWith(this, arguments), this; }, fired() { return !!r; },
    }; return l;
  };

  function I(e) { return e; }

  function W(e) { throw e; }

  function $(e, t, n, r) { let i; try { e && g(i = e.promise) ? i.call(e).done(t).fail(n) : e && g(i = e.then) ? i.call(e, t, n) : t.apply(void 0, [e].slice(r)); } catch (e) { n.apply(void 0, [e]); } }
  w.extend({
    Deferred(t) {
      const n = [
        ['notify', 'progress', w.Callbacks('memory'), w.Callbacks('memory'), 2],
        ['resolve', 'done', w.Callbacks('once memory'), w.Callbacks('once memory'), 0, 'resolved'],
        ['reject', 'fail', w.Callbacks('once memory'), w.Callbacks('once memory'), 1, 'rejected'],
      ];
      let r = 'pending';
      var i = {
        state() { return r; },
        always() { return o.done(arguments).fail(arguments), this; },
        catch(e) { return i.then(null, e); },
        pipe() {
          let e = arguments; return w.Deferred((t) => {
            w.each(n, (n, r) => {
              const i = g(e[r[4]]) && e[r[4]];
              o[r[1]](function () {
                const e = i && i.apply(this, arguments);
                e && g(e.promise) ? e.promise().progress(t.notify).done(t.resolve).fail(t.reject) : t[`${r[0]}With`](this, i ? [e] : arguments);
              });
            }), e = null;
          }).promise();
        },
        then(t, r, i) {
          let o = 0;

          function a(t, n, r, i) {
            return function () {
              let s = this;
              let u = arguments;
              const l = function () {
                let e; let
                  l; if (!(t < o)) {
                  if ((e = r.apply(s, u)) === n.promise()) throw new TypeError('Thenable self-resolution');
                  l = e && (typeof e === 'object' || typeof e === 'function') && e.then, g(l) ? i ? l.call(e, a(o, n, I, i), a(o, n, W, i)) : (o++, l.call(e, a(o, n, I, i), a(o, n, W, i), a(o, n, I, n.notifyWith))) : (r !== I && (s = void 0, u = [e]), (i || n.resolveWith)(s, u));
                }
              };
              var c = i ? l : function () { try { l(); } catch (e) { w.Deferred.exceptionHook && w.Deferred.exceptionHook(e, c.stackTrace), t + 1 >= o && (r !== W && (s = void 0, u = [e]), n.rejectWith(s, u)); } };
              t ? c() : (w.Deferred.getStackHook && (c.stackTrace = w.Deferred.getStackHook()), e.setTimeout(c));
            };
          } return w.Deferred((e) => { n[0][3].add(a(0, e, g(i) ? i : I, e.notifyWith)), n[1][3].add(a(0, e, g(t) ? t : I)), n[2][3].add(a(0, e, g(r) ? r : W)); }).promise();
        },
        promise(e) { return e != null ? w.extend(e, i) : i; },
      };
      var o = {}; return w.each(n, (e, t) => {
        const a = t[2];
        const s = t[5];
        i[t[1]] = a.add, s && a.add(() => { r = s; }, n[3 - e][2].disable, n[3 - e][3].disable, n[0][2].lock, n[0][3].lock), a.add(t[3].fire), o[t[0]] = function () { return o[`${t[0]}With`](this === o ? void 0 : this, arguments), this; }, o[`${t[0]}With`] = a.fireWith;
      }), i.promise(o), t && t.call(o, o), o;
    },
    when(e) {
      let t = arguments.length;
      let n = t;
      const r = Array(n);
      const i = o.call(arguments);
      const a = w.Deferred();
      const s = function (e) { return function (n) { r[e] = this, i[e] = arguments.length > 1 ? o.call(arguments) : n, --t || a.resolveWith(r, i); }; }; if (t <= 1 && ($(e, a.done(s(n)).resolve, a.reject, !t), a.state() === 'pending' || g(i[n] && i[n].then))) return a.then(); while (n--) $(i[n], s(n), a.reject); return a.promise();
    },
  }); const B = /^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;
  w.Deferred.exceptionHook = function (t, n) { e.console && e.console.warn && t && B.test(t.name) && e.console.warn(`jQuery.Deferred exception: ${t.message}`, t.stack, n); }, w.readyException = function (t) { e.setTimeout(() => { throw t; }); }; const F = w.Deferred();
  w.fn.ready = function (e) { return F.then(e).catch((e) => { w.readyException(e); }), this; }, w.extend({
    isReady: !1,
    readyWait: 1,
    ready(e) {
      (!0 === e ? --w.readyWait : w.isReady) || (w.isReady = !0, !0 !== e && --w.readyWait > 0 || F.resolveWith(r, [w]));
    },
  }), w.ready.then = F.then;

  function _() { r.removeEventListener('DOMContentLoaded', _), e.removeEventListener('load', _), w.ready(); } r.readyState === 'complete' || r.readyState !== 'loading' && !r.documentElement.doScroll ? e.setTimeout(w.ready) : (r.addEventListener('DOMContentLoaded', _), e.addEventListener('load', _)); var z = function (e, t, n, r, i, o, a) {
    let s = 0;
    const u = e.length;
    let l = n == null; if (x(n) === 'object') { i = !0; for (s in n) z(e, t, s, n[s], !0, o, a); } else if (void 0 !== r && (i = !0, g(r) || (a = !0), l && (a ? (t.call(e, r), t = null) : (l = t, t = function (e, t, n) { return l.call(w(e), n); })), t)) for (; s < u; s++) t(e[s], n, a ? r : r.call(e[s], s, t(e[s], n))); return i ? e : l ? t.call(e) : u ? t(e[0], n) : o;
  };
  const X = /^-ms-/;
  const U = /-([a-z])/g;

  function V(e, t) { return t.toUpperCase(); }

  function G(e) { return e.replace(X, 'ms-').replace(U, V); } const Y = function (e) { return e.nodeType === 1 || e.nodeType === 9 || !+e.nodeType; };

  function Q() { this.expando = w.expando + Q.uid++; }
  Q.uid = 1, Q.prototype = {
    cache(e) { let t = e[this.expando]; return t || (t = {}, Y(e) && (e.nodeType ? e[this.expando] = t : Object.defineProperty(e, this.expando, { value: t, configurable: !0 }))), t; },
    set(e, t, n) {
      let r; const
        i = this.cache(e); if (typeof t === 'string') i[G(t)] = n;
      else for (r in t) i[G(r)] = t[r]; return i;
    },
    get(e, t) { return void 0 === t ? this.cache(e) : e[this.expando] && e[this.expando][G(t)]; },
    access(e, t, n) { return void 0 === t || t && typeof t === 'string' && void 0 === n ? this.get(e, t) : (this.set(e, t, n), void 0 !== n ? n : t); },
    remove(e, t) {
      let n; const
        r = e[this.expando]; if (void 0 !== r) { if (void 0 !== t) { n = (t = Array.isArray(t) ? t.map(G) : (t = G(t)) in r ? [t] : t.match(M) || []).length; while (n--) delete r[t[n]]; }(void 0 === t || w.isEmptyObject(r)) && (e.nodeType ? e[this.expando] = void 0 : delete e[this.expando]); }
    },
    hasData(e) { const t = e[this.expando]; return void 0 !== t && !w.isEmptyObject(t); },
  }; const J = new Q();
  const K = new Q();
  const Z = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/;
  const ee = /[A-Z]/g;

  function te(e) { return e === 'true' || e !== 'false' && (e === 'null' ? null : e === `${+e}` ? +e : Z.test(e) ? JSON.parse(e) : e); }

  function ne(e, t, n) {
    let r; if (void 0 === n && e.nodeType === 1) {
      if (r = `data-${t.replace(ee, '-$&').toLowerCase()}`, typeof (n = e.getAttribute(r)) === 'string') {
        try { n = te(n); } catch (e) {}
        K.set(e, t, n);
      } else n = void 0;
    }
    return n;
  }
  w.extend({
    hasData(e) { return K.hasData(e) || J.hasData(e); }, data(e, t, n) { return K.access(e, t, n); }, removeData(e, t) { K.remove(e, t); }, _data(e, t, n) { return J.access(e, t, n); }, _removeData(e, t) { J.remove(e, t); },
  }), w.fn.extend({
    data(e, t) {
      let n; let r; let i; const o = this[0];
      const a = o && o.attributes; if (void 0 === e) {
        if (this.length && (i = K.get(o), o.nodeType === 1 && !J.get(o, 'hasDataAttrs'))) {
          n = a.length; while (n--) a[n] && (r = a[n].name).indexOf('data-') === 0 && (r = G(r.slice(5)), ne(o, r, i[r]));
          J.set(o, 'hasDataAttrs', !0);
        } return i;
      } return typeof e === 'object' ? this.each(function () { K.set(this, e); }) : z(this, function (t) { let n; if (o && void 0 === t) { if (void 0 !== (n = K.get(o, e))) return n; if (void 0 !== (n = ne(o, e))) return n; } else this.each(function () { K.set(this, e, t); }); }, null, t, arguments.length > 1, null, !0);
    },
    removeData(e) { return this.each(function () { K.remove(this, e); }); },
  }), w.extend({
    queue(e, t, n) { let r; if (e) return t = `${t || 'fx'}queue`, r = J.get(e, t), n && (!r || Array.isArray(n) ? r = J.access(e, t, w.makeArray(n)) : r.push(n)), r || []; },
    dequeue(e, t) {
      t = t || 'fx'; const n = w.queue(e, t);
      let r = n.length;
      let i = n.shift();
      const o = w._queueHooks(e, t);
      const a = function () { w.dequeue(e, t); }; i === 'inprogress' && (i = n.shift(), r--), i && (t === 'fx' && n.unshift('inprogress'), delete o.stop, i.call(e, a, o)), !r && o && o.empty.fire();
    },
    _queueHooks(e, t) { const n = `${t}queueHooks`; return J.get(e, n) || J.access(e, n, { empty: w.Callbacks('once memory').add(() => { J.remove(e, [`${t}queue`, n]); }) }); },
  }), w.fn.extend({
    queue(e, t) {
      let n = 2; return typeof e !== 'string' && (t = e, e = 'fx', n--), arguments.length < n ? w.queue(this[0], e) : void 0 === t ? this : this.each(function () {
        const n = w.queue(this, e, t);
        w._queueHooks(this, e), e === 'fx' && n[0] !== 'inprogress' && w.dequeue(this, e);
      });
    },
    dequeue(e) { return this.each(function () { w.dequeue(this, e); }); },
    clearQueue(e) { return this.queue(e || 'fx', []); },
    promise(e, t) {
      let n; let r = 1;
      const i = w.Deferred();
      const o = this;
      let a = this.length;
      const s = function () { --r || i.resolveWith(o, [o]); }; typeof e !== 'string' && (t = e, e = void 0), e = e || 'fx'; while (a--)(n = J.get(o[a], `${e}queueHooks`)) && n.empty && (r++, n.empty.add(s)); return s(), i.promise(t);
    },
  }); const re = /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source;
  const ie = new RegExp(`^(?:([+-])=|)(${re})([a-z%]*)$`, 'i');
  const oe = ['Top', 'Right', 'Bottom', 'Left'];
  const ae = function (e, t) { return (e = t || e).style.display === 'none' || e.style.display === '' && w.contains(e.ownerDocument, e) && w.css(e, 'display') === 'none'; };
  const se = function (e, t, n, r) {
    let i; let o; const
      a = {}; for (o in t) a[o] = e.style[o], e.style[o] = t[o];
    i = n.apply(e, r || []); for (o in t) e.style[o] = a[o]; return i;
  };

  function ue(e, t, n, r) {
    let i; let o; let a = 20;
    const s = r ? function () { return r.cur(); } : function () { return w.css(e, t, ''); };
    let u = s();
    let l = n && n[3] || (w.cssNumber[t] ? '' : 'px');
    let c = (w.cssNumber[t] || l !== 'px' && +u) && ie.exec(w.css(e, t)); if (c && c[3] !== l) {
      u /= 2, l = l || c[3], c = +u || 1; while (a--) w.style(e, t, c + l), (1 - o) * (1 - (o = s() / u || 0.5)) <= 0 && (a = 0), c /= o;
      c *= 2, w.style(e, t, c + l), n = n || [];
    } return n && (c = +c || +u || 0, i = n[1] ? c + (n[1] + 1) * n[2] : +n[2], r && (r.unit = l, r.start = c, r.end = i)), i;
  } const le = {};

  function ce(e) {
    let t; const n = e.ownerDocument;
    const r = e.nodeName;
    let i = le[r]; return i || (t = n.body.appendChild(n.createElement(r)), i = w.css(t, 'display'), t.parentNode.removeChild(t), i === 'none' && (i = 'block'), le[r] = i, i);
  }

  function fe(e, t) { for (var n, r, i = [], o = 0, a = e.length; o < a; o++)(r = e[o]).style && (n = r.style.display, t ? (n === 'none' && (i[o] = J.get(r, 'display') || null, i[o] || (r.style.display = '')), r.style.display === '' && ae(r) && (i[o] = ce(r))) : n !== 'none' && (i[o] = 'none', J.set(r, 'display', n))); for (o = 0; o < a; o++) i[o] != null && (e[o].style.display = i[o]); return e; }
  w.fn.extend({ show() { return fe(this, !0); }, hide() { return fe(this); }, toggle(e) { return typeof e === 'boolean' ? e ? this.show() : this.hide() : this.each(function () { ae(this) ? w(this).show() : w(this).hide(); }); } }); const pe = /^(?:checkbox|radio)$/i;
  const de = /<([a-z][^\/\0>\x20\t\r\n\f]+)/i;
  const he = /^$|^module$|\/(?:java|ecma)script/i;
  const ge = {
    option: [1, "<select multiple='multiple'>", '</select>'], thead: [1, '<table>', '</table>'], col: [2, '<table><colgroup>', '</colgroup></table>'], tr: [2, '<table><tbody>', '</tbody></table>'], td: [3, '<table><tbody><tr>', '</tr></tbody></table>'], _default: [0, '', ''],
  };
  ge.optgroup = ge.option, ge.tbody = ge.tfoot = ge.colgroup = ge.caption = ge.thead, ge.th = ge.td;

  function ye(e, t) { let n; return n = typeof e.getElementsByTagName !== 'undefined' ? e.getElementsByTagName(t || '*') : typeof e.querySelectorAll !== 'undefined' ? e.querySelectorAll(t || '*') : [], void 0 === t || t && N(e, t) ? w.merge([e], n) : n; }

  function ve(e, t) { for (let n = 0, r = e.length; n < r; n++) J.set(e[n], 'globalEval', !t || J.get(t[n], 'globalEval')); } const me = /<|&#?\w+;/;

  function xe(e, t, n, r, i) {
    for (var o, a, s, u, l, c, f = t.createDocumentFragment(), p = [], d = 0, h = e.length; d < h; d++) {
      if ((o = e[d]) || o === 0) {
        if (x(o) === 'object') w.merge(p, o.nodeType ? [o] : o);
        else if (me.test(o)) {
          a = a || f.appendChild(t.createElement('div')), s = (de.exec(o) || ['', ''])[1].toLowerCase(), u = ge[s] || ge._default, a.innerHTML = u[1] + w.htmlPrefilter(o) + u[2], c = u[0]; while (c--) a = a.lastChild;
          w.merge(p, a.childNodes), (a = f.firstChild).textContent = '';
        } else p.push(t.createTextNode(o));
      }
    }
    f.textContent = '', d = 0; while (o = p[d++]) {
      if (r && w.inArray(o, r) > -1) i && i.push(o);
      else if (l = w.contains(o.ownerDocument, o), a = ye(f.appendChild(o), 'script'), l && ve(a), n) { c = 0; while (o = a[c++]) he.test(o.type || '') && n.push(o); }
    } return f;
  }!(function () {
    const e = r.createDocumentFragment().appendChild(r.createElement('div'));
    const t = r.createElement('input');
    t.setAttribute('type', 'radio'), t.setAttribute('checked', 'checked'), t.setAttribute('name', 't'), e.appendChild(t), h.checkClone = e.cloneNode(!0).cloneNode(!0).lastChild.checked, e.innerHTML = '<textarea>x</textarea>', h.noCloneChecked = !!e.cloneNode(!0).lastChild.defaultValue;
  }()); const be = r.documentElement;
  const we = /^key/;
  const Te = /^(?:mouse|pointer|contextmenu|drag|drop)|click/;
  const Ce = /^([^.]*)(?:\.(.+)|)/;

  function Ee() { return !0; }

  function ke() { return !1; }

  function Se() { try { return r.activeElement; } catch (e) {} }

  function De(e, t, n, r, i, o) {
    let a; let
      s; if (typeof t === 'object') { typeof n !== 'string' && (r = r || n, n = void 0); for (s in t) De(e, s, n, r, t[s], o); return e; } if (r == null && i == null ? (i = n, r = n = void 0) : i == null && (typeof n === 'string' ? (i = r, r = void 0) : (i = r, r = n, n = void 0)), !1 === i) i = ke;
    else if (!i) return e; return o === 1 && (a = i, (i = function (e) { return w().off(e), a.apply(this, arguments); }).guid = a.guid || (a.guid = w.guid++)), e.each(function () { w.event.add(this, t, i, r, n); });
  }
  w.event = {
    global: {},
    add(e, t, n, r, i) {
      let o; let a; let s; let u; let l; let c; let f; let p; let d; let h; let g; const
        y = J.get(e); if (y) {
        n.handler && (n = (o = n).handler, i = o.selector), i && w.find.matchesSelector(be, i), n.guid || (n.guid = w.guid++), (u = y.events) || (u = y.events = {}), (a = y.handle) || (a = y.handle = function (t) { return typeof w !== 'undefined' && w.event.triggered !== t.type ? w.event.dispatch.apply(e, arguments) : void 0; }), l = (t = (t || '').match(M) || ['']).length; while (l--) {
          d = g = (s = Ce.exec(t[l]) || [])[1], h = (s[2] || '').split('.').sort(), d && (f = w.event.special[d] || {}, d = (i ? f.delegateType : f.bindType) || d, f = w.event.special[d] || {}, c = w.extend({
            type: d, origType: g, data: r, handler: n, guid: n.guid, selector: i, needsContext: i && w.expr.match.needsContext.test(i), namespace: h.join('.'),
          }, o), (p = u[d]) || ((p = u[d] = []).delegateCount = 0, f.setup && !1 !== f.setup.call(e, r, h, a) || e.addEventListener && e.addEventListener(d, a)), f.add && (f.add.call(e, c), c.handler.guid || (c.handler.guid = n.guid)), i ? p.splice(p.delegateCount++, 0, c) : p.push(c), w.event.global[d] = !0);
        }
      }
    },
    remove(e, t, n, r, i) {
      let o; let a; let s; let u; let l; let c; let f; let p; let d; let h; let g; const
        y = J.hasData(e) && J.get(e); if (y && (u = y.events)) {
        l = (t = (t || '').match(M) || ['']).length; while (l--) {
          if (s = Ce.exec(t[l]) || [], d = g = s[1], h = (s[2] || '').split('.').sort(), d) {
            f = w.event.special[d] || {}, p = u[d = (r ? f.delegateType : f.bindType) || d] || [], s = s[2] && new RegExp(`(^|\\.)${h.join('\\.(?:.*\\.|)')}(\\.|$)`), a = o = p.length; while (o--) c = p[o], !i && g !== c.origType || n && n.guid !== c.guid || s && !s.test(c.namespace) || r && r !== c.selector && (r !== '**' || !c.selector) || (p.splice(o, 1), c.selector && p.delegateCount--, f.remove && f.remove.call(e, c));
            a && !p.length && (f.teardown && !1 !== f.teardown.call(e, h, y.handle) || w.removeEvent(e, d, y.handle), delete u[d]);
          } else for (d in u) w.event.remove(e, d + t[l], n, r, !0);
        }
        w.isEmptyObject(u) && J.remove(e, 'handle events');
      }
    },
    dispatch(e) {
      const t = w.event.fix(e);
      let n; let r; let i; let o; let a; let s; const u = new Array(arguments.length);
      const l = (J.get(this, 'events') || {})[t.type] || [];
      const c = w.event.special[t.type] || {}; for (u[0] = t, n = 1; n < arguments.length; n++) u[n] = arguments[n]; if (t.delegateTarget = this, !c.preDispatch || !1 !== c.preDispatch.call(this, t)) { s = w.event.handlers.call(this, t, l), n = 0; while ((o = s[n++]) && !t.isPropagationStopped()) { t.currentTarget = o.elem, r = 0; while ((a = o.handlers[r++]) && !t.isImmediatePropagationStopped()) t.rnamespace && !t.rnamespace.test(a.namespace) || (t.handleObj = a, t.data = a.data, void 0 !== (i = ((w.event.special[a.origType] || {}).handle || a.handler).apply(o.elem, u)) && !1 === (t.result = i) && (t.preventDefault(), t.stopPropagation())); } return c.postDispatch && c.postDispatch.call(this, t), t.result; }
    },
    handlers(e, t) {
      let n; let r; let i; let o; let a; const s = [];
      const u = t.delegateCount;
      let l = e.target; if (u && l.nodeType && !(e.type === 'click' && e.button >= 1)) {
        for (; l !== this; l = l.parentNode || this) {
          if (l.nodeType === 1 && (e.type !== 'click' || !0 !== l.disabled)) {
            for (o = [], a = {}, n = 0; n < u; n++) void 0 === a[i = `${(r = t[n]).selector} `] && (a[i] = r.needsContext ? w(i, this).index(l) > -1 : w.find(i, this, null, [l]).length), a[i] && o.push(r);
            o.length && s.push({ elem: l, handlers: o });
          }
        }
      }
      return l = this, u < t.length && s.push({ elem: l, handlers: t.slice(u) }), s;
    },
    addProp(e, t) {
      Object.defineProperty(w.Event.prototype, e, {
        enumerable: !0,
        configurable: !0,
        get: g(t) ? function () { if (this.originalEvent) return t(this.originalEvent); } : function () { if (this.originalEvent) return this.originalEvent[e]; },
        set(t) {
          Object.defineProperty(this, e, {
            enumerable: !0, configurable: !0, writable: !0, value: t,
          });
        },
      });
    },
    fix(e) { return e[w.expando] ? e : new w.Event(e); },
    special: {
      load: { noBubble: !0 }, focus: { trigger() { if (this !== Se() && this.focus) return this.focus(), !1; }, delegateType: 'focusin' }, blur: { trigger() { if (this === Se() && this.blur) return this.blur(), !1; }, delegateType: 'focusout' }, click: { trigger() { if (this.type === 'checkbox' && this.click && N(this, 'input')) return this.click(), !1; }, _default(e) { return N(e.target, 'a'); } }, beforeunload: { postDispatch(e) { void 0 !== e.result && e.originalEvent && (e.originalEvent.returnValue = e.result); } },
    },
  }, w.removeEvent = function (e, t, n) { e.removeEventListener && e.removeEventListener(t, n); }, w.Event = function (e, t) {
    if (!(this instanceof w.Event)) return new w.Event(e, t);
    e && e.type ? (this.originalEvent = e, this.type = e.type, this.isDefaultPrevented = e.defaultPrevented || void 0 === e.defaultPrevented && !1 === e.returnValue ? Ee : ke, this.target = e.target && e.target.nodeType === 3 ? e.target.parentNode : e.target, this.currentTarget = e.currentTarget, this.relatedTarget = e.relatedTarget) : this.type = e, t && w.extend(this, t), this.timeStamp = e && e.timeStamp || Date.now(), this[w.expando] = !0;
  }, w.Event.prototype = {
    constructor: w.Event,
    isDefaultPrevented: ke,
    isPropagationStopped: ke,
    isImmediatePropagationStopped: ke,
    isSimulated: !1,
    preventDefault() {
      const e = this.originalEvent;
      this.isDefaultPrevented = Ee, e && !this.isSimulated && e.preventDefault();
    },
    stopPropagation() {
      const e = this.originalEvent;
      this.isPropagationStopped = Ee, e && !this.isSimulated && e.stopPropagation();
    },
    stopImmediatePropagation() {
      const e = this.originalEvent;
      this.isImmediatePropagationStopped = Ee, e && !this.isSimulated && e.stopImmediatePropagation(), this.stopPropagation();
    },
  }, w.each({
    altKey: !0, bubbles: !0, cancelable: !0, changedTouches: !0, ctrlKey: !0, detail: !0, eventPhase: !0, metaKey: !0, pageX: !0, pageY: !0, shiftKey: !0, view: !0, char: !0, charCode: !0, key: !0, keyCode: !0, button: !0, buttons: !0, clientX: !0, clientY: !0, offsetX: !0, offsetY: !0, pointerId: !0, pointerType: !0, screenX: !0, screenY: !0, targetTouches: !0, toElement: !0, touches: !0, which(e) { const t = e.button; return e.which == null && we.test(e.type) ? e.charCode != null ? e.charCode : e.keyCode : !e.which && void 0 !== t && Te.test(e.type) ? 1 & t ? 1 : 2 & t ? 3 : 4 & t ? 2 : 0 : e.which; },
  }, w.event.addProp), w.each({
    mouseenter: 'mouseover', mouseleave: 'mouseout', pointerenter: 'pointerover', pointerleave: 'pointerout',
  }, (e, t) => {
    w.event.special[e] = {
      delegateType: t,
      bindType: t,
      handle(e) {
        let n; const r = this;
        const i = e.relatedTarget;
        const o = e.handleObj; return i && (i === r || w.contains(r, i)) || (e.type = o.origType, n = o.handler.apply(this, arguments), e.type = t), n;
      },
    };
  }), w.fn.extend({
    on(e, t, n, r) { return De(this, e, t, n, r); },
    one(e, t, n, r) { return De(this, e, t, n, r, 1); },
    off(e, t, n) {
      let r; let
        i; if (e && e.preventDefault && e.handleObj) return r = e.handleObj, w(e.delegateTarget).off(r.namespace ? `${r.origType}.${r.namespace}` : r.origType, r.selector, r.handler), this; if (typeof e === 'object') { for (i in e) this.off(i, t, e[i]); return this; } return !1 !== t && typeof t !== 'function' || (n = t, t = void 0), !1 === n && (n = ke), this.each(function () { w.event.remove(this, e, n, t); });
    },
  }); const Ne = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi;
  const Ae = /<script|<style|<link/i;
  const je = /checked\s*(?:[^=]|=\s*.checked.)/i;
  const qe = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;

  function Le(e, t) { return N(e, 'table') && N(t.nodeType !== 11 ? t : t.firstChild, 'tr') ? w(e).children('tbody')[0] || e : e; }

  function He(e) { return e.type = `${e.getAttribute('type') !== null}/${e.type}`, e; }

  function Oe(e) { return (e.type || '').slice(0, 5) === 'true/' ? e.type = e.type.slice(5) : e.removeAttribute('type'), e; }

  function Pe(e, t) {
    let n; let r; let i; let o; let a; let s; let u; let
      l; if (t.nodeType === 1) {
      if (J.hasData(e) && (o = J.access(e), a = J.set(t, o), l = o.events)) {
        delete a.handle, a.events = {}; for (i in l) for (n = 0, r = l[i].length; n < r; n++) w.event.add(t, i, l[i][n]);
      }
      K.hasData(e) && (s = K.access(e), u = w.extend({}, s), K.set(t, u));
    }
  }

  function Me(e, t) { const n = t.nodeName.toLowerCase(); n === 'input' && pe.test(e.type) ? t.checked = e.checked : n !== 'input' && n !== 'textarea' || (t.defaultValue = e.defaultValue); }

  function Re(e, t, n, r) {
    t = a.apply([], t); let i; let o; let s; let u; let l; let c; let f = 0;
    const p = e.length;
    const d = p - 1;
    const y = t[0];
    const v = g(y); if (v || p > 1 && typeof y === 'string' && !h.checkClone && je.test(y)) {
      return e.each(function (i) {
        const o = e.eq(i);
        v && (t[0] = y.call(this, i, o.html())), Re(o, t, n, r);
      });
    } if (p && (i = xe(t, e[0].ownerDocument, !1, e, r), o = i.firstChild, i.childNodes.length === 1 && (i = o), o || r)) {
      for (u = (s = w.map(ye(i, 'script'), He)).length; f < p; f++) l = i, f !== d && (l = w.clone(l, !0, !0), u && w.merge(s, ye(l, 'script'))), n.call(e[f], l, f); if (u) for (c = s[s.length - 1].ownerDocument, w.map(s, Oe), f = 0; f < u; f++) l = s[f], he.test(l.type || '') && !J.access(l, 'globalEval') && w.contains(c, l) && (l.src && (l.type || '').toLowerCase() !== 'module' ? w._evalUrl && w._evalUrl(l.src) : m(l.textContent.replace(qe, ''), c, l));
    } return e;
  }

  function Ie(e, t, n) { for (var r, i = t ? w.filter(t, e) : e, o = 0; (r = i[o]) != null; o++) n || r.nodeType !== 1 || w.cleanData(ye(r)), r.parentNode && (n && w.contains(r.ownerDocument, r) && ve(ye(r, 'script')), r.parentNode.removeChild(r)); return e; }
  w.extend({
    htmlPrefilter(e) { return e.replace(Ne, '<$1></$2>'); },
    clone(e, t, n) {
      let r; let i; let o; let a; const s = e.cloneNode(!0);
      const u = w.contains(e.ownerDocument, e); if (!(h.noCloneChecked || e.nodeType !== 1 && e.nodeType !== 11 || w.isXMLDoc(e))) for (a = ye(s), r = 0, i = (o = ye(e)).length; r < i; r++) Me(o[r], a[r]); if (t) {
        if (n) for (o = o || ye(e), a = a || ye(s), r = 0, i = o.length; r < i; r++) Pe(o[r], a[r]);
        else Pe(e, s);
      }
      return (a = ye(s, 'script')).length > 0 && ve(a, !u && ye(e, 'script')), s;
    },
    cleanData(e) {
      for (var t, n, r, i = w.event.special, o = 0; void 0 !== (n = e[o]); o++) {
        if (Y(n)) {
          if (t = n[J.expando]) {
            if (t.events) for (r in t.events) i[r] ? w.event.remove(n, r) : w.removeEvent(n, r, t.handle);
            n[J.expando] = void 0;
          }
          n[K.expando] && (n[K.expando] = void 0);
        }
      }
    },
  }), w.fn.extend({
    detach(e) { return Ie(this, e, !0); },
    remove(e) { return Ie(this, e); },
    text(e) { return z(this, function (e) { return void 0 === e ? w.text(this) : this.empty().each(function () { this.nodeType !== 1 && this.nodeType !== 11 && this.nodeType !== 9 || (this.textContent = e); }); }, null, e, arguments.length); },
    append() { return Re(this, arguments, function (e) { this.nodeType !== 1 && this.nodeType !== 11 && this.nodeType !== 9 || Le(this, e).appendChild(e); }); },
    prepend() {
      return Re(this, arguments, function (e) {
        if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
          const t = Le(this, e);
          t.insertBefore(e, t.firstChild);
        }
      });
    },
    before() { return Re(this, arguments, function (e) { this.parentNode && this.parentNode.insertBefore(e, this); }); },
    after() { return Re(this, arguments, function (e) { this.parentNode && this.parentNode.insertBefore(e, this.nextSibling); }); },
    empty() { for (var e, t = 0; (e = this[t]) != null; t++) e.nodeType === 1 && (w.cleanData(ye(e, !1)), e.textContent = ''); return this; },
    clone(e, t) { return e = e != null && e, t = t == null ? e : t, this.map(function () { return w.clone(this, e, t); }); },
    html(e) {
      return z(this, function (e) {
        let t = this[0] || {};
        let n = 0;
        const r = this.length; if (void 0 === e && t.nodeType === 1) return t.innerHTML; if (typeof e === 'string' && !Ae.test(e) && !ge[(de.exec(e) || ['', ''])[1].toLowerCase()]) {
          e = w.htmlPrefilter(e); try {
            for (; n < r; n++) (t = this[n] || {}).nodeType === 1 && (w.cleanData(ye(t, !1)), t.innerHTML = e);
            t = 0;
          } catch (e) {}
        }
        t && this.empty().append(e);
      }, null, e, arguments.length);
    },
    replaceWith() {
      const e = []; return Re(this, arguments, function (t) {
        const n = this.parentNode;
        w.inArray(this, e) < 0 && (w.cleanData(ye(this)), n && n.replaceChild(t, this));
      }, e);
    },
  }), w.each({
    appendTo: 'append', prependTo: 'prepend', insertBefore: 'before', insertAfter: 'after', replaceAll: 'replaceWith',
  }, (e, t) => { w.fn[e] = function (e) { for (var n, r = [], i = w(e), o = i.length - 1, a = 0; a <= o; a++) n = a === o ? this : this.clone(!0), w(i[a])[t](n), s.apply(r, n.get()); return this.pushStack(r); }; }); const We = new RegExp(`^(${re})(?!px)[a-z%]+$`, 'i');
  const $e = function (t) { let n = t.ownerDocument.defaultView; return n && n.opener || (n = e), n.getComputedStyle(t); };
  const Be = new RegExp(oe.join('|'), 'i'); !(function () {
    function t() {
      if (c) {
        l.style.cssText = 'position:absolute;left:-11111px;width:60px;margin-top:1px;padding:0;border:0', c.style.cssText = 'position:relative;display:block;box-sizing:border-box;overflow:scroll;margin:auto;border:1px;padding:1px;width:60%;top:1%', be.appendChild(l).appendChild(c); const t = e.getComputedStyle(c);
        i = t.top !== '1%', u = n(t.marginLeft) === 12, c.style.right = '60%', s = n(t.right) === 36, o = n(t.width) === 36, c.style.position = 'absolute', a = c.offsetWidth === 36 || 'absolute', be.removeChild(l), c = null;
      }
    }

    function n(e) { return Math.round(parseFloat(e)); } let i; let o; let a; let s; let u; var l = r.createElement('div');
    var c = r.createElement('div');
    c.style && (c.style.backgroundClip = 'content-box', c.cloneNode(!0).style.backgroundClip = '', h.clearCloneStyle = c.style.backgroundClip === 'content-box', w.extend(h, {
      boxSizingReliable() { return t(), o; }, pixelBoxStyles() { return t(), s; }, pixelPosition() { return t(), i; }, reliableMarginLeft() { return t(), u; }, scrollboxSize() { return t(), a; },
    }));
  }());

  function Fe(e, t, n) {
    let r; let i; let o; let a; const
      s = e.style; return (n = n || $e(e)) && ((a = n.getPropertyValue(t) || n[t]) !== '' || w.contains(e.ownerDocument, e) || (a = w.style(e, t)), !h.pixelBoxStyles() && We.test(a) && Be.test(t) && (r = s.width, i = s.minWidth, o = s.maxWidth, s.minWidth = s.maxWidth = s.width = a, a = n.width, s.width = r, s.minWidth = i, s.maxWidth = o)), void 0 !== a ? `${a}` : a;
  }

  function _e(e, t) {
    return {
      get() {
        if (!e()) return (this.get = t).apply(this, arguments);
        delete this.get;
      },
    };
  } const ze = /^(none|table(?!-c[ea]).+)/;
  const Xe = /^--/;
  const Ue = { position: 'absolute', visibility: 'hidden', display: 'block' };
  const Ve = { letterSpacing: '0', fontWeight: '400' };
  const Ge = ['Webkit', 'Moz', 'ms'];
  const Ye = r.createElement('div').style;

  function Qe(e) {
    if (e in Ye) return e; const t = e[0].toUpperCase() + e.slice(1);
    let n = Ge.length; while (n--) if ((e = Ge[n] + t) in Ye) return e;
  }

  function Je(e) { let t = w.cssProps[e]; return t || (t = w.cssProps[e] = Qe(e) || e), t; }

  function Ke(e, t, n) { const r = ie.exec(t); return r ? Math.max(0, r[2] - (n || 0)) + (r[3] || 'px') : t; }

  function Ze(e, t, n, r, i, o) {
    let a = t === 'width' ? 1 : 0;
    let s = 0;
    let u = 0; if (n === (r ? 'border' : 'content')) return 0; for (; a < 4; a += 2) n === 'margin' && (u += w.css(e, n + oe[a], !0, i)), r ? (n === 'content' && (u -= w.css(e, `padding${oe[a]}`, !0, i)), n !== 'margin' && (u -= w.css(e, `border${oe[a]}Width`, !0, i))) : (u += w.css(e, `padding${oe[a]}`, !0, i), n !== 'padding' ? u += w.css(e, `border${oe[a]}Width`, !0, i) : s += w.css(e, `border${oe[a]}Width`, !0, i)); return !r && o >= 0 && (u += Math.max(0, Math.ceil(e[`offset${t[0].toUpperCase()}${t.slice(1)}`] - o - u - s - 0.5))), u;
  }

  function et(e, t, n) {
    const r = $e(e);
    let i = Fe(e, t, r);
    const o = w.css(e, 'boxSizing', !1, r) === 'border-box';
    let a = o; if (We.test(i)) {
      if (!n) return i;
      i = 'auto';
    } return a = a && (h.boxSizingReliable() || i === e.style[t]), (i === 'auto' || !parseFloat(i) && w.css(e, 'display', !1, r) === 'inline') && (i = e[`offset${t[0].toUpperCase()}${t.slice(1)}`], a = !0), `${(i = parseFloat(i) || 0) + Ze(e, t, n || (o ? 'border' : 'content'), a, r, i)}px`;
  }
  w.extend({
    cssHooks: { opacity: { get(e, t) { if (t) { const n = Fe(e, 'opacity'); return n === '' ? '1' : n; } } } },
    cssNumber: {
      animationIterationCount: !0, columnCount: !0, fillOpacity: !0, flexGrow: !0, flexShrink: !0, fontWeight: !0, lineHeight: !0, opacity: !0, order: !0, orphans: !0, widows: !0, zIndex: !0, zoom: !0,
    },
    cssProps: {},
    style(e, t, n, r) {
      if (e && e.nodeType !== 3 && e.nodeType !== 8 && e.style) {
        let i; let o; let a; const s = G(t);
        const u = Xe.test(t);
        const l = e.style; if (u || (t = Je(s)), a = w.cssHooks[t] || w.cssHooks[s], void 0 === n) return a && 'get' in a && void 0 !== (i = a.get(e, !1, r)) ? i : l[t]; (o = typeof n) == 'string' && (i = ie.exec(n)) && i[1] && (n = ue(e, t, i), o = 'number'), n != null && n === n && (o === 'number' && (n += i && i[3] || (w.cssNumber[s] ? '' : 'px')), h.clearCloneStyle || n !== '' || t.indexOf('background') !== 0 || (l[t] = 'inherit'), a && 'set' in a && void 0 === (n = a.set(e, n, r)) || (u ? l.setProperty(t, n) : l[t] = n));
      }
    },
    css(e, t, n, r) {
      let i; let o; let a; const
        s = G(t); return Xe.test(t) || (t = Je(s)), (a = w.cssHooks[t] || w.cssHooks[s]) && 'get' in a && (i = a.get(e, !0, n)), void 0 === i && (i = Fe(e, t, r)), i === 'normal' && t in Ve && (i = Ve[t]), n === '' || n ? (o = parseFloat(i), !0 === n || isFinite(o) ? o || 0 : i) : i;
    },
  }), w.each(['height', 'width'], (e, t) => {
    w.cssHooks[t] = {
      get(e, n, r) { if (n) return !ze.test(w.css(e, 'display')) || e.getClientRects().length && e.getBoundingClientRect().width ? et(e, t, r) : se(e, Ue, () => et(e, t, r)); },
      set(e, n, r) {
        let i; const o = $e(e);
        const a = w.css(e, 'boxSizing', !1, o) === 'border-box';
        let s = r && Ze(e, t, r, a, o); return a && h.scrollboxSize() === o.position && (s -= Math.ceil(e[`offset${t[0].toUpperCase()}${t.slice(1)}`] - parseFloat(o[t]) - Ze(e, t, 'border', !1, o) - 0.5)), s && (i = ie.exec(n)) && (i[3] || 'px') !== 'px' && (e.style[t] = n, n = w.css(e, t)), Ke(e, n, s);
      },
    };
  }), w.cssHooks.marginLeft = _e(h.reliableMarginLeft, (e, t) => { if (t) return `${parseFloat(Fe(e, 'marginLeft')) || e.getBoundingClientRect().left - se(e, { marginLeft: 0 }, () => e.getBoundingClientRect().left)}px`; }), w.each({ margin: '', padding: '', border: 'Width' }, (e, t) => { w.cssHooks[e + t] = { expand(n) { for (var r = 0, i = {}, o = typeof n === 'string' ? n.split(' ') : [n]; r < 4; r++) i[e + oe[r] + t] = o[r] || o[r - 2] || o[0]; return i; } }, e !== 'margin' && (w.cssHooks[e + t].set = Ke); }), w.fn.extend({
    css(e, t) {
      return z(this, (e, t, n) => {
        let r; let i; const o = {};
        let a = 0; if (Array.isArray(t)) { for (r = $e(e), i = t.length; a < i; a++) o[t[a]] = w.css(e, t[a], !1, r); return o; } return void 0 !== n ? w.style(e, t, n) : w.css(e, t);
      }, e, t, arguments.length > 1);
    },
  });

  function tt(e, t, n, r, i) { return new tt.prototype.init(e, t, n, r, i); }
  w.Tween = tt, tt.prototype = {
    constructor: tt,
    init(e, t, n, r, i, o) { this.elem = e, this.prop = n, this.easing = i || w.easing._default, this.options = t, this.start = this.now = this.cur(), this.end = r, this.unit = o || (w.cssNumber[n] ? '' : 'px'); },
    cur() { const e = tt.propHooks[this.prop]; return e && e.get ? e.get(this) : tt.propHooks._default.get(this); },
    run(e) {
      let t; const
        n = tt.propHooks[this.prop]; return this.options.duration ? this.pos = t = w.easing[this.easing](e, this.options.duration * e, 0, 1, this.options.duration) : this.pos = t = e, this.now = (this.end - this.start) * t + this.start, this.options.step && this.options.step.call(this.elem, this.now, this), n && n.set ? n.set(this) : tt.propHooks._default.set(this), this;
    },
  }, tt.prototype.init.prototype = tt.prototype, tt.propHooks = { _default: { get(e) { let t; return e.elem.nodeType !== 1 || e.elem[e.prop] != null && e.elem.style[e.prop] == null ? e.elem[e.prop] : (t = w.css(e.elem, e.prop, '')) && t !== 'auto' ? t : 0; }, set(e) { w.fx.step[e.prop] ? w.fx.step[e.prop](e) : e.elem.nodeType !== 1 || e.elem.style[w.cssProps[e.prop]] == null && !w.cssHooks[e.prop] ? e.elem[e.prop] = e.now : w.style(e.elem, e.prop, e.now + e.unit); } } }, tt.propHooks.scrollTop = tt.propHooks.scrollLeft = { set(e) { e.elem.nodeType && e.elem.parentNode && (e.elem[e.prop] = e.now); } }, w.easing = { linear(e) { return e; }, swing(e) { return 0.5 - Math.cos(e * Math.PI) / 2; }, _default: 'swing' }, w.fx = tt.prototype.init, w.fx.step = {}; let nt; let rt; const it = /^(?:toggle|show|hide)$/;
  const ot = /queueHooks$/;

  function at() { rt && (!1 === r.hidden && e.requestAnimationFrame ? e.requestAnimationFrame(at) : e.setTimeout(at, w.fx.interval), w.fx.tick()); }

  function st() { return e.setTimeout(() => { nt = void 0; }), nt = Date.now(); }

  function ut(e, t) {
    let n; let r = 0;
    const i = { height: e }; for (t = t ? 1 : 0; r < 4; r += 2 - t) i[`margin${n = oe[r]}`] = i[`padding${n}`] = e; return t && (i.opacity = i.width = e), i;
  }

  function lt(e, t, n) {
    for (var r, i = (pt.tweeners[t] || []).concat(pt.tweeners['*']), o = 0, a = i.length; o < a; o++) if (r = i[o].call(n, t, e)) return r;
  }

  function ct(e, t, n) {
    let r; let i; let o; let a; let s; let u; let l; let c; const f = 'width' in t || 'height' in t;
    const p = this;
    const d = {};
    const h = e.style;
    let g = e.nodeType && ae(e);
    let y = J.get(e, 'fxshow');
    n.queue || ((a = w._queueHooks(e, 'fx')).unqueued == null && (a.unqueued = 0, s = a.empty.fire, a.empty.fire = function () { a.unqueued || s(); }), a.unqueued++, p.always(() => { p.always(() => { a.unqueued--, w.queue(e, 'fx').length || a.empty.fire(); }); })); for (r in t) {
      if (i = t[r], it.test(i)) {
        if (delete t[r], o = o || i === 'toggle', i === (g ? 'hide' : 'show')) {
          if (i !== 'show' || !y || void 0 === y[r]) continue;
          g = !0;
        }
        d[r] = y && y[r] || w.style(e, r);
      }
    }
    if ((u = !w.isEmptyObject(t)) || !w.isEmptyObject(d)) { f && e.nodeType === 1 && (n.overflow = [h.overflow, h.overflowX, h.overflowY], (l = y && y.display) == null && (l = J.get(e, 'display')), (c = w.css(e, 'display')) === 'none' && (l ? c = l : (fe([e], !0), l = e.style.display || l, c = w.css(e, 'display'), fe([e]))), (c === 'inline' || c === 'inline-block' && l != null) && w.css(e, 'float') === 'none' && (u || (p.done(() => { h.display = l; }), l == null && (c = h.display, l = c === 'none' ? '' : c)), h.display = 'inline-block')), n.overflow && (h.overflow = 'hidden', p.always(() => { h.overflow = n.overflow[0], h.overflowX = n.overflow[1], h.overflowY = n.overflow[2]; })), u = !1; for (r in d) u || (y ? 'hidden' in y && (g = y.hidden) : y = J.access(e, 'fxshow', { display: l }), o && (y.hidden = !g), g && fe([e], !0), p.done(() => { g || fe([e]), J.remove(e, 'fxshow'); for (r in d) w.style(e, r, d[r]); })), u = lt(g ? y[r] : 0, r, p), r in y || (y[r] = u.start, g && (u.end = u.start, u.start = 0)); }
  }

  function ft(e, t) {
    let n; let r; let i; let o; let
      a; for (n in e) if (r = G(n), i = t[r], o = e[n], Array.isArray(o) && (i = o[1], o = e[n] = o[0]), n !== r && (e[r] = o, delete e[n]), (a = w.cssHooks[r]) && 'expand' in a) { o = a.expand(o), delete e[r]; for (n in o) n in e || (e[n] = o[n], t[n] = i); } else t[r] = i;
  }

  function pt(e, t, n) {
    let r; let i; let o = 0;
    const a = pt.prefilters.length;
    const s = w.Deferred().always(() => { delete u.elem; });
    var u = function () { if (i) return !1; for (var t = nt || st(), n = Math.max(0, l.startTime + l.duration - t), r = 1 - (n / l.duration || 0), o = 0, a = l.tweens.length; o < a; o++) l.tweens[o].run(r); return s.notifyWith(e, [l, r, n]), r < 1 && a ? n : (a || s.notifyWith(e, [l, 1, 0]), s.resolveWith(e, [l]), !1); };
    var l = s.promise({
      elem: e,
      props: w.extend({}, t),
      opts: w.extend(!0, { specialEasing: {}, easing: w.easing._default }, n),
      originalProperties: t,
      originalOptions: n,
      startTime: nt || st(),
      duration: n.duration,
      tweens: [],
      createTween(t, n) { const r = w.Tween(e, l.opts, t, n, l.opts.specialEasing[t] || l.opts.easing); return l.tweens.push(r), r; },
      stop(t) {
        let n = 0;
        const r = t ? l.tweens.length : 0; if (i) return this; for (i = !0; n < r; n++) l.tweens[n].run(1); return t ? (s.notifyWith(e, [l, 1, 0]), s.resolveWith(e, [l, t])) : s.rejectWith(e, [l, t]), this;
      },
    });
    const c = l.props; for (ft(c, l.opts.specialEasing); o < a; o++) if (r = pt.prefilters[o].call(l, e, c, l.opts)) return g(r.stop) && (w._queueHooks(l.elem, l.opts.queue).stop = r.stop.bind(r)), r;
    return w.map(c, lt, l), g(l.opts.start) && l.opts.start.call(e, l), l.progress(l.opts.progress).done(l.opts.done, l.opts.complete).fail(l.opts.fail).always(l.opts.always), w.fx.timer(w.extend(u, { elem: e, anim: l, queue: l.opts.queue })), l;
  }
  w.Animation = w.extend(pt, {
    tweeners: { '*': [function (e, t) { const n = this.createTween(e, t); return ue(n.elem, e, ie.exec(t), n), n; }] }, tweener(e, t) { g(e) ? (t = e, e = ['*']) : e = e.match(M); for (var n, r = 0, i = e.length; r < i; r++) n = e[r], pt.tweeners[n] = pt.tweeners[n] || [], pt.tweeners[n].unshift(t); }, prefilters: [ct], prefilter(e, t) { t ? pt.prefilters.unshift(e) : pt.prefilters.push(e); },
  }), w.speed = function (e, t, n) { const r = e && typeof e === 'object' ? w.extend({}, e) : { complete: n || !n && t || g(e) && e, duration: e, easing: n && t || t && !g(t) && t }; return w.fx.off ? r.duration = 0 : typeof r.duration !== 'number' && (r.duration in w.fx.speeds ? r.duration = w.fx.speeds[r.duration] : r.duration = w.fx.speeds._default), r.queue != null && !0 !== r.queue || (r.queue = 'fx'), r.old = r.complete, r.complete = function () { g(r.old) && r.old.call(this), r.queue && w.dequeue(this, r.queue); }, r; }, w.fn.extend({
    fadeTo(e, t, n, r) {
      return this.filter(ae).css('opacity', 0).show().end()
        .animate({ opacity: t }, e, n, r);
    },
    animate(e, t, n, r) {
      const i = w.isEmptyObject(e);
      const o = w.speed(t, n, r);
      const a = function () {
        const t = pt(this, w.extend({}, e), o);
        (i || J.get(this, 'finish')) && t.stop(!0);
      }; return a.finish = a, i || !1 === o.queue ? this.each(a) : this.queue(o.queue, a);
    },
    stop(e, t, n) {
      const r = function (e) {
        const t = e.stop;
        delete e.stop, t(n);
      }; return typeof e !== 'string' && (n = t, t = e, e = void 0), t && !1 !== e && this.queue(e || 'fx', []), this.each(function () {
        let t = !0;
        let i = e != null && `${e}queueHooks`;
        const o = w.timers;
        const a = J.get(this); if (i) a[i] && a[i].stop && r(a[i]);
        else for (i in a) a[i] && a[i].stop && ot.test(i) && r(a[i]); for (i = o.length; i--;) o[i].elem !== this || e != null && o[i].queue !== e || (o[i].anim.stop(n), t = !1, o.splice(i, 1)); !t && n || w.dequeue(this, e);
      });
    },
    finish(e) {
      return !1 !== e && (e = e || 'fx'), this.each(function () {
        let t; const n = J.get(this);
        const r = n[`${e}queue`];
        const i = n[`${e}queueHooks`];
        const o = w.timers;
        const a = r ? r.length : 0; for (n.finish = !0, w.queue(this, e, []), i && i.stop && i.stop.call(this, !0), t = o.length; t--;) o[t].elem === this && o[t].queue === e && (o[t].anim.stop(!0), o.splice(t, 1)); for (t = 0; t < a; t++) r[t] && r[t].finish && r[t].finish.call(this);
        delete n.finish;
      });
    },
  }), w.each(['toggle', 'show', 'hide'], (e, t) => {
    const n = w.fn[t];
    w.fn[t] = function (e, r, i) { return e == null || typeof e === 'boolean' ? n.apply(this, arguments) : this.animate(ut(t, !0), e, r, i); };
  }), w.each({
    slideDown: ut('show'), slideUp: ut('hide'), slideToggle: ut('toggle'), fadeIn: { opacity: 'show' }, fadeOut: { opacity: 'hide' }, fadeToggle: { opacity: 'toggle' },
  }, (e, t) => { w.fn[e] = function (e, n, r) { return this.animate(t, e, n, r); }; }), w.timers = [], w.fx.tick = function () {
    let e; let t = 0;
    const n = w.timers; for (nt = Date.now(); t < n.length; t++)(e = n[t])() || n[t] !== e || n.splice(t--, 1);
    n.length || w.fx.stop(), nt = void 0;
  }, w.fx.timer = function (e) { w.timers.push(e), w.fx.start(); }, w.fx.interval = 13, w.fx.start = function () { rt || (rt = !0, at()); }, w.fx.stop = function () { rt = null; }, w.fx.speeds = { slow: 600, fast: 200, _default: 400 }, w.fn.delay = function (t, n) {
    return t = w.fx ? w.fx.speeds[t] || t : t, n = n || 'fx', this.queue(n, (n, r) => {
      const i = e.setTimeout(n, t);
      r.stop = function () { e.clearTimeout(i); };
    });
  },
  (function () {
    let e = r.createElement('input');
    const t = r.createElement('select').appendChild(r.createElement('option'));
    e.type = 'checkbox', h.checkOn = e.value !== '', h.optSelected = t.selected, (e = r.createElement('input')).value = 't', e.type = 'radio', h.radioValue = e.value === 't';
  }()); let dt; const
    ht = w.expr.attrHandle;
  w.fn.extend({ attr(e, t) { return z(this, w.attr, e, t, arguments.length > 1); }, removeAttr(e) { return this.each(function () { w.removeAttr(this, e); }); } }), w.extend({
    attr(e, t, n) {
      let r; let i; const
        o = e.nodeType; if (o !== 3 && o !== 8 && o !== 2) return typeof e.getAttribute === 'undefined' ? w.prop(e, t, n) : (o === 1 && w.isXMLDoc(e) || (i = w.attrHooks[t.toLowerCase()] || (w.expr.match.bool.test(t) ? dt : void 0)), void 0 !== n ? n === null ? void w.removeAttr(e, t) : i && 'set' in i && void 0 !== (r = i.set(e, n, t)) ? r : (e.setAttribute(t, `${n}`), n) : i && 'get' in i && (r = i.get(e, t)) !== null ? r : (r = w.find.attr(e, t)) == null ? void 0 : r);
    },
    attrHooks: { type: { set(e, t) { if (!h.radioValue && t === 'radio' && N(e, 'input')) { const n = e.value; return e.setAttribute('type', t), n && (e.value = n), t; } } } },
    removeAttr(e, t) {
      let n; let r = 0;
      const i = t && t.match(M); if (i && e.nodeType === 1) while (n = i[r++]) e.removeAttribute(n);
    },
  }), dt = { set(e, t, n) { return !1 === t ? w.removeAttr(e, n) : e.setAttribute(n, n), n; } }, w.each(w.expr.match.bool.source.match(/\w+/g), (e, t) => {
    const n = ht[t] || w.find.attr;
    ht[t] = function (e, t, r) {
      let i; let o; const
        a = t.toLowerCase(); return r || (o = ht[a], ht[a] = i, i = n(e, t, r) != null ? a : null, ht[a] = o), i;
    };
  }); const gt = /^(?:input|select|textarea|button)$/i;
  const yt = /^(?:a|area)$/i;
  w.fn.extend({ prop(e, t) { return z(this, w.prop, e, t, arguments.length > 1); }, removeProp(e) { return this.each(function () { delete this[w.propFix[e] || e]; }); } }), w.extend({
    prop(e, t, n) {
      let r; let i; const
        o = e.nodeType; if (o !== 3 && o !== 8 && o !== 2) return o === 1 && w.isXMLDoc(e) || (t = w.propFix[t] || t, i = w.propHooks[t]), void 0 !== n ? i && 'set' in i && void 0 !== (r = i.set(e, n, t)) ? r : e[t] = n : i && 'get' in i && (r = i.get(e, t)) !== null ? r : e[t];
    },
    propHooks: { tabIndex: { get(e) { const t = w.find.attr(e, 'tabindex'); return t ? parseInt(t, 10) : gt.test(e.nodeName) || yt.test(e.nodeName) && e.href ? 0 : -1; } } },
    propFix: { for: 'htmlFor', class: 'className' },
  }), h.optSelected || (w.propHooks.selected = {
    get(e) { const t = e.parentNode; return t && t.parentNode && t.parentNode.selectedIndex, null; },
    set(e) {
      const t = e.parentNode;
      t && (t.selectedIndex, t.parentNode && t.parentNode.selectedIndex);
    },
  }), w.each(['tabIndex', 'readOnly', 'maxLength', 'cellSpacing', 'cellPadding', 'rowSpan', 'colSpan', 'useMap', 'frameBorder', 'contentEditable'], function () { w.propFix[this.toLowerCase()] = this; });

  function vt(e) { return (e.match(M) || []).join(' '); }

  function mt(e) { return e.getAttribute && e.getAttribute('class') || ''; }

  function xt(e) { return Array.isArray(e) ? e : typeof e === 'string' ? e.match(M) || [] : []; }
  w.fn.extend({
    addClass(e) {
      let t; let n; let r; let i; let o; let a; let s; let
        u = 0; if (g(e)) return this.each(function (t) { w(this).addClass(e.call(this, t, mt(this))); }); if ((t = xt(e)).length) {
        while (n = this[u++]) {
          if (i = mt(n), r = n.nodeType === 1 && ` ${vt(i)} `) {
            a = 0; while (o = t[a++]) r.indexOf(` ${o} `) < 0 && (r += `${o} `);
            i !== (s = vt(r)) && n.setAttribute('class', s);
          }
        }
      }
      return this;
    },
    removeClass(e) {
      let t; let n; let r; let i; let o; let a; let s; let
        u = 0; if (g(e)) return this.each(function (t) { w(this).removeClass(e.call(this, t, mt(this))); }); if (!arguments.length) return this.attr('class', ''); if ((t = xt(e)).length) {
        while (n = this[u++]) {
          if (i = mt(n), r = n.nodeType === 1 && ` ${vt(i)} `) {
            a = 0; while (o = t[a++]) while (r.indexOf(` ${o} `) > -1) r = r.replace(` ${o} `, ' ');
            i !== (s = vt(r)) && n.setAttribute('class', s);
          }
        }
      }
      return this;
    },
    toggleClass(e, t) {
      const n = typeof e;
      const r = n === 'string' || Array.isArray(e); return typeof t === 'boolean' && r ? t ? this.addClass(e) : this.removeClass(e) : g(e) ? this.each(function (n) { w(this).toggleClass(e.call(this, n, mt(this), t), t); }) : this.each(function () {
        let t; let i; let o; let
          a; if (r) { i = 0, o = w(this), a = xt(e); while (t = a[i++]) o.hasClass(t) ? o.removeClass(t) : o.addClass(t); } else void 0 !== e && n !== 'boolean' || ((t = mt(this)) && J.set(this, '__className__', t), this.setAttribute && this.setAttribute('class', t || !1 === e ? '' : J.get(this, '__className__') || ''));
      });
    },
    hasClass(e) {
      let t; let n; let
        r = 0;
      t = ` ${e} `; while (n = this[r++]) if (n.nodeType === 1 && (` ${vt(mt(n))} `).indexOf(t) > -1) return !0;
      return !1;
    },
  }); const bt = /\r/g;
  w.fn.extend({
    val(e) {
      let t; let n; let r; const
        i = this[0]; { if (arguments.length) {
        return r = g(e), this.each(function (n) {
          let i;
          this.nodeType === 1 && ((i = r ? e.call(this, n, w(this).val()) : e) == null ? i = '' : typeof i === 'number' ? i += '' : Array.isArray(i) && (i = w.map(i, (e) => (e == null ? '' : `${e}`))), (t = w.valHooks[this.type] || w.valHooks[this.nodeName.toLowerCase()]) && 'set' in t && void 0 !== t.set(this, i, 'value') || (this.value = i));
        });
      } if (i) return (t = w.valHooks[i.type] || w.valHooks[i.nodeName.toLowerCase()]) && 'get' in t && void 0 !== (n = t.get(i, 'value')) ? n : typeof (n = i.value) === 'string' ? n.replace(bt, '') : n == null ? '' : n; }
    },
  }), w.extend({
    valHooks: {
      option: { get(e) { const t = w.find.attr(e, 'value'); return t != null ? t : vt(w.text(e)); } },
      select: {
        get(e) {
          let t; let n; let r; const i = e.options;
          const o = e.selectedIndex;
          const a = e.type === 'select-one';
          const s = a ? null : [];
          const u = a ? o + 1 : i.length; for (r = o < 0 ? u : a ? o : 0; r < u; r++) {
            if (((n = i[r]).selected || r === o) && !n.disabled && (!n.parentNode.disabled || !N(n.parentNode, 'optgroup'))) {
              if (t = w(n).val(), a) return t;
              s.push(t);
            }
          }
          return s;
        },
        set(e, t) {
          let n; let r; const i = e.options;
          const o = w.makeArray(t);
          let a = i.length; while (a--)((r = i[a]).selected = w.inArray(w.valHooks.option.get(r), o) > -1) && (n = !0); return n || (e.selectedIndex = -1), o;
        },
      },
    },
  }), w.each(['radio', 'checkbox'], function () { w.valHooks[this] = { set(e, t) { if (Array.isArray(t)) return e.checked = w.inArray(w(e).val(), t) > -1; } }, h.checkOn || (w.valHooks[this].get = function (e) { return e.getAttribute('value') === null ? 'on' : e.value; }); }), h.focusin = 'onfocusin' in e; const wt = /^(?:focusinfocus|focusoutblur)$/;
  const Tt = function (e) { e.stopPropagation(); };
  w.extend(w.event, {
    trigger(t, n, i, o) {
      let a; let s; let u; let l; let c; let p; let d; let h; const v = [i || r];
      let m = f.call(t, 'type') ? t.type : t;
      let x = f.call(t, 'namespace') ? t.namespace.split('.') : []; if (s = h = u = i = i || r, i.nodeType !== 3 && i.nodeType !== 8 && !wt.test(m + w.event.triggered) && (m.indexOf('.') > -1 && (m = (x = m.split('.')).shift(), x.sort()), c = m.indexOf(':') < 0 && `on${m}`, t = t[w.expando] ? t : new w.Event(m, typeof t === 'object' && t), t.isTrigger = o ? 2 : 3, t.namespace = x.join('.'), t.rnamespace = t.namespace ? new RegExp(`(^|\\.)${x.join('\\.(?:.*\\.|)')}(\\.|$)`) : null, t.result = void 0, t.target || (t.target = i), n = n == null ? [t] : w.makeArray(n, [t]), d = w.event.special[m] || {}, o || !d.trigger || !1 !== d.trigger.apply(i, n))) {
        if (!o && !d.noBubble && !y(i)) {
          for (l = d.delegateType || m, wt.test(l + m) || (s = s.parentNode); s; s = s.parentNode) v.push(s), u = s;
          u === (i.ownerDocument || r) && v.push(u.defaultView || u.parentWindow || e);
        }
        a = 0; while ((s = v[a++]) && !t.isPropagationStopped()) h = s, t.type = a > 1 ? l : d.bindType || m, (p = (J.get(s, 'events') || {})[t.type] && J.get(s, 'handle')) && p.apply(s, n), (p = c && s[c]) && p.apply && Y(s) && (t.result = p.apply(s, n), !1 === t.result && t.preventDefault()); return t.type = m, o || t.isDefaultPrevented() || d._default && !1 !== d._default.apply(v.pop(), n) || !Y(i) || c && g(i[m]) && !y(i) && ((u = i[c]) && (i[c] = null), w.event.triggered = m, t.isPropagationStopped() && h.addEventListener(m, Tt), i[m](), t.isPropagationStopped() && h.removeEventListener(m, Tt), w.event.triggered = void 0, u && (i[c] = u)), t.result;
      }
    },
    simulate(e, t, n) {
      const r = w.extend(new w.Event(), n, { type: e, isSimulated: !0 });
      w.event.trigger(r, null, t);
    },
  }), w.fn.extend({ trigger(e, t) { return this.each(function () { w.event.trigger(e, t, this); }); }, triggerHandler(e, t) { const n = this[0]; if (n) return w.event.trigger(e, t, n, !0); } }), h.focusin || w.each({ focus: 'focusin', blur: 'focusout' }, (e, t) => {
    const n = function (e) { w.event.simulate(t, e.target, w.event.fix(e)); };
    w.event.special[t] = {
      setup() {
        const r = this.ownerDocument || this;
        const i = J.access(r, t);
        i || r.addEventListener(e, n, !0), J.access(r, t, (i || 0) + 1);
      },
      teardown() {
        const r = this.ownerDocument || this;
        const i = J.access(r, t) - 1;
        i ? J.access(r, t, i) : (r.removeEventListener(e, n, !0), J.remove(r, t));
      },
    };
  }); const Ct = e.location;
  let Et = Date.now();
  const kt = /\?/;
  w.parseXML = function (t) { let n; if (!t || typeof t !== 'string') return null; try { n = (new e.DOMParser()).parseFromString(t, 'text/xml'); } catch (e) { n = void 0; } return n && !n.getElementsByTagName('parsererror').length || w.error(`Invalid XML: ${t}`), n; }; const St = /\[\]$/;
  const Dt = /\r?\n/g;
  const Nt = /^(?:submit|button|image|reset|file)$/i;
  const At = /^(?:input|select|textarea|keygen)/i;

  function jt(e, t, n, r) {
    let i; if (Array.isArray(t)) w.each(t, (t, i) => { n || St.test(e) ? r(e, i) : jt(`${e}[${typeof i === 'object' && i != null ? t : ''}]`, i, n, r); });
    else if (n || x(t) !== 'object') r(e, t);
    else for (i in t) jt(`${e}[${i}]`, t[i], n, r);
  }
  w.param = function (e, t) {
    let n; const r = [];
    const i = function (e, t) {
      const n = g(t) ? t() : t;
      r[r.length] = `${encodeURIComponent(e)}=${encodeURIComponent(n == null ? '' : n)}`;
    }; if (Array.isArray(e) || e.jquery && !w.isPlainObject(e)) w.each(e, function () { i(this.name, this.value); });
    else for (n in e) jt(n, e[n], t, i); return r.join('&');
  }, w.fn.extend({ serialize() { return w.param(this.serializeArray()); }, serializeArray() { return this.map(function () { const e = w.prop(this, 'elements'); return e ? w.makeArray(e) : this; }).filter(function () { const e = this.type; return this.name && !w(this).is(':disabled') && At.test(this.nodeName) && !Nt.test(e) && (this.checked || !pe.test(e)); }).map(function (e, t) { const n = w(this).val(); return n == null ? null : Array.isArray(n) ? w.map(n, (e) => ({ name: t.name, value: e.replace(Dt, '\r\n') })) : { name: t.name, value: n.replace(Dt, '\r\n') }; }).get(); } }); const qt = /%20/g;
  const Lt = /#.*$/;
  const Ht = /([?&])_=[^&]*/;
  const Ot = /^(.*?):[ \t]*([^\r\n]*)$/gm;
  const Pt = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/;
  const Mt = /^(?:GET|HEAD)$/;
  const Rt = /^\/\//;
  const It = {};
  const Wt = {};
  const $t = '*/'.concat('*');
  const Bt = r.createElement('a');
  Bt.href = Ct.href;

  function Ft(e) {
    return function (t, n) {
      typeof t !== 'string' && (n = t, t = '*'); let r; let i = 0;
      const o = t.toLowerCase().match(M) || []; if (g(n)) while (r = o[i++]) r[0] === '+' ? (r = r.slice(1) || '*', (e[r] = e[r] || []).unshift(n)) : (e[r] = e[r] || []).push(n);
    };
  }

  function _t(e, t, n, r) {
    const i = {};
    const o = e === Wt;

    function a(s) { let u; return i[s] = !0, w.each(e[s] || [], (e, s) => { const l = s(t, n, r); return typeof l !== 'string' || o || i[l] ? o ? !(u = l) : void 0 : (t.dataTypes.unshift(l), a(l), !1); }), u; } return a(t.dataTypes[0]) || !i['*'] && a('*');
  }

  function zt(e, t) {
    let n; let r; const
      i = w.ajaxSettings.flatOptions || {}; for (n in t) void 0 !== t[n] && ((i[n] ? e : r || (r = {}))[n] = t[n]); return r && w.extend(!0, e, r), e;
  }

  function Xt(e, t, n) {
    let r; let i; let o; let a; const s = e.contents;
    const u = e.dataTypes; while (u[0] === '*') u.shift(), void 0 === r && (r = e.mimeType || t.getResponseHeader('Content-Type')); if (r) for (i in s) if (s[i] && s[i].test(r)) { u.unshift(i); break; }
    if (u[0] in n) o = u[0];
    else {
      for (i in n) {
        if (!u[0] || e.converters[`${i} ${u[0]}`]) { o = i; break; }
        a || (a = i);
      }
      o = o || a;
    } if (o) return o !== u[0] && u.unshift(o), n[o];
  }

  function Ut(e, t, n, r) {
    let i; let o; let a; let s; let u; const l = {};
    const c = e.dataTypes.slice(); if (c[1]) for (a in e.converters) l[a.toLowerCase()] = e.converters[a];
    o = c.shift(); while (o) {
      if (e.responseFields[o] && (n[e.responseFields[o]] = t), !u && r && e.dataFilter && (t = e.dataFilter(t, e.dataType)), u = o, o = c.shift()) {
        if (o === '*') o = u;
        else if (u !== '*' && u !== o) {
          if (!(a = l[`${u} ${o}`] || l[`* ${o}`])) for (i in l) if ((s = i.split(' '))[1] === o && (a = l[`${u} ${s[0]}`] || l[`* ${s[0]}`])) { !0 === a ? a = l[i] : !0 !== l[i] && (o = s[0], c.unshift(s[1])); break; }
          if (!0 !== a) {
            if (a && e.throws) t = a(t);
            else try { t = a(t); } catch (e) { return { state: 'parsererror', error: a ? e : `No conversion from ${u} to ${o}` }; }
          }
        }
      }
    } return { state: 'success', data: t };
  }
  w.extend({
    active: 0,
    lastModified: {},
    etag: {},
    ajaxSettings: {
      url: Ct.href,
      type: 'GET',
      isLocal: Pt.test(Ct.protocol),
      global: !0,
      processData: !0,
      async: !0,
      contentType: 'application/x-www-form-urlencoded; charset=UTF-8',
      accepts: {
        '*': $t, text: 'text/plain', html: 'text/html', xml: 'application/xml, text/xml', json: 'application/json, text/javascript',
      },
      contents: { xml: /\bxml\b/, html: /\bhtml/, json: /\bjson\b/ },
      responseFields: { xml: 'responseXML', text: 'responseText', json: 'responseJSON' },
      converters: {
        '* text': String, 'text html': !0, 'text json': JSON.parse, 'text xml': w.parseXML,
      },
      flatOptions: { url: !0, context: !0 },
    },
    ajaxSetup(e, t) { return t ? zt(zt(e, w.ajaxSettings), t) : zt(w.ajaxSettings, e); },
    ajaxPrefilter: Ft(It),
    ajaxTransport: Ft(Wt),
    ajax(t, n) {
      typeof t === 'object' && (n = t, t = void 0), n = n || {}; let i; let o; let a; let s; let u; let l; let c; let f; let p; let d; const h = w.ajaxSetup({}, n);
      const g = h.context || h;
      const y = h.context && (g.nodeType || g.jquery) ? w(g) : w.event;
      const v = w.Deferred();
      const m = w.Callbacks('once memory');
      let x = h.statusCode || {};
      const b = {};
      const T = {};
      let C = 'canceled';
      var E = {
        readyState: 0,
        getResponseHeader(e) {
          let t; if (c) {
            if (!s) { s = {}; while (t = Ot.exec(a)) s[t[1].toLowerCase()] = t[2]; }
            t = s[e.toLowerCase()];
          } return t == null ? null : t;
        },
        getAllResponseHeaders() { return c ? a : null; },
        setRequestHeader(e, t) { return c == null && (e = T[e.toLowerCase()] = T[e.toLowerCase()] || e, b[e] = t), this; },
        overrideMimeType(e) { return c == null && (h.mimeType = e), this; },
        statusCode(e) {
          let t; if (e) {
            if (c) E.always(e[E.status]);
            else for (t in e) x[t] = [x[t], e[t]];
          }
          return this;
        },
        abort(e) { const t = e || C; return i && i.abort(t), k(0, t), this; },
      }; if (v.promise(E), h.url = (`${t || h.url || Ct.href}`).replace(Rt, `${Ct.protocol}//`), h.type = n.method || n.type || h.method || h.type, h.dataTypes = (h.dataType || '*').toLowerCase().match(M) || [''], h.crossDomain == null) { l = r.createElement('a'); try { l.href = h.url, l.href = l.href, h.crossDomain = `${Bt.protocol}//${Bt.host}` != `${l.protocol}//${l.host}`; } catch (e) { h.crossDomain = !0; } } if (h.data && h.processData && typeof h.data !== 'string' && (h.data = w.param(h.data, h.traditional)), _t(It, h, n, E), c) return E;
      (f = w.event && h.global) && w.active++ == 0 && w.event.trigger('ajaxStart'), h.type = h.type.toUpperCase(), h.hasContent = !Mt.test(h.type), o = h.url.replace(Lt, ''), h.hasContent ? h.data && h.processData && (h.contentType || '').indexOf('application/x-www-form-urlencoded') === 0 && (h.data = h.data.replace(qt, '+')) : (d = h.url.slice(o.length), h.data && (h.processData || typeof h.data === 'string') && (o += (kt.test(o) ? '&' : '?') + h.data, delete h.data), !1 === h.cache && (o = o.replace(Ht, '$1'), d = `${kt.test(o) ? '&' : '?'}_=${Et++}${d}`), h.url = o + d), h.ifModified && (w.lastModified[o] && E.setRequestHeader('If-Modified-Since', w.lastModified[o]), w.etag[o] && E.setRequestHeader('If-None-Match', w.etag[o])), (h.data && h.hasContent && !1 !== h.contentType || n.contentType) && E.setRequestHeader('Content-Type', h.contentType), E.setRequestHeader('Accept', h.dataTypes[0] && h.accepts[h.dataTypes[0]] ? h.accepts[h.dataTypes[0]] + (h.dataTypes[0] !== '*' ? `, ${$t}; q=0.01` : '') : h.accepts['*']); for (p in h.headers) E.setRequestHeader(p, h.headers[p]); if (h.beforeSend && (!1 === h.beforeSend.call(g, E, h) || c)) return E.abort(); if (C = 'abort', m.add(h.complete), E.done(h.success), E.fail(h.error), i = _t(Wt, h, n, E)) {
        if (E.readyState = 1, f && y.trigger('ajaxSend', [E, h]), c) return E;
        h.async && h.timeout > 0 && (u = e.setTimeout(() => { E.abort('timeout'); }, h.timeout)); try { c = !1, i.send(b, k); } catch (e) {
          if (c) throw e;
          k(-1, e);
        }
      } else k(-1, 'No Transport');

      function k(t, n, r, s) {
        let l; let p; let d; let b; let T; let
          C = n;
        c || (c = !0, u && e.clearTimeout(u), i = void 0, a = s || '', E.readyState = t > 0 ? 4 : 0, l = t >= 200 && t < 300 || t === 304, r && (b = Xt(h, E, r)), b = Ut(h, b, E, l), l ? (h.ifModified && ((T = E.getResponseHeader('Last-Modified')) && (w.lastModified[o] = T), (T = E.getResponseHeader('etag')) && (w.etag[o] = T)), t === 204 || h.type === 'HEAD' ? C = 'nocontent' : t === 304 ? C = 'notmodified' : (C = b.state, p = b.data, l = !(d = b.error))) : (d = C, !t && C || (C = 'error', t < 0 && (t = 0))), E.status = t, E.statusText = `${n || C}`, l ? v.resolveWith(g, [p, C, E]) : v.rejectWith(g, [E, C, d]), E.statusCode(x), x = void 0, f && y.trigger(l ? 'ajaxSuccess' : 'ajaxError', [E, h, l ? p : d]), m.fireWith(g, [E, C]), f && (y.trigger('ajaxComplete', [E, h]), --w.active || w.event.trigger('ajaxStop')));
      } return E;
    },
    getJSON(e, t, n) { return w.get(e, t, n, 'json'); },
    getScript(e, t) { return w.get(e, void 0, t, 'script'); },
  }), w.each(['get', 'post'], (e, t) => {
    w[t] = function (e, n, r, i) {
      return g(n) && (i = i || r, r = n, n = void 0), w.ajax(w.extend({
        url: e, type: t, dataType: i, data: n, success: r,
      }, w.isPlainObject(e) && e));
    };
  }), w._evalUrl = function (e) {
    return w.ajax({
      url: e, type: 'GET', dataType: 'script', cache: !0, async: !1, global: !1, throws: !0,
    });
  }, w.fn.extend({
    wrapAll(e) { let t; return this[0] && (g(e) && (e = e.call(this[0])), t = w(e, this[0].ownerDocument).eq(0).clone(!0), this[0].parentNode && t.insertBefore(this[0]), t.map(function () { let e = this; while (e.firstElementChild) e = e.firstElementChild; return e; }).append(this)), this; },
    wrapInner(e) {
      return g(e) ? this.each(function (t) { w(this).wrapInner(e.call(this, t)); }) : this.each(function () {
        const t = w(this);
        const n = t.contents();
        n.length ? n.wrapAll(e) : t.append(e);
      });
    },
    wrap(e) { const t = g(e); return this.each(function (n) { w(this).wrapAll(t ? e.call(this, n) : e); }); },
    unwrap(e) { return this.parent(e).not('body').each(function () { w(this).replaceWith(this.childNodes); }), this; },
  }), w.expr.pseudos.hidden = function (e) { return !w.expr.pseudos.visible(e); }, w.expr.pseudos.visible = function (e) { return !!(e.offsetWidth || e.offsetHeight || e.getClientRects().length); }, w.ajaxSettings.xhr = function () { try { return new e.XMLHttpRequest(); } catch (e) {} }; const Vt = { 0: 200, 1223: 204 };
  let Gt = w.ajaxSettings.xhr();
  h.cors = !!Gt && 'withCredentials' in Gt, h.ajax = Gt = !!Gt, w.ajaxTransport((t) => {
    let n; let
      r; if (h.cors || Gt && !t.crossDomain) {
      return {
        send(i, o) {
          let a; const
            s = t.xhr(); if (s.open(t.type, t.url, t.async, t.username, t.password), t.xhrFields) for (a in t.xhrFields) s[a] = t.xhrFields[a];
          t.mimeType && s.overrideMimeType && s.overrideMimeType(t.mimeType), t.crossDomain || i['X-Requested-With'] || (i['X-Requested-With'] = 'XMLHttpRequest'); for (a in i) s.setRequestHeader(a, i[a]);
          n = function (e) { return function () { n && (n = r = s.onload = s.onerror = s.onabort = s.ontimeout = s.onreadystatechange = null, e === 'abort' ? s.abort() : e === 'error' ? typeof s.status !== 'number' ? o(0, 'error') : o(s.status, s.statusText) : o(Vt[s.status] || s.status, s.statusText, (s.responseType || 'text') !== 'text' || typeof s.responseText !== 'string' ? { binary: s.response } : { text: s.responseText }, s.getAllResponseHeaders())); }; }, s.onload = n(), r = s.onerror = s.ontimeout = n('error'), void 0 !== s.onabort ? s.onabort = r : s.onreadystatechange = function () { s.readyState === 4 && e.setTimeout(() => { n && r(); }); }, n = n('abort'); try { s.send(t.hasContent && t.data || null); } catch (e) { if (n) throw e; }
        },
        abort() { n && n(); },
      };
    }
  }), w.ajaxPrefilter((e) => { e.crossDomain && (e.contents.script = !1); }), w.ajaxSetup({ accepts: { script: 'text/javascript, application/javascript, application/ecmascript, application/x-ecmascript' }, contents: { script: /\b(?:java|ecma)script\b/ }, converters: { 'text script': function (e) { return w.globalEval(e), e; } } }), w.ajaxPrefilter('script', (e) => { void 0 === e.cache && (e.cache = !1), e.crossDomain && (e.type = 'GET'); }), w.ajaxTransport('script', (e) => {
    if (e.crossDomain) {
      let t; let
        n; return { send(i, o) { t = w('<script>').prop({ charset: e.scriptCharset, src: e.url }).on('load error', n = function (e) { t.remove(), n = null, e && o(e.type === 'error' ? 404 : 200, e.type); }), r.head.appendChild(t[0]); }, abort() { n && n(); } };
    }
  }); const Yt = [];
  const Qt = /(=)\?(?=&|$)|\?\?/;
  w.ajaxSetup({ jsonp: 'callback', jsonpCallback() { const e = Yt.pop() || `${w.expando}_${Et++}`; return this[e] = !0, e; } }), w.ajaxPrefilter('json jsonp', (t, n, r) => {
    let i; let o; let a; const
      s = !1 !== t.jsonp && (Qt.test(t.url) ? 'url' : typeof t.data === 'string' && (t.contentType || '').indexOf('application/x-www-form-urlencoded') === 0 && Qt.test(t.data) && 'data'); if (s || t.dataTypes[0] === 'jsonp') return i = t.jsonpCallback = g(t.jsonpCallback) ? t.jsonpCallback() : t.jsonpCallback, s ? t[s] = t[s].replace(Qt, `$1${i}`) : !1 !== t.jsonp && (t.url += `${(kt.test(t.url) ? '&' : '?') + t.jsonp}=${i}`), t.converters['script json'] = function () { return a || w.error(`${i} was not called`), a[0]; }, t.dataTypes[0] = 'json', o = e[i], e[i] = function () { a = arguments; }, r.always(() => { void 0 === o ? w(e).removeProp(i) : e[i] = o, t[i] && (t.jsonpCallback = n.jsonpCallback, Yt.push(i)), a && g(o) && o(a[0]), a = o = void 0; }), 'script';
  }), h.createHTMLDocument = (function () { const e = r.implementation.createHTMLDocument('').body; return e.innerHTML = '<form></form><form></form>', e.childNodes.length === 2; }()), w.parseHTML = function (e, t, n) {
    if (typeof e !== 'string') return []; typeof t === 'boolean' && (n = t, t = !1); let i; let o; let
      a; return t || (h.createHTMLDocument ? ((i = (t = r.implementation.createHTMLDocument('')).createElement('base')).href = r.location.href, t.head.appendChild(i)) : t = r), o = A.exec(e), a = !n && [], o ? [t.createElement(o[1])] : (o = xe([e], t, a), a && a.length && w(a).remove(), w.merge([], o.childNodes));
  }, w.fn.load = function (e, t, n) {
    let r; let i; let o; const a = this;
    const s = e.indexOf(' '); return s > -1 && (r = vt(e.slice(s)), e = e.slice(0, s)), g(t) ? (n = t, t = void 0) : t && typeof t === 'object' && (i = 'POST'), a.length > 0 && w.ajax({
      url: e, type: i || 'GET', dataType: 'html', data: t,
    }).done(function (e) { o = arguments, a.html(r ? w('<div>').append(w.parseHTML(e)).find(r) : e); }).always(n && ((e, t) => { a.each(function () { n.apply(this, o || [e.responseText, t, e]); }); })), this;
  }, w.each(['ajaxStart', 'ajaxStop', 'ajaxComplete', 'ajaxError', 'ajaxSuccess', 'ajaxSend'], (e, t) => { w.fn[t] = function (e) { return this.on(t, e); }; }), w.expr.pseudos.animated = function (e) { return w.grep(w.timers, (t) => e === t.elem).length; }, w.offset = {
    setOffset(e, t, n) {
      let r; let i; let o; let a; let s; let u; let l; const c = w.css(e, 'position');
      const f = w(e);
      const p = {}; c === 'static' && (e.style.position = 'relative'), s = f.offset(), o = w.css(e, 'top'), u = w.css(e, 'left'), (l = (c === 'absolute' || c === 'fixed') && (o + u).indexOf('auto') > -1) ? (a = (r = f.position()).top, i = r.left) : (a = parseFloat(o) || 0, i = parseFloat(u) || 0), g(t) && (t = t.call(e, n, w.extend({}, s))), t.top != null && (p.top = t.top - s.top + a), t.left != null && (p.left = t.left - s.left + i), 'using' in t ? t.using.call(e, p) : f.css(p);
    },
  }, w.fn.extend({
    offset(e) {
      if (arguments.length) return void 0 === e ? this : this.each(function (t) { w.offset.setOffset(this, e, t); }); let t; let n; const
        r = this[0]; if (r) return r.getClientRects().length ? (t = r.getBoundingClientRect(), n = r.ownerDocument.defaultView, { top: t.top + n.pageYOffset, left: t.left + n.pageXOffset }) : { top: 0, left: 0 };
    },
    position() {
      if (this[0]) {
        let e; let t; let n; const r = this[0];
        let i = { top: 0, left: 0 }; if (w.css(r, 'position') === 'fixed') t = r.getBoundingClientRect();
        else {
          t = this.offset(), n = r.ownerDocument, e = r.offsetParent || n.documentElement; while (e && (e === n.body || e === n.documentElement) && w.css(e, 'position') === 'static') e = e.parentNode;
          e && e !== r && e.nodeType === 1 && ((i = w(e).offset()).top += w.css(e, 'borderTopWidth', !0), i.left += w.css(e, 'borderLeftWidth', !0));
        } return { top: t.top - i.top - w.css(r, 'marginTop', !0), left: t.left - i.left - w.css(r, 'marginLeft', !0) };
      }
    },
    offsetParent() { return this.map(function () { let e = this.offsetParent; while (e && w.css(e, 'position') === 'static') e = e.offsetParent; return e || be; }); },
  }), w.each({ scrollLeft: 'pageXOffset', scrollTop: 'pageYOffset' }, (e, t) => {
    const n = t === 'pageYOffset';
    w.fn[e] = function (r) {
      return z(this, (e, r, i) => {
        let o; if (y(e) ? o = e : e.nodeType === 9 && (o = e.defaultView), void 0 === i) return o ? o[t] : e[r];
        o ? o.scrollTo(n ? o.pageXOffset : i, n ? i : o.pageYOffset) : e[r] = i;
      }, e, r, arguments.length);
    };
  }), w.each(['top', 'left'], (e, t) => { w.cssHooks[t] = _e(h.pixelPosition, (e, n) => { if (n) return n = Fe(e, t), We.test(n) ? `${w(e).position()[t]}px` : n; }); }), w.each({ Height: 'height', Width: 'width' }, (e, t) => {
    w.each({ padding: `inner${e}`, content: t, '': `outer${e}` }, (n, r) => {
      w.fn[r] = function (i, o) {
        const a = arguments.length && (n || typeof i !== 'boolean');
        const s = n || (!0 === i || !0 === o ? 'margin' : 'border'); return z(this, (t, n, i) => { let o; return y(t) ? r.indexOf('outer') === 0 ? t[`inner${e}`] : t.document.documentElement[`client${e}`] : t.nodeType === 9 ? (o = t.documentElement, Math.max(t.body[`scroll${e}`], o[`scroll${e}`], t.body[`offset${e}`], o[`offset${e}`], o[`client${e}`])) : void 0 === i ? w.css(t, n, s) : w.style(t, n, i, s); }, t, a ? i : void 0, a);
      };
    });
  }), w.each('blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu'.split(' '), (e, t) => { w.fn[t] = function (e, n) { return arguments.length > 0 ? this.on(t, null, e, n) : this.trigger(t); }; }), w.fn.extend({ hover(e, t) { return this.mouseenter(e).mouseleave(t || e); } }), w.fn.extend({
    bind(e, t, n) { return this.on(e, null, t, n); }, unbind(e, t) { return this.off(e, null, t); }, delegate(e, t, n, r) { return this.on(t, e, n, r); }, undelegate(e, t, n) { return arguments.length === 1 ? this.off(e, '**') : this.off(t, e || '**', n); },
  }), w.proxy = function (e, t) {
    let n; let r; let
      i; if (typeof t === 'string' && (n = e[t], t = e, e = n), g(e)) return r = o.call(arguments, 2), i = function () { return e.apply(t || this, r.concat(o.call(arguments))); }, i.guid = e.guid = e.guid || w.guid++, i;
  }, w.holdReady = function (e) { e ? w.readyWait++ : w.ready(!0); }, w.isArray = Array.isArray, w.parseJSON = JSON.parse, w.nodeName = N, w.isFunction = g, w.isWindow = y, w.camelCase = G, w.type = x, w.now = Date.now, w.isNumeric = function (e) { const t = w.type(e); return (t === 'number' || t === 'string') && !isNaN(e - parseFloat(e)); }, typeof define === 'function' && define.amd && define('jquery', [], () => w); const Jt = e.jQuery;
  const Kt = e.$; return w.noConflict = function (t) { return e.$ === w && (e.$ = Kt), t && e.jQuery === w && (e.jQuery = Jt), w; }, t || (e.jQuery = e.$ = w), w;
}));

//! moment.js
(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory()
    : typeof define === 'function' && define.amd ? define(factory)
      : global.moment = factory();
}(this, (() => {
  let hookCallback;

  function hooks() {
    return hookCallback.apply(null, arguments);
  }

  // This is done to register the method called with moment()
  // without creating circular dependencies.
  function setHookCallback(callback) {
    hookCallback = callback;
  }

  function isArray(input) {
    return input instanceof Array || Object.prototype.toString.call(input) === '[object Array]';
  }

  function isObject(input) {
    // IE8 will treat undefined and null as object if it wasn't for
    // input != null
    return input != null && Object.prototype.toString.call(input) === '[object Object]';
  }

  function isObjectEmpty(obj) {
    if (Object.getOwnPropertyNames) {
      return (Object.getOwnPropertyNames(obj).length === 0);
    }
    let k;
    for (k in obj) {
      if (obj.hasOwnProperty(k)) {
        return false;
      }
    }
    return true;
  }

  function isUndefined(input) {
    return input === void 0;
  }

  function isNumber(input) {
    return typeof input === 'number' || Object.prototype.toString.call(input) === '[object Number]';
  }

  function isDate(input) {
    return input instanceof Date || Object.prototype.toString.call(input) === '[object Date]';
  }

  function map(arr, fn) {
    const res = [];
    let i;
    for (i = 0; i < arr.length; ++i) {
      res.push(fn(arr[i], i));
    }
    return res;
  }

  function hasOwnProp(a, b) {
    return Object.prototype.hasOwnProperty.call(a, b);
  }

  function extend(a, b) {
    for (const i in b) {
      if (hasOwnProp(b, i)) {
        a[i] = b[i];
      }
    }

    if (hasOwnProp(b, 'toString')) {
      a.toString = b.toString;
    }

    if (hasOwnProp(b, 'valueOf')) {
      a.valueOf = b.valueOf;
    }

    return a;
  }

  function createUTC(input, format, locale, strict) {
    return createLocalOrUTC(input, format, locale, strict, true).utc();
  }

  function defaultParsingFlags() {
    // We need to deep clone this object.
    return {
      empty: false,
      unusedTokens: [],
      unusedInput: [],
      overflow: -2,
      charsLeftOver: 0,
      nullInput: false,
      invalidMonth: null,
      invalidFormat: false,
      userInvalidated: false,
      iso: false,
      parsedDateParts: [],
      meridiem: null,
      rfc2822: false,
      weekdayMismatch: false,
    };
  }

  function getParsingFlags(m) {
    if (m._pf == null) {
      m._pf = defaultParsingFlags();
    }
    return m._pf;
  }

  let some;
  if (Array.prototype.some) {
    some = Array.prototype.some;
  } else {
    some = function (fun) {
      const t = Object(this);
      const len = t.length >>> 0;

      for (let i = 0; i < len; i++) {
        if (i in t && fun.call(this, t[i], i, t)) {
          return true;
        }
      }

      return false;
    };
  }

  function isValid(m) {
    if (m._isValid == null) {
      const flags = getParsingFlags(m);
      const parsedParts = some.call(flags.parsedDateParts, (i) => i != null);
      let isNowValid = !isNaN(m._d.getTime())
        && flags.overflow < 0
        && !flags.empty
        && !flags.invalidMonth
        && !flags.invalidWeekday
        && !flags.weekdayMismatch
        && !flags.nullInput
        && !flags.invalidFormat
        && !flags.userInvalidated
        && (!flags.meridiem || (flags.meridiem && parsedParts));

      if (m._strict) {
        isNowValid = isNowValid
          && flags.charsLeftOver === 0
          && flags.unusedTokens.length === 0
          && flags.bigHour === undefined;
      }

      if (Object.isFrozen == null || !Object.isFrozen(m)) {
        m._isValid = isNowValid;
      } else {
        return isNowValid;
      }
    }
    return m._isValid;
  }

  function createInvalid(flags) {
    const m = createUTC(NaN);
    if (flags != null) {
      extend(getParsingFlags(m), flags);
    } else {
      getParsingFlags(m).userInvalidated = true;
    }

    return m;
  }

  // Plugins that add properties should also add the key here (null value),
  // so we can properly clone ourselves.
  const momentProperties = hooks.momentProperties = [];

  function copyConfig(to, from) {
    let i; let prop; let
      val;

    if (!isUndefined(from._isAMomentObject)) {
      to._isAMomentObject = from._isAMomentObject;
    }
    if (!isUndefined(from._i)) {
      to._i = from._i;
    }
    if (!isUndefined(from._f)) {
      to._f = from._f;
    }
    if (!isUndefined(from._l)) {
      to._l = from._l;
    }
    if (!isUndefined(from._strict)) {
      to._strict = from._strict;
    }
    if (!isUndefined(from._tzm)) {
      to._tzm = from._tzm;
    }
    if (!isUndefined(from._isUTC)) {
      to._isUTC = from._isUTC;
    }
    if (!isUndefined(from._offset)) {
      to._offset = from._offset;
    }
    if (!isUndefined(from._pf)) {
      to._pf = getParsingFlags(from);
    }
    if (!isUndefined(from._locale)) {
      to._locale = from._locale;
    }

    if (momentProperties.length > 0) {
      for (i = 0; i < momentProperties.length; i++) {
        prop = momentProperties[i];
        val = from[prop];
        if (!isUndefined(val)) {
          to[prop] = val;
        }
      }
    }

    return to;
  }

  let updateInProgress = false;

  // Moment prototype object
  function Moment(config) {
    copyConfig(this, config);
    this._d = new Date(config._d != null ? config._d.getTime() : NaN);
    if (!this.isValid()) {
      this._d = new Date(NaN);
    }
    // Prevent infinite loop in case updateOffset creates new moment
    // objects.
    if (updateInProgress === false) {
      updateInProgress = true;
      hooks.updateOffset(this);
      updateInProgress = false;
    }
  }

  function isMoment(obj) {
    return obj instanceof Moment || (obj != null && obj._isAMomentObject != null);
  }

  function absFloor(number) {
    if (number < 0) {
      // -0 -> 0
      return Math.ceil(number) || 0;
    }
    return Math.floor(number);
  }

  function toInt(argumentForCoercion) {
    const coercedNumber = +argumentForCoercion;
    let value = 0;

    if (coercedNumber !== 0 && isFinite(coercedNumber)) {
      value = absFloor(coercedNumber);
    }

    return value;
  }

  // compare two arrays, return the number of differences
  function compareArrays(array1, array2, dontConvert) {
    const len = Math.min(array1.length, array2.length);
    const lengthDiff = Math.abs(array1.length - array2.length);
    let diffs = 0;
    let i;
    for (i = 0; i < len; i++) {
      if ((dontConvert && array1[i] !== array2[i])
        || (!dontConvert && toInt(array1[i]) !== toInt(array2[i]))) {
        diffs++;
      }
    }
    return diffs + lengthDiff;
  }

  function warn(msg) {
    if (hooks.suppressDeprecationWarnings === false
      && (typeof console !== 'undefined') && console.warn) {
      console.warn(`Deprecation warning: ${msg}`);
    }
  }

  function deprecate(msg, fn) {
    let firstTime = true;

    return extend(function () {
      if (hooks.deprecationHandler != null) {
        hooks.deprecationHandler(null, msg);
      }
      if (firstTime) {
        const args = [];
        let arg;
        for (let i = 0; i < arguments.length; i++) {
          arg = '';
          if (typeof arguments[i] === 'object') {
            arg += `\n[${i}] `;
            for (const key in arguments[0]) {
              arg += `${key}: ${arguments[0][key]}, `;
            }
            arg = arg.slice(0, -2); // Remove trailing comma and space
          } else {
            arg = arguments[i];
          }
          args.push(arg);
        }
        warn(`${msg}\nArguments: ${Array.prototype.slice.call(args).join('')}\n${(new Error()).stack}`);
        firstTime = false;
      }
      return fn.apply(this, arguments);
    }, fn);
  }

  const deprecations = {};

  function deprecateSimple(name, msg) {
    if (hooks.deprecationHandler != null) {
      hooks.deprecationHandler(name, msg);
    }
    if (!deprecations[name]) {
      warn(msg);
      deprecations[name] = true;
    }
  }

  hooks.suppressDeprecationWarnings = false;
  hooks.deprecationHandler = null;

  function isFunction(input) {
    return input instanceof Function || Object.prototype.toString.call(input) === '[object Function]';
  }

  function set(config) {
    let prop; let
      i;
    for (i in config) {
      prop = config[i];
      if (isFunction(prop)) {
        this[i] = prop;
      } else {
        this[`_${i}`] = prop;
      }
    }
    this._config = config;
    // Lenient ordinal parsing accepts just a number in addition to
    // number + (possibly) stuff coming from _dayOfMonthOrdinalParse.
    // TODO: Remove "ordinalParse" fallback in next major release.
    this._dayOfMonthOrdinalParseLenient = new RegExp(
      `${this._dayOfMonthOrdinalParse.source || this._ordinalParse.source
      }|${(/\d{1,2}/).source}`,
    );
  }

  function mergeConfigs(parentConfig, childConfig) {
    const res = extend({}, parentConfig);
    let prop;
    for (prop in childConfig) {
      if (hasOwnProp(childConfig, prop)) {
        if (isObject(parentConfig[prop]) && isObject(childConfig[prop])) {
          res[prop] = {};
          extend(res[prop], parentConfig[prop]);
          extend(res[prop], childConfig[prop]);
        } else if (childConfig[prop] != null) {
          res[prop] = childConfig[prop];
        } else {
          delete res[prop];
        }
      }
    }
    for (prop in parentConfig) {
      if (hasOwnProp(parentConfig, prop)
        && !hasOwnProp(childConfig, prop)
        && isObject(parentConfig[prop])) {
        // make sure changes to properties don't modify parent config
        res[prop] = extend({}, res[prop]);
      }
    }
    return res;
  }

  function Locale(config) {
    if (config != null) {
      this.set(config);
    }
  }

  let keys;

  if (Object.keys) {
    keys = Object.keys;
  } else {
    keys = function (obj) {
      let i; const
        res = [];
      for (i in obj) {
        if (hasOwnProp(obj, i)) {
          res.push(i);
        }
      }
      return res;
    };
  }

  const defaultCalendar = {
    sameDay: '[Today at] LT',
    nextDay: '[Tomorrow at] LT',
    nextWeek: 'dddd [at] LT',
    lastDay: '[Yesterday at] LT',
    lastWeek: '[Last] dddd [at] LT',
    sameElse: 'L',
  };

  function calendar(key, mom, now) {
    const output = this._calendar[key] || this._calendar.sameElse;
    return isFunction(output) ? output.call(mom, now) : output;
  }

  const defaultLongDateFormat = {
    LTS: 'h:mm:ss A',
    LT: 'h:mm A',
    L: 'MM/DD/YYYY',
    LL: 'MMMM D, YYYY',
    LLL: 'MMMM D, YYYY h:mm A',
    LLLL: 'dddd, MMMM D, YYYY h:mm A',
  };

  function longDateFormat(key) {
    const format = this._longDateFormat[key];
    const formatUpper = this._longDateFormat[key.toUpperCase()];

    if (format || !formatUpper) {
      return format;
    }

    this._longDateFormat[key] = formatUpper.replace(/MMMM|MM|DD|dddd/g, (val) => val.slice(1));

    return this._longDateFormat[key];
  }

  const defaultInvalidDate = 'Invalid date';

  function invalidDate() {
    return this._invalidDate;
  }

  const defaultOrdinal = '%d';
  const defaultDayOfMonthOrdinalParse = /\d{1,2}/;

  function ordinal(number) {
    return this._ordinal.replace('%d', number);
  }

  const defaultRelativeTime = {
    future: 'in %s',
    past: '%s ago',
    s: 'a few seconds',
    ss: '%d seconds',
    m: 'a minute',
    mm: '%d minutes',
    h: 'an hour',
    hh: '%d hours',
    d: 'a day',
    dd: '%d days',
    M: 'a month',
    MM: '%d months',
    y: 'a year',
    yy: '%d years',
  };

  function relativeTime(number, withoutSuffix, string, isFuture) {
    const output = this._relativeTime[string];
    return (isFunction(output))
      ? output(number, withoutSuffix, string, isFuture)
      : output.replace(/%d/i, number);
  }

  function pastFuture(diff, output) {
    const format = this._relativeTime[diff > 0 ? 'future' : 'past'];
    return isFunction(format) ? format(output) : format.replace(/%s/i, output);
  }

  const aliases = {};

  function addUnitAlias(unit, shorthand) {
    const lowerCase = unit.toLowerCase();
    aliases[lowerCase] = aliases[`${lowerCase}s`] = aliases[shorthand] = unit;
  }

  function normalizeUnits(units) {
    return typeof units === 'string' ? aliases[units] || aliases[units.toLowerCase()] : undefined;
  }

  function normalizeObjectUnits(inputObject) {
    const normalizedInput = {};
    let normalizedProp;
    let prop;

    for (prop in inputObject) {
      if (hasOwnProp(inputObject, prop)) {
        normalizedProp = normalizeUnits(prop);
        if (normalizedProp) {
          normalizedInput[normalizedProp] = inputObject[prop];
        }
      }
    }

    return normalizedInput;
  }

  const priorities = {};

  function addUnitPriority(unit, priority) {
    priorities[unit] = priority;
  }

  function getPrioritizedUnits(unitsObj) {
    const units = [];
    for (const u in unitsObj) {
      units.push({ unit: u, priority: priorities[u] });
    }
    units.sort((a, b) => a.priority - b.priority);
    return units;
  }

  function zeroFill(number, targetLength, forceSign) {
    const absNumber = `${Math.abs(number)}`;
    const zerosToFill = targetLength - absNumber.length;
    const sign = number >= 0;
    return (sign ? (forceSign ? '+' : '') : '-')
      + (10 ** Math.max(0, zerosToFill)).toString().substr(1) + absNumber;
  }

  const formattingTokens = /(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g;

  const localFormattingTokens = /(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g;

  const formatFunctions = {};

  const formatTokenFunctions = {};

  // token:    'M'
  // padded:   ['MM', 2]
  // ordinal:  'Mo'
  // callback: function () { this.month() + 1 }
  function addFormatToken(token, padded, ordinal, callback) {
    let func = callback;
    if (typeof callback === 'string') {
      func = function () {
        return this[callback]();
      };
    }
    if (token) {
      formatTokenFunctions[token] = func;
    }
    if (padded) {
      formatTokenFunctions[padded[0]] = function () {
        return zeroFill(func.apply(this, arguments), padded[1], padded[2]);
      };
    }
    if (ordinal) {
      formatTokenFunctions[ordinal] = function () {
        return this.localeData().ordinal(func.apply(this, arguments), token);
      };
    }
  }

  function removeFormattingTokens(input) {
    if (input.match(/\[[\s\S]/)) {
      return input.replace(/^\[|\]$/g, '');
    }
    return input.replace(/\\/g, '');
  }

  function makeFormatFunction(format) {
    const array = format.match(formattingTokens);
    let i; let
      length;

    for (i = 0, length = array.length; i < length; i++) {
      if (formatTokenFunctions[array[i]]) {
        array[i] = formatTokenFunctions[array[i]];
      } else {
        array[i] = removeFormattingTokens(array[i]);
      }
    }

    return function (mom) {
      let output = '';
      let i;
      for (i = 0; i < length; i++) {
        output += isFunction(array[i]) ? array[i].call(mom, format) : array[i];
      }
      return output;
    };
  }

  // format date using native date object
  function formatMoment(m, format) {
    if (!m.isValid()) {
      return m.localeData().invalidDate();
    }

    format = expandFormat(format, m.localeData());
    formatFunctions[format] = formatFunctions[format] || makeFormatFunction(format);

    return formatFunctions[format](m);
  }

  function expandFormat(format, locale) {
    let i = 5;

    function replaceLongDateFormatTokens(input) {
      return locale.longDateFormat(input) || input;
    }

    localFormattingTokens.lastIndex = 0;
    while (i >= 0 && localFormattingTokens.test(format)) {
      format = format.replace(localFormattingTokens, replaceLongDateFormatTokens);
      localFormattingTokens.lastIndex = 0;
      i -= 1;
    }

    return format;
  }

  const match1 = /\d/; //       0 - 9
  const match2 = /\d\d/; //      00 - 99
  const match3 = /\d{3}/; //     000 - 999
  const match4 = /\d{4}/; //    0000 - 9999
  const match6 = /[+-]?\d{6}/; // -999999 - 999999
  const match1to2 = /\d\d?/; //       0 - 99
  const match3to4 = /\d\d\d\d?/; //     999 - 9999
  const match5to6 = /\d\d\d\d\d\d?/; //   99999 - 999999
  const match1to3 = /\d{1,3}/; //       0 - 999
  const match1to4 = /\d{1,4}/; //       0 - 9999
  const match1to6 = /[+-]?\d{1,6}/; // -999999 - 999999

  const matchUnsigned = /\d+/; //       0 - inf
  const matchSigned = /[+-]?\d+/; //    -inf - inf

  const matchOffset = /Z|[+-]\d\d:?\d\d/gi; // +00:00 -00:00 +0000 -0000 or Z
  const matchShortOffset = /Z|[+-]\d\d(?::?\d\d)?/gi; // +00 -00 +00:00 -00:00 +0000 -0000 or Z

  const matchTimestamp = /[+-]?\d+(\.\d{1,3})?/; // 123456789 123456789.123

  // any word (or two) characters or numbers including two/three word month in arabic.
  // includes scottish gaelic two word and hyphenated months
  const matchWord = /[0-9]{0,256}['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFF07\uFF10-\uFFEF]{1,256}|[\u0600-\u06FF\/]{1,256}(\s*?[\u0600-\u06FF]{1,256}){1,2}/i;

  const regexes = {};

  function addRegexToken(token, regex, strictRegex) {
    regexes[token] = isFunction(regex) ? regex : function (isStrict, localeData) {
      return (isStrict && strictRegex) ? strictRegex : regex;
    };
  }

  function getParseRegexForToken(token, config) {
    if (!hasOwnProp(regexes, token)) {
      return new RegExp(unescapeFormat(token));
    }

    return regexes[token](config._strict, config._locale);
  }

  // Code from http://stackoverflow.com/questions/3561493/is-there-a-regexp-escape-function-in-javascript
  function unescapeFormat(s) {
    return regexEscape(s.replace('\\', '').replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g, (matched, p1, p2, p3, p4) => p1 || p2 || p3 || p4));
  }

  function regexEscape(s) {
    return s.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
  }

  const tokens = {};

  function addParseToken(token, callback) {
    let i; let
      func = callback;
    if (typeof token === 'string') {
      token = [token];
    }
    if (isNumber(callback)) {
      func = function (input, array) {
        array[callback] = toInt(input);
      };
    }
    for (i = 0; i < token.length; i++) {
      tokens[token[i]] = func;
    }
  }

  function addWeekParseToken(token, callback) {
    addParseToken(token, (input, array, config, token) => {
      config._w = config._w || {};
      callback(input, config._w, config, token);
    });
  }

  function addTimeToArrayFromToken(token, input, config) {
    if (input != null && hasOwnProp(tokens, token)) {
      tokens[token](input, config._a, config, token);
    }
  }

  const YEAR = 0;
  const MONTH = 1;
  const DATE = 2;
  const HOUR = 3;
  const MINUTE = 4;
  const SECOND = 5;
  const MILLISECOND = 6;
  const WEEK = 7;
  const WEEKDAY = 8;

  // FORMATTING

  addFormatToken('Y', 0, 0, function () {
    const y = this.year();
    return y <= 9999 ? `${y}` : `+${y}`;
  });

  addFormatToken(0, ['YY', 2], 0, function () {
    return this.year() % 100;
  });

  addFormatToken(0, ['YYYY', 4], 0, 'year');
  addFormatToken(0, ['YYYYY', 5], 0, 'year');
  addFormatToken(0, ['YYYYYY', 6, true], 0, 'year');

  // ALIASES

  addUnitAlias('year', 'y');

  // PRIORITIES

  addUnitPriority('year', 1);

  // PARSING

  addRegexToken('Y', matchSigned);
  addRegexToken('YY', match1to2, match2);
  addRegexToken('YYYY', match1to4, match4);
  addRegexToken('YYYYY', match1to6, match6);
  addRegexToken('YYYYYY', match1to6, match6);

  addParseToken(['YYYYY', 'YYYYYY'], YEAR);
  addParseToken('YYYY', (input, array) => {
    array[YEAR] = input.length === 2 ? hooks.parseTwoDigitYear(input) : toInt(input);
  });
  addParseToken('YY', (input, array) => {
    array[YEAR] = hooks.parseTwoDigitYear(input);
  });
  addParseToken('Y', (input, array) => {
    array[YEAR] = parseInt(input, 10);
  });

  // HELPERS

  function daysInYear(year) {
    return isLeapYear(year) ? 366 : 365;
  }

  function isLeapYear(year) {
    return (year % 4 === 0 && year % 100 !== 0) || year % 400 === 0;
  }

  // HOOKS

  hooks.parseTwoDigitYear = function (input) {
    return toInt(input) + (toInt(input) > 68 ? 1900 : 2000);
  };

  // MOMENTS

  const getSetYear = makeGetSet('FullYear', true);

  function getIsLeapYear() {
    return isLeapYear(this.year());
  }

  function makeGetSet(unit, keepTime) {
    return function (value) {
      if (value != null) {
        set$1(this, unit, value);
        hooks.updateOffset(this, keepTime);
        return this;
      }
      return get(this, unit);
    };
  }

  function get(mom, unit) {
    return mom.isValid()
      ? mom._d[`get${mom._isUTC ? 'UTC' : ''}${unit}`]() : NaN;
  }

  function set$1(mom, unit, value) {
    if (mom.isValid() && !isNaN(value)) {
      if (unit === 'FullYear' && isLeapYear(mom.year()) && mom.month() === 1 && mom.date() === 29) {
        mom._d[`set${mom._isUTC ? 'UTC' : ''}${unit}`](value, mom.month(), daysInMonth(value, mom.month()));
      } else {
        mom._d[`set${mom._isUTC ? 'UTC' : ''}${unit}`](value);
      }
    }
  }

  // MOMENTS

  function stringGet(units) {
    units = normalizeUnits(units);
    if (isFunction(this[units])) {
      return this[units]();
    }
    return this;
  }

  function stringSet(units, value) {
    if (typeof units === 'object') {
      units = normalizeObjectUnits(units);
      const prioritized = getPrioritizedUnits(units);
      for (let i = 0; i < prioritized.length; i++) {
        this[prioritized[i].unit](units[prioritized[i].unit]);
      }
    } else {
      units = normalizeUnits(units);
      if (isFunction(this[units])) {
        return this[units](value);
      }
    }
    return this;
  }

  function mod(n, x) {
    return ((n % x) + x) % x;
  }

  let indexOf;

  if (Array.prototype.indexOf) {
    indexOf = Array.prototype.indexOf;
  } else {
    indexOf = function (o) {
      // I know
      let i;
      for (i = 0; i < this.length; ++i) {
        if (this[i] === o) {
          return i;
        }
      }
      return -1;
    };
  }

  function daysInMonth(year, month) {
    if (isNaN(year) || isNaN(month)) {
      return NaN;
    }
    const modMonth = mod(month, 12);
    year += (month - modMonth) / 12;
    return modMonth === 1 ? (isLeapYear(year) ? 29 : 28) : (31 - modMonth % 7 % 2);
  }

  // FORMATTING

  addFormatToken('M', ['MM', 2], 'Mo', function () {
    return this.month() + 1;
  });

  addFormatToken('MMM', 0, 0, function (format) {
    return this.localeData().monthsShort(this, format);
  });

  addFormatToken('MMMM', 0, 0, function (format) {
    return this.localeData().months(this, format);
  });

  // ALIASES

  addUnitAlias('month', 'M');

  // PRIORITY

  addUnitPriority('month', 8);

  // PARSING

  addRegexToken('M', match1to2);
  addRegexToken('MM', match1to2, match2);
  addRegexToken('MMM', (isStrict, locale) => locale.monthsShortRegex(isStrict));
  addRegexToken('MMMM', (isStrict, locale) => locale.monthsRegex(isStrict));

  addParseToken(['M', 'MM'], (input, array) => {
    array[MONTH] = toInt(input) - 1;
  });

  addParseToken(['MMM', 'MMMM'], (input, array, config, token) => {
    const month = config._locale.monthsParse(input, token, config._strict);
    // if we didn't find a month name, mark the date as invalid.
    if (month != null) {
      array[MONTH] = month;
    } else {
      getParsingFlags(config).invalidMonth = input;
    }
  });

  // LOCALES

  const MONTHS_IN_FORMAT = /D[oD]?(\[[^\[\]]*\]|\s)+MMMM?/;
  const defaultLocaleMonths = 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_');

  function localeMonths(m, format) {
    if (!m) {
      return isArray(this._months) ? this._months
        : this._months.standalone;
    }
    return isArray(this._months) ? this._months[m.month()]
      : this._months[(this._months.isFormat || MONTHS_IN_FORMAT).test(format) ? 'format' : 'standalone'][m.month()];
  }

  const defaultLocaleMonthsShort = 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_');

  function localeMonthsShort(m, format) {
    if (!m) {
      return isArray(this._monthsShort) ? this._monthsShort
        : this._monthsShort.standalone;
    }
    return isArray(this._monthsShort) ? this._monthsShort[m.month()]
      : this._monthsShort[MONTHS_IN_FORMAT.test(format) ? 'format' : 'standalone'][m.month()];
  }

  function handleStrictParse(monthName, format, strict) {
    let i; let ii; let mom; const
      llc = monthName.toLocaleLowerCase();
    if (!this._monthsParse) {
      // this is not used
      this._monthsParse = [];
      this._longMonthsParse = [];
      this._shortMonthsParse = [];
      for (i = 0; i < 12; ++i) {
        mom = createUTC([2000, i]);
        this._shortMonthsParse[i] = this.monthsShort(mom, '').toLocaleLowerCase();
        this._longMonthsParse[i] = this.months(mom, '').toLocaleLowerCase();
      }
    }

    if (strict) {
      if (format === 'MMM') {
        ii = indexOf.call(this._shortMonthsParse, llc);
        return ii !== -1 ? ii : null;
      }
      ii = indexOf.call(this._longMonthsParse, llc);
      return ii !== -1 ? ii : null;
    }
    if (format === 'MMM') {
      ii = indexOf.call(this._shortMonthsParse, llc);
      if (ii !== -1) {
        return ii;
      }
      ii = indexOf.call(this._longMonthsParse, llc);
      return ii !== -1 ? ii : null;
    }
    ii = indexOf.call(this._longMonthsParse, llc);
    if (ii !== -1) {
      return ii;
    }
    ii = indexOf.call(this._shortMonthsParse, llc);
    return ii !== -1 ? ii : null;
  }

  function localeMonthsParse(monthName, format, strict) {
    let i; let mom; let
      regex;

    if (this._monthsParseExact) {
      return handleStrictParse.call(this, monthName, format, strict);
    }

    if (!this._monthsParse) {
      this._monthsParse = [];
      this._longMonthsParse = [];
      this._shortMonthsParse = [];
    }

    // TODO: add sorting
    // Sorting makes sure if one month (or abbr) is a prefix of another
    // see sorting in computeMonthsParse
    for (i = 0; i < 12; i++) {
      // make the regex if we don't have it already
      mom = createUTC([2000, i]);
      if (strict && !this._longMonthsParse[i]) {
        this._longMonthsParse[i] = new RegExp(`^${this.months(mom, '').replace('.', '')}$`, 'i');
        this._shortMonthsParse[i] = new RegExp(`^${this.monthsShort(mom, '').replace('.', '')}$`, 'i');
      }
      if (!strict && !this._monthsParse[i]) {
        regex = `^${this.months(mom, '')}|^${this.monthsShort(mom, '')}`;
        this._monthsParse[i] = new RegExp(regex.replace('.', ''), 'i');
      }
      // test the regex
      if (strict && format === 'MMMM' && this._longMonthsParse[i].test(monthName)) {
        return i;
      } if (strict && format === 'MMM' && this._shortMonthsParse[i].test(monthName)) {
        return i;
      } if (!strict && this._monthsParse[i].test(monthName)) {
        return i;
      }
    }
  }

  // MOMENTS

  function setMonth(mom, value) {
    let dayOfMonth;

    if (!mom.isValid()) {
      // No op
      return mom;
    }

    if (typeof value === 'string') {
      if (/^\d+$/.test(value)) {
        value = toInt(value);
      } else {
        value = mom.localeData().monthsParse(value);
        // TODO: Another silent failure?
        if (!isNumber(value)) {
          return mom;
        }
      }
    }

    dayOfMonth = Math.min(mom.date(), daysInMonth(mom.year(), value));
    mom._d[`set${mom._isUTC ? 'UTC' : ''}Month`](value, dayOfMonth);
    return mom;
  }

  function getSetMonth(value) {
    if (value != null) {
      setMonth(this, value);
      hooks.updateOffset(this, true);
      return this;
    }
    return get(this, 'Month');
  }

  function getDaysInMonth() {
    return daysInMonth(this.year(), this.month());
  }

  const defaultMonthsShortRegex = matchWord;

  function monthsShortRegex(isStrict) {
    if (this._monthsParseExact) {
      if (!hasOwnProp(this, '_monthsRegex')) {
        computeMonthsParse.call(this);
      }
      if (isStrict) {
        return this._monthsShortStrictRegex;
      }
      return this._monthsShortRegex;
    }
    if (!hasOwnProp(this, '_monthsShortRegex')) {
      this._monthsShortRegex = defaultMonthsShortRegex;
    }
    return this._monthsShortStrictRegex && isStrict
      ? this._monthsShortStrictRegex : this._monthsShortRegex;
  }

  const defaultMonthsRegex = matchWord;

  function monthsRegex(isStrict) {
    if (this._monthsParseExact) {
      if (!hasOwnProp(this, '_monthsRegex')) {
        computeMonthsParse.call(this);
      }
      if (isStrict) {
        return this._monthsStrictRegex;
      }
      return this._monthsRegex;
    }
    if (!hasOwnProp(this, '_monthsRegex')) {
      this._monthsRegex = defaultMonthsRegex;
    }
    return this._monthsStrictRegex && isStrict
      ? this._monthsStrictRegex : this._monthsRegex;
  }

  function computeMonthsParse() {
    function cmpLenRev(a, b) {
      return b.length - a.length;
    }

    const shortPieces = [];
    const longPieces = [];
    const mixedPieces = [];
    let i; let
      mom;
    for (i = 0; i < 12; i++) {
      // make the regex if we don't have it already
      mom = createUTC([2000, i]);
      shortPieces.push(this.monthsShort(mom, ''));
      longPieces.push(this.months(mom, ''));
      mixedPieces.push(this.months(mom, ''));
      mixedPieces.push(this.monthsShort(mom, ''));
    }
    // Sorting makes sure if one month (or abbr) is a prefix of another it
    // will match the longer piece.
    shortPieces.sort(cmpLenRev);
    longPieces.sort(cmpLenRev);
    mixedPieces.sort(cmpLenRev);
    for (i = 0; i < 12; i++) {
      shortPieces[i] = regexEscape(shortPieces[i]);
      longPieces[i] = regexEscape(longPieces[i]);
    }
    for (i = 0; i < 24; i++) {
      mixedPieces[i] = regexEscape(mixedPieces[i]);
    }

    this._monthsRegex = new RegExp(`^(${mixedPieces.join('|')})`, 'i');
    this._monthsShortRegex = this._monthsRegex;
    this._monthsStrictRegex = new RegExp(`^(${longPieces.join('|')})`, 'i');
    this._monthsShortStrictRegex = new RegExp(`^(${shortPieces.join('|')})`, 'i');
  }

  function createDate(y, m, d, h, M, s, ms) {
    // can't just apply() to create a date:
    // https://stackoverflow.com/q/181348
    let date;
    // the date constructor remaps years 0-99 to 1900-1999
    if (y < 100 && y >= 0) {
      // preserve leap years using a full 400 year cycle, then reset
      date = new Date(y + 400, m, d, h, M, s, ms);
      if (isFinite(date.getFullYear())) {
        date.setFullYear(y);
      }
    } else {
      date = new Date(y, m, d, h, M, s, ms);
    }

    return date;
  }

  function createUTCDate(y) {
    let date;
    // the Date.UTC function remaps years 0-99 to 1900-1999
    if (y < 100 && y >= 0) {
      const args = Array.prototype.slice.call(arguments);
      // preserve leap years using a full 400 year cycle, then reset
      args[0] = y + 400;
      date = new Date(Date.UTC.apply(null, args));
      if (isFinite(date.getUTCFullYear())) {
        date.setUTCFullYear(y);
      }
    } else {
      date = new Date(Date.UTC.apply(null, arguments));
    }

    return date;
  }

  // start-of-first-week - start-of-year
  function firstWeekOffset(year, dow, doy) {
    const // first-week day -- which january is always in the first week (4 for iso, 1 for other)
      fwd = 7 + dow - doy;
      // first-week day local weekday -- which local weekday is fwd
    const fwdlw = (7 + createUTCDate(year, 0, fwd).getUTCDay() - dow) % 7;

    return -fwdlw + fwd - 1;
  }

  // https://en.wikipedia.org/wiki/ISO_week_date#Calculating_a_date_given_the_year.2C_week_number_and_weekday
  function dayOfYearFromWeeks(year, week, weekday, dow, doy) {
    const localWeekday = (7 + weekday - dow) % 7;
    const weekOffset = firstWeekOffset(year, dow, doy);
    const dayOfYear = 1 + 7 * (week - 1) + localWeekday + weekOffset;
    let resYear; let
      resDayOfYear;

    if (dayOfYear <= 0) {
      resYear = year - 1;
      resDayOfYear = daysInYear(resYear) + dayOfYear;
    } else if (dayOfYear > daysInYear(year)) {
      resYear = year + 1;
      resDayOfYear = dayOfYear - daysInYear(year);
    } else {
      resYear = year;
      resDayOfYear = dayOfYear;
    }

    return {
      year: resYear,
      dayOfYear: resDayOfYear,
    };
  }

  function weekOfYear(mom, dow, doy) {
    const weekOffset = firstWeekOffset(mom.year(), dow, doy);
    const week = Math.floor((mom.dayOfYear() - weekOffset - 1) / 7) + 1;
    let resWeek; let
      resYear;

    if (week < 1) {
      resYear = mom.year() - 1;
      resWeek = week + weeksInYear(resYear, dow, doy);
    } else if (week > weeksInYear(mom.year(), dow, doy)) {
      resWeek = week - weeksInYear(mom.year(), dow, doy);
      resYear = mom.year() + 1;
    } else {
      resYear = mom.year();
      resWeek = week;
    }

    return {
      week: resWeek,
      year: resYear,
    };
  }

  function weeksInYear(year, dow, doy) {
    const weekOffset = firstWeekOffset(year, dow, doy);
    const weekOffsetNext = firstWeekOffset(year + 1, dow, doy);
    return (daysInYear(year) - weekOffset + weekOffsetNext) / 7;
  }

  // FORMATTING

  addFormatToken('w', ['ww', 2], 'wo', 'week');
  addFormatToken('W', ['WW', 2], 'Wo', 'isoWeek');

  // ALIASES

  addUnitAlias('week', 'w');
  addUnitAlias('isoWeek', 'W');

  // PRIORITIES

  addUnitPriority('week', 5);
  addUnitPriority('isoWeek', 5);

  // PARSING

  addRegexToken('w', match1to2);
  addRegexToken('ww', match1to2, match2);
  addRegexToken('W', match1to2);
  addRegexToken('WW', match1to2, match2);

  addWeekParseToken(['w', 'ww', 'W', 'WW'], (input, week, config, token) => {
    week[token.substr(0, 1)] = toInt(input);
  });

  // HELPERS

  // LOCALES

  function localeWeek(mom) {
    return weekOfYear(mom, this._week.dow, this._week.doy).week;
  }

  const defaultLocaleWeek = {
    dow: 0, // Sunday is the first day of the week.
    doy: 6, // The week that contains Jan 6th is the first week of the year.
  };

  function localeFirstDayOfWeek() {
    return this._week.dow;
  }

  function localeFirstDayOfYear() {
    return this._week.doy;
  }

  // MOMENTS

  function getSetWeek(input) {
    const week = this.localeData().week(this);
    return input == null ? week : this.add((input - week) * 7, 'd');
  }

  function getSetISOWeek(input) {
    const { week } = weekOfYear(this, 1, 4);
    return input == null ? week : this.add((input - week) * 7, 'd');
  }

  // FORMATTING

  addFormatToken('d', 0, 'do', 'day');

  addFormatToken('dd', 0, 0, function (format) {
    return this.localeData().weekdaysMin(this, format);
  });

  addFormatToken('ddd', 0, 0, function (format) {
    return this.localeData().weekdaysShort(this, format);
  });

  addFormatToken('dddd', 0, 0, function (format) {
    return this.localeData().weekdays(this, format);
  });

  addFormatToken('e', 0, 0, 'weekday');
  addFormatToken('E', 0, 0, 'isoWeekday');

  // ALIASES

  addUnitAlias('day', 'd');
  addUnitAlias('weekday', 'e');
  addUnitAlias('isoWeekday', 'E');

  // PRIORITY
  addUnitPriority('day', 11);
  addUnitPriority('weekday', 11);
  addUnitPriority('isoWeekday', 11);

  // PARSING

  addRegexToken('d', match1to2);
  addRegexToken('e', match1to2);
  addRegexToken('E', match1to2);
  addRegexToken('dd', (isStrict, locale) => locale.weekdaysMinRegex(isStrict));
  addRegexToken('ddd', (isStrict, locale) => locale.weekdaysShortRegex(isStrict));
  addRegexToken('dddd', (isStrict, locale) => locale.weekdaysRegex(isStrict));

  addWeekParseToken(['dd', 'ddd', 'dddd'], (input, week, config, token) => {
    const weekday = config._locale.weekdaysParse(input, token, config._strict);
    // if we didn't get a weekday name, mark the date as invalid
    if (weekday != null) {
      week.d = weekday;
    } else {
      getParsingFlags(config).invalidWeekday = input;
    }
  });

  addWeekParseToken(['d', 'e', 'E'], (input, week, config, token) => {
    week[token] = toInt(input);
  });

  // HELPERS

  function parseWeekday(input, locale) {
    if (typeof input !== 'string') {
      return input;
    }

    if (!isNaN(input)) {
      return parseInt(input, 10);
    }

    input = locale.weekdaysParse(input);
    if (typeof input === 'number') {
      return input;
    }

    return null;
  }

  function parseIsoWeekday(input, locale) {
    if (typeof input === 'string') {
      return locale.weekdaysParse(input) % 7 || 7;
    }
    return isNaN(input) ? null : input;
  }

  // LOCALES
  function shiftWeekdays(ws, n) {
    return ws.slice(n, 7).concat(ws.slice(0, n));
  }

  const defaultLocaleWeekdays = 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_');

  function localeWeekdays(m, format) {
    const weekdays = isArray(this._weekdays) ? this._weekdays
      : this._weekdays[(m && m !== true && this._weekdays.isFormat.test(format)) ? 'format' : 'standalone'];
    return (m === true) ? shiftWeekdays(weekdays, this._week.dow)
      : (m) ? weekdays[m.day()] : weekdays;
  }

  const defaultLocaleWeekdaysShort = 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_');

  function localeWeekdaysShort(m) {
    return (m === true) ? shiftWeekdays(this._weekdaysShort, this._week.dow)
      : (m) ? this._weekdaysShort[m.day()] : this._weekdaysShort;
  }

  const defaultLocaleWeekdaysMin = 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_');

  function localeWeekdaysMin(m) {
    return (m === true) ? shiftWeekdays(this._weekdaysMin, this._week.dow)
      : (m) ? this._weekdaysMin[m.day()] : this._weekdaysMin;
  }

  function handleStrictParse$1(weekdayName, format, strict) {
    let i; let ii; let mom; const
      llc = weekdayName.toLocaleLowerCase();
    if (!this._weekdaysParse) {
      this._weekdaysParse = [];
      this._shortWeekdaysParse = [];
      this._minWeekdaysParse = [];

      for (i = 0; i < 7; ++i) {
        mom = createUTC([2000, 1]).day(i);
        this._minWeekdaysParse[i] = this.weekdaysMin(mom, '').toLocaleLowerCase();
        this._shortWeekdaysParse[i] = this.weekdaysShort(mom, '').toLocaleLowerCase();
        this._weekdaysParse[i] = this.weekdays(mom, '').toLocaleLowerCase();
      }
    }

    if (strict) {
      if (format === 'dddd') {
        ii = indexOf.call(this._weekdaysParse, llc);
        return ii !== -1 ? ii : null;
      } if (format === 'ddd') {
        ii = indexOf.call(this._shortWeekdaysParse, llc);
        return ii !== -1 ? ii : null;
      }
      ii = indexOf.call(this._minWeekdaysParse, llc);
      return ii !== -1 ? ii : null;
    }
    if (format === 'dddd') {
      ii = indexOf.call(this._weekdaysParse, llc);
      if (ii !== -1) {
        return ii;
      }
      ii = indexOf.call(this._shortWeekdaysParse, llc);
      if (ii !== -1) {
        return ii;
      }
      ii = indexOf.call(this._minWeekdaysParse, llc);
      return ii !== -1 ? ii : null;
    } if (format === 'ddd') {
      ii = indexOf.call(this._shortWeekdaysParse, llc);
      if (ii !== -1) {
        return ii;
      }
      ii = indexOf.call(this._weekdaysParse, llc);
      if (ii !== -1) {
        return ii;
      }
      ii = indexOf.call(this._minWeekdaysParse, llc);
      return ii !== -1 ? ii : null;
    }
    ii = indexOf.call(this._minWeekdaysParse, llc);
    if (ii !== -1) {
      return ii;
    }
    ii = indexOf.call(this._weekdaysParse, llc);
    if (ii !== -1) {
      return ii;
    }
    ii = indexOf.call(this._shortWeekdaysParse, llc);
    return ii !== -1 ? ii : null;
  }

  function localeWeekdaysParse(weekdayName, format, strict) {
    let i; let mom; let
      regex;

    if (this._weekdaysParseExact) {
      return handleStrictParse$1.call(this, weekdayName, format, strict);
    }

    if (!this._weekdaysParse) {
      this._weekdaysParse = [];
      this._minWeekdaysParse = [];
      this._shortWeekdaysParse = [];
      this._fullWeekdaysParse = [];
    }

    for (i = 0; i < 7; i++) {
      // make the regex if we don't have it already

      mom = createUTC([2000, 1]).day(i);
      if (strict && !this._fullWeekdaysParse[i]) {
        this._fullWeekdaysParse[i] = new RegExp(`^${this.weekdays(mom, '').replace('.', '\\.?')}$`, 'i');
        this._shortWeekdaysParse[i] = new RegExp(`^${this.weekdaysShort(mom, '').replace('.', '\\.?')}$`, 'i');
        this._minWeekdaysParse[i] = new RegExp(`^${this.weekdaysMin(mom, '').replace('.', '\\.?')}$`, 'i');
      }
      if (!this._weekdaysParse[i]) {
        regex = `^${this.weekdays(mom, '')}|^${this.weekdaysShort(mom, '')}|^${this.weekdaysMin(mom, '')}`;
        this._weekdaysParse[i] = new RegExp(regex.replace('.', ''), 'i');
      }
      // test the regex
      if (strict && format === 'dddd' && this._fullWeekdaysParse[i].test(weekdayName)) {
        return i;
      } if (strict && format === 'ddd' && this._shortWeekdaysParse[i].test(weekdayName)) {
        return i;
      } if (strict && format === 'dd' && this._minWeekdaysParse[i].test(weekdayName)) {
        return i;
      } if (!strict && this._weekdaysParse[i].test(weekdayName)) {
        return i;
      }
    }
  }

  // MOMENTS

  function getSetDayOfWeek(input) {
    if (!this.isValid()) {
      return input != null ? this : NaN;
    }
    const day = this._isUTC ? this._d.getUTCDay() : this._d.getDay();
    if (input != null) {
      input = parseWeekday(input, this.localeData());
      return this.add(input - day, 'd');
    }
    return day;
  }

  function getSetLocaleDayOfWeek(input) {
    if (!this.isValid()) {
      return input != null ? this : NaN;
    }
    const weekday = (this.day() + 7 - this.localeData()._week.dow) % 7;
    return input == null ? weekday : this.add(input - weekday, 'd');
  }

  function getSetISODayOfWeek(input) {
    if (!this.isValid()) {
      return input != null ? this : NaN;
    }

    // behaves the same as moment#day except
    // as a getter, returns 7 instead of 0 (1-7 range instead of 0-6)
    // as a setter, sunday should belong to the previous week.

    if (input != null) {
      const weekday = parseIsoWeekday(input, this.localeData());
      return this.day(this.day() % 7 ? weekday : weekday - 7);
    }
    return this.day() || 7;
  }

  const defaultWeekdaysRegex = matchWord;

  function weekdaysRegex(isStrict) {
    if (this._weekdaysParseExact) {
      if (!hasOwnProp(this, '_weekdaysRegex')) {
        computeWeekdaysParse.call(this);
      }
      if (isStrict) {
        return this._weekdaysStrictRegex;
      }
      return this._weekdaysRegex;
    }
    if (!hasOwnProp(this, '_weekdaysRegex')) {
      this._weekdaysRegex = defaultWeekdaysRegex;
    }
    return this._weekdaysStrictRegex && isStrict
      ? this._weekdaysStrictRegex : this._weekdaysRegex;
  }

  const defaultWeekdaysShortRegex = matchWord;

  function weekdaysShortRegex(isStrict) {
    if (this._weekdaysParseExact) {
      if (!hasOwnProp(this, '_weekdaysRegex')) {
        computeWeekdaysParse.call(this);
      }
      if (isStrict) {
        return this._weekdaysShortStrictRegex;
      }
      return this._weekdaysShortRegex;
    }
    if (!hasOwnProp(this, '_weekdaysShortRegex')) {
      this._weekdaysShortRegex = defaultWeekdaysShortRegex;
    }
    return this._weekdaysShortStrictRegex && isStrict
      ? this._weekdaysShortStrictRegex : this._weekdaysShortRegex;
  }

  const defaultWeekdaysMinRegex = matchWord;

  function weekdaysMinRegex(isStrict) {
    if (this._weekdaysParseExact) {
      if (!hasOwnProp(this, '_weekdaysRegex')) {
        computeWeekdaysParse.call(this);
      }
      if (isStrict) {
        return this._weekdaysMinStrictRegex;
      }
      return this._weekdaysMinRegex;
    }
    if (!hasOwnProp(this, '_weekdaysMinRegex')) {
      this._weekdaysMinRegex = defaultWeekdaysMinRegex;
    }
    return this._weekdaysMinStrictRegex && isStrict
      ? this._weekdaysMinStrictRegex : this._weekdaysMinRegex;
  }

  function computeWeekdaysParse() {
    function cmpLenRev(a, b) {
      return b.length - a.length;
    }

    const minPieces = [];
    const shortPieces = [];
    const longPieces = [];
    const mixedPieces = [];
    let i; let mom; let minp; let shortp; let
      longp;
    for (i = 0; i < 7; i++) {
      // make the regex if we don't have it already
      mom = createUTC([2000, 1]).day(i);
      minp = this.weekdaysMin(mom, '');
      shortp = this.weekdaysShort(mom, '');
      longp = this.weekdays(mom, '');
      minPieces.push(minp);
      shortPieces.push(shortp);
      longPieces.push(longp);
      mixedPieces.push(minp);
      mixedPieces.push(shortp);
      mixedPieces.push(longp);
    }
    // Sorting makes sure if one weekday (or abbr) is a prefix of another it
    // will match the longer piece.
    minPieces.sort(cmpLenRev);
    shortPieces.sort(cmpLenRev);
    longPieces.sort(cmpLenRev);
    mixedPieces.sort(cmpLenRev);
    for (i = 0; i < 7; i++) {
      shortPieces[i] = regexEscape(shortPieces[i]);
      longPieces[i] = regexEscape(longPieces[i]);
      mixedPieces[i] = regexEscape(mixedPieces[i]);
    }

    this._weekdaysRegex = new RegExp(`^(${mixedPieces.join('|')})`, 'i');
    this._weekdaysShortRegex = this._weekdaysRegex;
    this._weekdaysMinRegex = this._weekdaysRegex;

    this._weekdaysStrictRegex = new RegExp(`^(${longPieces.join('|')})`, 'i');
    this._weekdaysShortStrictRegex = new RegExp(`^(${shortPieces.join('|')})`, 'i');
    this._weekdaysMinStrictRegex = new RegExp(`^(${minPieces.join('|')})`, 'i');
  }

  // FORMATTING

  function hFormat() {
    return this.hours() % 12 || 12;
  }

  function kFormat() {
    return this.hours() || 24;
  }

  addFormatToken('H', ['HH', 2], 0, 'hour');
  addFormatToken('h', ['hh', 2], 0, hFormat);
  addFormatToken('k', ['kk', 2], 0, kFormat);

  addFormatToken('hmm', 0, 0, function () {
    return `${hFormat.apply(this)}${zeroFill(this.minutes(), 2)}`;
  });

  addFormatToken('hmmss', 0, 0, function () {
    return `${hFormat.apply(this)}${zeroFill(this.minutes(), 2)
    }${zeroFill(this.seconds(), 2)}`;
  });

  addFormatToken('Hmm', 0, 0, function () {
    return `${this.hours()}${zeroFill(this.minutes(), 2)}`;
  });

  addFormatToken('Hmmss', 0, 0, function () {
    return `${this.hours()}${zeroFill(this.minutes(), 2)
    }${zeroFill(this.seconds(), 2)}`;
  });

  function meridiem(token, lowercase) {
    addFormatToken(token, 0, 0, function () {
      return this.localeData().meridiem(this.hours(), this.minutes(), lowercase);
    });
  }

  meridiem('a', true);
  meridiem('A', false);

  // ALIASES

  addUnitAlias('hour', 'h');

  // PRIORITY
  addUnitPriority('hour', 13);

  // PARSING

  function matchMeridiem(isStrict, locale) {
    return locale._meridiemParse;
  }

  addRegexToken('a', matchMeridiem);
  addRegexToken('A', matchMeridiem);
  addRegexToken('H', match1to2);
  addRegexToken('h', match1to2);
  addRegexToken('k', match1to2);
  addRegexToken('HH', match1to2, match2);
  addRegexToken('hh', match1to2, match2);
  addRegexToken('kk', match1to2, match2);

  addRegexToken('hmm', match3to4);
  addRegexToken('hmmss', match5to6);
  addRegexToken('Hmm', match3to4);
  addRegexToken('Hmmss', match5to6);

  addParseToken(['H', 'HH'], HOUR);
  addParseToken(['k', 'kk'], (input, array, config) => {
    const kInput = toInt(input);
    array[HOUR] = kInput === 24 ? 0 : kInput;
  });
  addParseToken(['a', 'A'], (input, array, config) => {
    config._isPm = config._locale.isPM(input);
    config._meridiem = input;
  });
  addParseToken(['h', 'hh'], (input, array, config) => {
    array[HOUR] = toInt(input);
    getParsingFlags(config).bigHour = true;
  });
  addParseToken('hmm', (input, array, config) => {
    const pos = input.length - 2;
    array[HOUR] = toInt(input.substr(0, pos));
    array[MINUTE] = toInt(input.substr(pos));
    getParsingFlags(config).bigHour = true;
  });
  addParseToken('hmmss', (input, array, config) => {
    const pos1 = input.length - 4;
    const pos2 = input.length - 2;
    array[HOUR] = toInt(input.substr(0, pos1));
    array[MINUTE] = toInt(input.substr(pos1, 2));
    array[SECOND] = toInt(input.substr(pos2));
    getParsingFlags(config).bigHour = true;
  });
  addParseToken('Hmm', (input, array, config) => {
    const pos = input.length - 2;
    array[HOUR] = toInt(input.substr(0, pos));
    array[MINUTE] = toInt(input.substr(pos));
  });
  addParseToken('Hmmss', (input, array, config) => {
    const pos1 = input.length - 4;
    const pos2 = input.length - 2;
    array[HOUR] = toInt(input.substr(0, pos1));
    array[MINUTE] = toInt(input.substr(pos1, 2));
    array[SECOND] = toInt(input.substr(pos2));
  });

  // LOCALES

  function localeIsPM(input) {
    // IE8 Quirks Mode & IE7 Standards Mode do not allow accessing strings like arrays
    // Using charAt should be more compatible.
    return ((`${input}`).toLowerCase().charAt(0) === 'p');
  }

  const defaultLocaleMeridiemParse = /[ap]\.?m?\.?/i;

  function localeMeridiem(hours, minutes, isLower) {
    if (hours > 11) {
      return isLower ? 'pm' : 'PM';
    }
    return isLower ? 'am' : 'AM';
  }

  // MOMENTS

  // Setting the hour should keep the time, because the user explicitly
  // specified which hour they want. So trying to maintain the same hour (in
  // a new timezone) makes sense. Adding/subtracting hours does not follow
  // this rule.
  const getSetHour = makeGetSet('Hours', true);

  const baseConfig = {
    calendar: defaultCalendar,
    longDateFormat: defaultLongDateFormat,
    invalidDate: defaultInvalidDate,
    ordinal: defaultOrdinal,
    dayOfMonthOrdinalParse: defaultDayOfMonthOrdinalParse,
    relativeTime: defaultRelativeTime,

    months: defaultLocaleMonths,
    monthsShort: defaultLocaleMonthsShort,

    week: defaultLocaleWeek,

    weekdays: defaultLocaleWeekdays,
    weekdaysMin: defaultLocaleWeekdaysMin,
    weekdaysShort: defaultLocaleWeekdaysShort,

    meridiemParse: defaultLocaleMeridiemParse,
  };

  // internal storage for locale config files
  const locales = {};
  const localeFamilies = {};
  let globalLocale;

  function normalizeLocale(key) {
    return key ? key.toLowerCase().replace('_', '-') : key;
  }

  // pick the locale from the array
  // try ['en-au', 'en-gb'] as 'en-au', 'en-gb', 'en', as in move through the list trying each
  // substring from most specific to least, but move to the next array item if it's a more specific variant than the current root
  function chooseLocale(names) {
    let i = 0;
    let j; let next; let locale; let
      split;

    while (i < names.length) {
      split = normalizeLocale(names[i]).split('-');
      j = split.length;
      next = normalizeLocale(names[i + 1]);
      next = next ? next.split('-') : null;
      while (j > 0) {
        locale = loadLocale(split.slice(0, j).join('-'));
        if (locale) {
          return locale;
        }
        if (next && next.length >= j && compareArrays(split, next, true) >= j - 1) {
          // the next array item is better than a shallower substring of this one
          break;
        }
        j--;
      }
      i++;
    }
    return globalLocale;
  }

  function loadLocale(name) {
    let oldLocale = null;
    // TODO: Find a better way to register and load all the locales in Node
    if (!locales[name] && (typeof module !== 'undefined')
      && module && module.exports) {
      try {
        oldLocale = globalLocale._abbr;
        const aliasedRequire = require;
        aliasedRequire(`./locale/${name}`);
        getSetGlobalLocale(oldLocale);
      } catch (e) {}
    }
    return locales[name];
  }

  // This function will load locale and then set the global locale.  If
  // no arguments are passed in, it will simply return the current global
  // locale key.
  function getSetGlobalLocale(key, values) {
    let data;
    if (key) {
      if (isUndefined(values)) {
        data = getLocale(key);
      } else {
        data = defineLocale(key, values);
      }

      if (data) {
        // moment.duration._locale = moment._locale = data;
        globalLocale = data;
      } else if ((typeof console !== 'undefined') && console.warn) {
        // warn user if arguments are passed but the locale could not be set
        console.warn(`Locale ${key} not found. Did you forget to load it?`);
      }
    }

    return globalLocale._abbr;
  }

  function defineLocale(name, config) {
    if (config !== null) {
      let locale; let
        parentConfig = baseConfig;
      config.abbr = name;
      if (locales[name] != null) {
        deprecateSimple(
          'defineLocaleOverride',
          'use moment.updateLocale(localeName, config) to change '
          + 'an existing locale. moment.defineLocale(localeName, '
          + 'config) should only be used for creating a new locale '
          + 'See http://momentjs.com/guides/#/warnings/define-locale/ for more info.',
        );
        parentConfig = locales[name]._config;
      } else if (config.parentLocale != null) {
        if (locales[config.parentLocale] != null) {
          parentConfig = locales[config.parentLocale]._config;
        } else {
          locale = loadLocale(config.parentLocale);
          if (locale != null) {
            parentConfig = locale._config;
          } else {
            if (!localeFamilies[config.parentLocale]) {
              localeFamilies[config.parentLocale] = [];
            }
            localeFamilies[config.parentLocale].push({
              name,
              config,
            });
            return null;
          }
        }
      }
      locales[name] = new Locale(mergeConfigs(parentConfig, config));

      if (localeFamilies[name]) {
        localeFamilies[name].forEach((x) => {
          defineLocale(x.name, x.config);
        });
      }

      // backwards compat for now: also set the locale
      // make sure we set the locale AFTER all child locales have been
      // created, so we won't end up with the child locale set.
      getSetGlobalLocale(name);

      return locales[name];
    }
    // useful for testing
    delete locales[name];
    return null;
  }

  function updateLocale(name, config) {
    if (config != null) {
      let locale; let tmpLocale; let
        parentConfig = baseConfig;
      // MERGE
      tmpLocale = loadLocale(name);
      if (tmpLocale != null) {
        parentConfig = tmpLocale._config;
      }
      config = mergeConfigs(parentConfig, config);
      locale = new Locale(config);
      locale.parentLocale = locales[name];
      locales[name] = locale;

      // backwards compat for now: also set the locale
      getSetGlobalLocale(name);
    } else {
      // pass null for config to unupdate, useful for tests
      if (locales[name] != null) {
        if (locales[name].parentLocale != null) {
          locales[name] = locales[name].parentLocale;
        } else if (locales[name] != null) {
          delete locales[name];
        }
      }
    }
    return locales[name];
  }

  // returns locale data
  function getLocale(key) {
    let locale;

    if (key && key._locale && key._locale._abbr) {
      key = key._locale._abbr;
    }

    if (!key) {
      return globalLocale;
    }

    if (!isArray(key)) {
      // short-circuit everything else
      locale = loadLocale(key);
      if (locale) {
        return locale;
      }
      key = [key];
    }

    return chooseLocale(key);
  }

  function listLocales() {
    return keys(locales);
  }

  function checkOverflow(m) {
    let overflow;
    const a = m._a;

    if (a && getParsingFlags(m).overflow === -2) {
      overflow = a[MONTH] < 0 || a[MONTH] > 11 ? MONTH
        : a[DATE] < 1 || a[DATE] > daysInMonth(a[YEAR], a[MONTH]) ? DATE
          : a[HOUR] < 0 || a[HOUR] > 24 || (a[HOUR] === 24 && (a[MINUTE] !== 0 || a[SECOND] !== 0 || a[MILLISECOND] !== 0)) ? HOUR
            : a[MINUTE] < 0 || a[MINUTE] > 59 ? MINUTE
              : a[SECOND] < 0 || a[SECOND] > 59 ? SECOND
                : a[MILLISECOND] < 0 || a[MILLISECOND] > 999 ? MILLISECOND
                  : -1;

      if (getParsingFlags(m)._overflowDayOfYear && (overflow < YEAR || overflow > DATE)) {
        overflow = DATE;
      }
      if (getParsingFlags(m)._overflowWeeks && overflow === -1) {
        overflow = WEEK;
      }
      if (getParsingFlags(m)._overflowWeekday && overflow === -1) {
        overflow = WEEKDAY;
      }

      getParsingFlags(m).overflow = overflow;
    }

    return m;
  }

  // Pick the first defined of two or three arguments.
  function defaults(a, b, c) {
    if (a != null) {
      return a;
    }
    if (b != null) {
      return b;
    }
    return c;
  }

  function currentDateArray(config) {
    // hooks is actually the exported moment object
    const nowValue = new Date(hooks.now());
    if (config._useUTC) {
      return [nowValue.getUTCFullYear(), nowValue.getUTCMonth(), nowValue.getUTCDate()];
    }
    return [nowValue.getFullYear(), nowValue.getMonth(), nowValue.getDate()];
  }

  // convert an array to a date.
  // the array should mirror the parameters below
  // note: all values past the year are optional and will default to the lowest possible value.
  // [year, month, day , hour, minute, second, millisecond]
  function configFromArray(config) {
    let i; let date; const input = [];
    let currentDate; let expectedWeekday; let
      yearToUse;

    if (config._d) {
      return;
    }

    currentDate = currentDateArray(config);

    // compute day of the year from weeks and weekdays
    if (config._w && config._a[DATE] == null && config._a[MONTH] == null) {
      dayOfYearFromWeekInfo(config);
    }

    // if the day of the year is set, figure out what it is
    if (config._dayOfYear != null) {
      yearToUse = defaults(config._a[YEAR], currentDate[YEAR]);

      if (config._dayOfYear > daysInYear(yearToUse) || config._dayOfYear === 0) {
        getParsingFlags(config)._overflowDayOfYear = true;
      }

      date = createUTCDate(yearToUse, 0, config._dayOfYear);
      config._a[MONTH] = date.getUTCMonth();
      config._a[DATE] = date.getUTCDate();
    }

    // Default to current date.
    // * if no year, month, day of month are given, default to today
    // * if day of month is given, default month and year
    // * if month is given, default only year
    // * if year is given, don't default anything
    for (i = 0; i < 3 && config._a[i] == null; ++i) {
      config._a[i] = input[i] = currentDate[i];
    }

    // Zero out whatever was not defaulted, including time
    for (; i < 7; i++) {
      config._a[i] = input[i] = (config._a[i] == null) ? (i === 2 ? 1 : 0) : config._a[i];
    }

    // Check for 24:00:00.000
    if (config._a[HOUR] === 24
      && config._a[MINUTE] === 0
      && config._a[SECOND] === 0
      && config._a[MILLISECOND] === 0) {
      config._nextDay = true;
      config._a[HOUR] = 0;
    }

    config._d = (config._useUTC ? createUTCDate : createDate).apply(null, input);
    expectedWeekday = config._useUTC ? config._d.getUTCDay() : config._d.getDay();

    // Apply timezone offset from input. The actual utcOffset can be changed
    // with parseZone.
    if (config._tzm != null) {
      config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);
    }

    if (config._nextDay) {
      config._a[HOUR] = 24;
    }

    // check for mismatching day of week
    if (config._w && typeof config._w.d !== 'undefined' && config._w.d !== expectedWeekday) {
      getParsingFlags(config).weekdayMismatch = true;
    }
  }

  function dayOfYearFromWeekInfo(config) {
    let w; let weekYear; let week; let weekday; let dow; let doy; let temp; let
      weekdayOverflow;

    w = config._w;
    if (w.GG != null || w.W != null || w.E != null) {
      dow = 1;
      doy = 4;

      // TODO: We need to take the current isoWeekYear, but that depends on
      // how we interpret now (local, utc, fixed offset). So create
      // a now version of current config (take local/utc/offset flags, and
      // create now).
      weekYear = defaults(w.GG, config._a[YEAR], weekOfYear(createLocal(), 1, 4).year);
      week = defaults(w.W, 1);
      weekday = defaults(w.E, 1);
      if (weekday < 1 || weekday > 7) {
        weekdayOverflow = true;
      }
    } else {
      dow = config._locale._week.dow;
      doy = config._locale._week.doy;

      const curWeek = weekOfYear(createLocal(), dow, doy);

      weekYear = defaults(w.gg, config._a[YEAR], curWeek.year);

      // Default to current week.
      week = defaults(w.w, curWeek.week);

      if (w.d != null) {
        // weekday -- low day numbers are considered next week
        weekday = w.d;
        if (weekday < 0 || weekday > 6) {
          weekdayOverflow = true;
        }
      } else if (w.e != null) {
        // local weekday -- counting starts from beginning of week
        weekday = w.e + dow;
        if (w.e < 0 || w.e > 6) {
          weekdayOverflow = true;
        }
      } else {
        // default to beginning of week
        weekday = dow;
      }
    }
    if (week < 1 || week > weeksInYear(weekYear, dow, doy)) {
      getParsingFlags(config)._overflowWeeks = true;
    } else if (weekdayOverflow != null) {
      getParsingFlags(config)._overflowWeekday = true;
    } else {
      temp = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy);
      config._a[YEAR] = temp.year;
      config._dayOfYear = temp.dayOfYear;
    }
  }

  // iso 8601 regex
  // 0000-00-00 0000-W00 or 0000-W00-0 + T + 00 or 00:00 or 00:00:00 or 00:00:00.000 + +00:00 or +0000 or +00)
  const extendedIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/;
  const basicIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/;

  const tzRegex = /Z|[+-]\d\d(?::?\d\d)?/;

  const isoDates = [
    ['YYYYYY-MM-DD', /[+-]\d{6}-\d\d-\d\d/],
    ['YYYY-MM-DD', /\d{4}-\d\d-\d\d/],
    ['GGGG-[W]WW-E', /\d{4}-W\d\d-\d/],
    ['GGGG-[W]WW', /\d{4}-W\d\d/, false],
    ['YYYY-DDD', /\d{4}-\d{3}/],
    ['YYYY-MM', /\d{4}-\d\d/, false],
    ['YYYYYYMMDD', /[+-]\d{10}/],
    ['YYYYMMDD', /\d{8}/],
    // YYYYMM is NOT allowed by the standard
    ['GGGG[W]WWE', /\d{4}W\d{3}/],
    ['GGGG[W]WW', /\d{4}W\d{2}/, false],
    ['YYYYDDD', /\d{7}/],
  ];

  // iso time formats and regexes
  const isoTimes = [
    ['HH:mm:ss.SSSS', /\d\d:\d\d:\d\d\.\d+/],
    ['HH:mm:ss,SSSS', /\d\d:\d\d:\d\d,\d+/],
    ['HH:mm:ss', /\d\d:\d\d:\d\d/],
    ['HH:mm', /\d\d:\d\d/],
    ['HHmmss.SSSS', /\d\d\d\d\d\d\.\d+/],
    ['HHmmss,SSSS', /\d\d\d\d\d\d,\d+/],
    ['HHmmss', /\d\d\d\d\d\d/],
    ['HHmm', /\d\d\d\d/],
    ['HH', /\d\d/],
  ];

  const aspNetJsonRegex = /^\/?Date\((\-?\d+)/i;

  // date from iso format
  function configFromISO(config) {
    let i; let l;
    const string = config._i;
    const match = extendedIsoRegex.exec(string) || basicIsoRegex.exec(string);
    let allowTime; let dateFormat; let timeFormat; let
      tzFormat;

    if (match) {
      getParsingFlags(config).iso = true;

      for (i = 0, l = isoDates.length; i < l; i++) {
        if (isoDates[i][1].exec(match[1])) {
          dateFormat = isoDates[i][0];
          allowTime = isoDates[i][2] !== false;
          break;
        }
      }
      if (dateFormat == null) {
        config._isValid = false;
        return;
      }
      if (match[3]) {
        for (i = 0, l = isoTimes.length; i < l; i++) {
          if (isoTimes[i][1].exec(match[3])) {
            // match[2] should be 'T' or space
            timeFormat = (match[2] || ' ') + isoTimes[i][0];
            break;
          }
        }
        if (timeFormat == null) {
          config._isValid = false;
          return;
        }
      }
      if (!allowTime && timeFormat != null) {
        config._isValid = false;
        return;
      }
      if (match[4]) {
        if (tzRegex.exec(match[4])) {
          tzFormat = 'Z';
        } else {
          config._isValid = false;
          return;
        }
      }
      config._f = dateFormat + (timeFormat || '') + (tzFormat || '');
      configFromStringAndFormat(config);
    } else {
      config._isValid = false;
    }
  }

  // RFC 2822 regex: For details see https://tools.ietf.org/html/rfc2822#section-3.3
  const rfc2822 = /^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),?\s)?(\d{1,2})\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(\d{2,4})\s(\d\d):(\d\d)(?::(\d\d))?\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|([+-]\d{4}))$/;

  function extractFromRFC2822Strings(yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr) {
    const result = [
      untruncateYear(yearStr),
      defaultLocaleMonthsShort.indexOf(monthStr),
      parseInt(dayStr, 10),
      parseInt(hourStr, 10),
      parseInt(minuteStr, 10),
    ];

    if (secondStr) {
      result.push(parseInt(secondStr, 10));
    }

    return result;
  }

  function untruncateYear(yearStr) {
    const year = parseInt(yearStr, 10);
    if (year <= 49) {
      return 2000 + year;
    } if (year <= 999) {
      return 1900 + year;
    }
    return year;
  }

  function preprocessRFC2822(s) {
    // Remove comments and folding whitespace and replace multiple-spaces with a single space
    return s.replace(/\([^)]*\)|[\n\t]/g, ' ').replace(/(\s\s+)/g, ' ').replace(/^\s\s*/, '').replace(/\s\s*$/, '');
  }

  function checkWeekday(weekdayStr, parsedInput, config) {
    if (weekdayStr) {
      // TODO: Replace the vanilla JS Date object with an indepentent day-of-week check.
      const weekdayProvided = defaultLocaleWeekdaysShort.indexOf(weekdayStr);
      const weekdayActual = new Date(parsedInput[0], parsedInput[1], parsedInput[2]).getDay();
      if (weekdayProvided !== weekdayActual) {
        getParsingFlags(config).weekdayMismatch = true;
        config._isValid = false;
        return false;
      }
    }
    return true;
  }

  const obsOffsets = {
    UT: 0,
    GMT: 0,
    EDT: -4 * 60,
    EST: -5 * 60,
    CDT: -5 * 60,
    CST: -6 * 60,
    MDT: -6 * 60,
    MST: -7 * 60,
    PDT: -7 * 60,
    PST: -8 * 60,
  };

  function calculateOffset(obsOffset, militaryOffset, numOffset) {
    if (obsOffset) {
      return obsOffsets[obsOffset];
    } if (militaryOffset) {
      // the only allowed military tz is Z
      return 0;
    }
    const hm = parseInt(numOffset, 10);
    const m = hm % 100;
    const h = (hm - m) / 100;
    return h * 60 + m;
  }

  // date and time from ref 2822 format
  function configFromRFC2822(config) {
    const match = rfc2822.exec(preprocessRFC2822(config._i));
    if (match) {
      const parsedArray = extractFromRFC2822Strings(match[4], match[3], match[2], match[5], match[6], match[7]);
      if (!checkWeekday(match[1], parsedArray, config)) {
        return;
      }

      config._a = parsedArray;
      config._tzm = calculateOffset(match[8], match[9], match[10]);

      config._d = createUTCDate.apply(null, config._a);
      config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);

      getParsingFlags(config).rfc2822 = true;
    } else {
      config._isValid = false;
    }
  }

  // date from iso format or fallback
  function configFromString(config) {
    const matched = aspNetJsonRegex.exec(config._i);

    if (matched !== null) {
      config._d = new Date(+matched[1]);
      return;
    }

    configFromISO(config);
    if (config._isValid === false) {
      delete config._isValid;
    } else {
      return;
    }

    configFromRFC2822(config);
    if (config._isValid === false) {
      delete config._isValid;
    } else {
      return;
    }

    // Final attempt, use Input Fallback
    hooks.createFromInputFallback(config);
  }

  hooks.createFromInputFallback = deprecate(
    'value provided is not in a recognized RFC2822 or ISO format. moment construction falls back to js Date(), '
    + 'which is not reliable across all browsers and versions. Non RFC2822/ISO date formats are '
    + 'discouraged and will be removed in an upcoming major release. Please refer to '
    + 'http://momentjs.com/guides/#/warnings/js-date/ for more info.',
    (config) => {
      config._d = new Date(config._i + (config._useUTC ? ' UTC' : ''));
    },
  );

  // constant that refers to the ISO standard
  hooks.ISO_8601 = function () {};

  // constant that refers to the RFC 2822 form
  hooks.RFC_2822 = function () {};

  // date from string and format string
  function configFromStringAndFormat(config) {
    // TODO: Move this to another part of the creation flow to prevent circular deps
    if (config._f === hooks.ISO_8601) {
      configFromISO(config);
      return;
    }
    if (config._f === hooks.RFC_2822) {
      configFromRFC2822(config);
      return;
    }
    config._a = [];
    getParsingFlags(config).empty = true;

    // This array is used to make a Date, either with `new Date` or `Date.UTC`
    let string = `${config._i}`;
    let i; let parsedInput; let tokens; let token; let skipped;
    const stringLength = string.length;
    let totalParsedInputLength = 0;

    tokens = expandFormat(config._f, config._locale).match(formattingTokens) || [];

    for (i = 0; i < tokens.length; i++) {
      token = tokens[i];
      parsedInput = (string.match(getParseRegexForToken(token, config)) || [])[0];
      // console.log('token', token, 'parsedInput', parsedInput,
      //         'regex', getParseRegexForToken(token, config));
      if (parsedInput) {
        skipped = string.substr(0, string.indexOf(parsedInput));
        if (skipped.length > 0) {
          getParsingFlags(config).unusedInput.push(skipped);
        }
        string = string.slice(string.indexOf(parsedInput) + parsedInput.length);
        totalParsedInputLength += parsedInput.length;
      }
      // don't parse if it's not a known token
      if (formatTokenFunctions[token]) {
        if (parsedInput) {
          getParsingFlags(config).empty = false;
        } else {
          getParsingFlags(config).unusedTokens.push(token);
        }
        addTimeToArrayFromToken(token, parsedInput, config);
      } else if (config._strict && !parsedInput) {
        getParsingFlags(config).unusedTokens.push(token);
      }
    }

    // add remaining unparsed input length to the string
    getParsingFlags(config).charsLeftOver = stringLength - totalParsedInputLength;
    if (string.length > 0) {
      getParsingFlags(config).unusedInput.push(string);
    }

    // clear _12h flag if hour is <= 12
    if (config._a[HOUR] <= 12
      && getParsingFlags(config).bigHour === true
      && config._a[HOUR] > 0) {
      getParsingFlags(config).bigHour = undefined;
    }

    getParsingFlags(config).parsedDateParts = config._a.slice(0);
    getParsingFlags(config).meridiem = config._meridiem;
    // handle meridiem
    config._a[HOUR] = meridiemFixWrap(config._locale, config._a[HOUR], config._meridiem);

    configFromArray(config);
    checkOverflow(config);
  }

  function meridiemFixWrap(locale, hour, meridiem) {
    let isPm;

    if (meridiem == null) {
      // nothing to do
      return hour;
    }
    if (locale.meridiemHour != null) {
      return locale.meridiemHour(hour, meridiem);
    } if (locale.isPM != null) {
      // Fallback
      isPm = locale.isPM(meridiem);
      if (isPm && hour < 12) {
        hour += 12;
      }
      if (!isPm && hour === 12) {
        hour = 0;
      }
      return hour;
    }
    // this is not supposed to happen
    return hour;
  }

  // date from string and array of format strings
  function configFromStringAndArray(config) {
    let tempConfig;
    let bestMoment;

    let scoreToBeat;
    let i;
    let currentScore;

    if (config._f.length === 0) {
      getParsingFlags(config).invalidFormat = true;
      config._d = new Date(NaN);
      return;
    }

    for (i = 0; i < config._f.length; i++) {
      currentScore = 0;
      tempConfig = copyConfig({}, config);
      if (config._useUTC != null) {
        tempConfig._useUTC = config._useUTC;
      }
      tempConfig._f = config._f[i];
      configFromStringAndFormat(tempConfig);

      if (!isValid(tempConfig)) {
        continue;
      }

      // if there is any input that was not parsed add a penalty for that format
      currentScore += getParsingFlags(tempConfig).charsLeftOver;

      // or tokens
      currentScore += getParsingFlags(tempConfig).unusedTokens.length * 10;

      getParsingFlags(tempConfig).score = currentScore;

      if (scoreToBeat == null || currentScore < scoreToBeat) {
        scoreToBeat = currentScore;
        bestMoment = tempConfig;
      }
    }

    extend(config, bestMoment || tempConfig);
  }

  function configFromObject(config) {
    if (config._d) {
      return;
    }

    const i = normalizeObjectUnits(config._i);
    config._a = map([i.year, i.month, i.day || i.date, i.hour, i.minute, i.second, i.millisecond], (obj) => obj && parseInt(obj, 10));

    configFromArray(config);
  }

  function createFromConfig(config) {
    const res = new Moment(checkOverflow(prepareConfig(config)));
    if (res._nextDay) {
      // Adding is smart enough around DST
      res.add(1, 'd');
      res._nextDay = undefined;
    }

    return res;
  }

  function prepareConfig(config) {
    let input = config._i;
    const format = config._f;

    config._locale = config._locale || getLocale(config._l);

    if (input === null || (format === undefined && input === '')) {
      return createInvalid({ nullInput: true });
    }

    if (typeof input === 'string') {
      config._i = input = config._locale.preparse(input);
    }

    if (isMoment(input)) {
      return new Moment(checkOverflow(input));
    } if (isDate(input)) {
      config._d = input;
    } else if (isArray(format)) {
      configFromStringAndArray(config);
    } else if (format) {
      configFromStringAndFormat(config);
    } else {
      configFromInput(config);
    }

    if (!isValid(config)) {
      config._d = null;
    }

    return config;
  }

  function configFromInput(config) {
    const input = config._i;
    if (isUndefined(input)) {
      config._d = new Date(hooks.now());
    } else if (isDate(input)) {
      config._d = new Date(input.valueOf());
    } else if (typeof input === 'string') {
      configFromString(config);
    } else if (isArray(input)) {
      config._a = map(input.slice(0), (obj) => parseInt(obj, 10));
      configFromArray(config);
    } else if (isObject(input)) {
      configFromObject(config);
    } else if (isNumber(input)) {
      // from milliseconds
      config._d = new Date(input);
    } else {
      hooks.createFromInputFallback(config);
    }
  }

  function createLocalOrUTC(input, format, locale, strict, isUTC) {
    const c = {};

    if (locale === true || locale === false) {
      strict = locale;
      locale = undefined;
    }

    if ((isObject(input) && isObjectEmpty(input))
      || (isArray(input) && input.length === 0)) {
      input = undefined;
    }
    // object construction must be done this way.
    // https://github.com/moment/moment/issues/1423
    c._isAMomentObject = true;
    c._useUTC = c._isUTC = isUTC;
    c._l = locale;
    c._i = input;
    c._f = format;
    c._strict = strict;

    return createFromConfig(c);
  }

  function createLocal(input, format, locale, strict) {
    return createLocalOrUTC(input, format, locale, strict, false);
  }

  const prototypeMin = deprecate(
    'moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/',
    function () {
      const other = createLocal.apply(null, arguments);
      if (this.isValid() && other.isValid()) {
        return other < this ? this : other;
      }
      return createInvalid();
    },
  );

  const prototypeMax = deprecate(
    'moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/',
    function () {
      const other = createLocal.apply(null, arguments);
      if (this.isValid() && other.isValid()) {
        return other > this ? this : other;
      }
      return createInvalid();
    },
  );

  // Pick a moment m from moments so that m[fn](other) is true for all
  // other. This relies on the function fn to be transitive.
  //
  // moments should either be an array of moment objects or an array, whose
  // first element is an array of moment objects.
  function pickBy(fn, moments) {
    let res; let
      i;
    if (moments.length === 1 && isArray(moments[0])) {
      moments = moments[0];
    }
    if (!moments.length) {
      return createLocal();
    }
    res = moments[0];
    for (i = 1; i < moments.length; ++i) {
      if (!moments[i].isValid() || moments[i][fn](res)) {
        res = moments[i];
      }
    }
    return res;
  }

  // TODO: Use [].sort instead?
  function min() {
    const args = [].slice.call(arguments, 0);

    return pickBy('isBefore', args);
  }

  function max() {
    const args = [].slice.call(arguments, 0);

    return pickBy('isAfter', args);
  }

  const now = function () {
    return Date.now ? Date.now() : +(new Date());
  };

  const ordering = ['year', 'quarter', 'month', 'week', 'day', 'hour', 'minute', 'second', 'millisecond'];

  function isDurationValid(m) {
    for (const key in m) {
      if (!(indexOf.call(ordering, key) !== -1 && (m[key] == null || !isNaN(m[key])))) {
        return false;
      }
    }

    let unitHasDecimal = false;
    for (let i = 0; i < ordering.length; ++i) {
      if (m[ordering[i]]) {
        if (unitHasDecimal) {
          return false; // only allow non-integers for smallest unit
        }
        if (parseFloat(m[ordering[i]]) !== toInt(m[ordering[i]])) {
          unitHasDecimal = true;
        }
      }
    }

    return true;
  }

  function isValid$1() {
    return this._isValid;
  }

  function createInvalid$1() {
    return createDuration(NaN);
  }

  function Duration(duration) {
    const normalizedInput = normalizeObjectUnits(duration);
    const years = normalizedInput.year || 0;
    const quarters = normalizedInput.quarter || 0;
    const months = normalizedInput.month || 0;
    const weeks = normalizedInput.week || normalizedInput.isoWeek || 0;
    const days = normalizedInput.day || 0;
    const hours = normalizedInput.hour || 0;
    const minutes = normalizedInput.minute || 0;
    const seconds = normalizedInput.second || 0;
    const milliseconds = normalizedInput.millisecond || 0;

    this._isValid = isDurationValid(normalizedInput);

    // representation for dateAddRemove
    this._milliseconds = +milliseconds
      + seconds * 1e3 // 1000
      + minutes * 6e4 // 1000 * 60
      + hours * 1000 * 60 * 60; // using 1000 * 60 * 60 instead of 36e5 to avoid floating point rounding errors https://github.com/moment/moment/issues/2978
    // Because of dateAddRemove treats 24 hours as different from a
    // day when working around DST, we need to store them separately
    this._days = +days
      + weeks * 7;
    // It is impossible to translate months into days without knowing
    // which months you are are talking about, so we have to store
    // it separately.
    this._months = +months
      + quarters * 3
      + years * 12;

    this._data = {};

    this._locale = getLocale();

    this._bubble();
  }

  function isDuration(obj) {
    return obj instanceof Duration;
  }

  function absRound(number) {
    if (number < 0) {
      return Math.round(-1 * number) * -1;
    }
    return Math.round(number);
  }

  // FORMATTING

  function offset(token, separator) {
    addFormatToken(token, 0, 0, function () {
      let offset = this.utcOffset();
      let sign = '+';
      if (offset < 0) {
        offset = -offset;
        sign = '-';
      }
      return sign + zeroFill(~~(offset / 60), 2) + separator + zeroFill(~~(offset) % 60, 2);
    });
  }

  offset('Z', ':');
  offset('ZZ', '');

  // PARSING

  addRegexToken('Z', matchShortOffset);
  addRegexToken('ZZ', matchShortOffset);
  addParseToken(['Z', 'ZZ'], (input, array, config) => {
    config._useUTC = true;
    config._tzm = offsetFromString(matchShortOffset, input);
  });

  // HELPERS

  // timezone chunker
  // '+10:00' > ['10',  '00']
  // '-1530'  > ['-15', '30']
  const chunkOffset = /([\+\-]|\d\d)/gi;

  function offsetFromString(matcher, string) {
    const matches = (string || '').match(matcher);

    if (matches === null) {
      return null;
    }

    const chunk = matches[matches.length - 1] || [];
    const parts = (`${chunk}`).match(chunkOffset) || ['-', 0, 0];
    const minutes = +(parts[1] * 60) + toInt(parts[2]);

    return minutes === 0
      ? 0
      : parts[0] === '+' ? minutes : -minutes;
  }

  // Return a moment from input, that is local/utc/zone equivalent to model.
  function cloneWithOffset(input, model) {
    let res; let
      diff;
    if (model._isUTC) {
      res = model.clone();
      diff = (isMoment(input) || isDate(input) ? input.valueOf() : createLocal(input).valueOf()) - res.valueOf();
      // Use low-level api, because this fn is low-level api.
      res._d.setTime(res._d.valueOf() + diff);
      hooks.updateOffset(res, false);
      return res;
    }
    return createLocal(input).local();
  }

  function getDateOffset(m) {
    // On Firefox.24 Date#getTimezoneOffset returns a floating point.
    // https://github.com/moment/moment/pull/1871
    return -Math.round(m._d.getTimezoneOffset() / 15) * 15;
  }

  // HOOKS

  // This function will be called whenever a moment is mutated.
  // It is intended to keep the offset in sync with the timezone.
  hooks.updateOffset = function () {};

  // MOMENTS

  // keepLocalTime = true means only change the timezone, without
  // affecting the local hour. So 5:31:26 +0300 --[utcOffset(2, true)]-->
  // 5:31:26 +0200 It is possible that 5:31:26 doesn't exist with offset
  // +0200, so we adjust the time as needed, to be valid.
  //
  // Keeping the time actually adds/subtracts (one hour)
  // from the actual represented time. That is why we call updateOffset
  // a second time. In case it wants us to change the offset again
  // _changeInProgress == true case, then we have to adjust, because
  // there is no such time in the given timezone.
  function getSetOffset(input, keepLocalTime, keepMinutes) {
    const offset = this._offset || 0;
    let localAdjust;
    if (!this.isValid()) {
      return input != null ? this : NaN;
    }
    if (input != null) {
      if (typeof input === 'string') {
        input = offsetFromString(matchShortOffset, input);
        if (input === null) {
          return this;
        }
      } else if (Math.abs(input) < 16 && !keepMinutes) {
        input *= 60;
      }
      if (!this._isUTC && keepLocalTime) {
        localAdjust = getDateOffset(this);
      }
      this._offset = input;
      this._isUTC = true;
      if (localAdjust != null) {
        this.add(localAdjust, 'm');
      }
      if (offset !== input) {
        if (!keepLocalTime || this._changeInProgress) {
          addSubtract(this, createDuration(input - offset, 'm'), 1, false);
        } else if (!this._changeInProgress) {
          this._changeInProgress = true;
          hooks.updateOffset(this, true);
          this._changeInProgress = null;
        }
      }
      return this;
    }
    return this._isUTC ? offset : getDateOffset(this);
  }

  function getSetZone(input, keepLocalTime) {
    if (input != null) {
      if (typeof input !== 'string') {
        input = -input;
      }

      this.utcOffset(input, keepLocalTime);

      return this;
    }
    return -this.utcOffset();
  }

  function setOffsetToUTC(keepLocalTime) {
    return this.utcOffset(0, keepLocalTime);
  }

  function setOffsetToLocal(keepLocalTime) {
    if (this._isUTC) {
      this.utcOffset(0, keepLocalTime);
      this._isUTC = false;

      if (keepLocalTime) {
        this.subtract(getDateOffset(this), 'm');
      }
    }
    return this;
  }

  function setOffsetToParsedOffset() {
    if (this._tzm != null) {
      this.utcOffset(this._tzm, false, true);
    } else if (typeof this._i === 'string') {
      const tZone = offsetFromString(matchOffset, this._i);
      if (tZone != null) {
        this.utcOffset(tZone);
      } else {
        this.utcOffset(0, true);
      }
    }
    return this;
  }

  function hasAlignedHourOffset(input) {
    if (!this.isValid()) {
      return false;
    }
    input = input ? createLocal(input).utcOffset() : 0;

    return (this.utcOffset() - input) % 60 === 0;
  }

  function isDaylightSavingTime() {
    return (
      this.utcOffset() > this.clone().month(0).utcOffset()
      || this.utcOffset() > this.clone().month(5).utcOffset()
    );
  }

  function isDaylightSavingTimeShifted() {
    if (!isUndefined(this._isDSTShifted)) {
      return this._isDSTShifted;
    }

    let c = {};

    copyConfig(c, this);
    c = prepareConfig(c);

    if (c._a) {
      const other = c._isUTC ? createUTC(c._a) : createLocal(c._a);
      this._isDSTShifted = this.isValid()
        && compareArrays(c._a, other.toArray()) > 0;
    } else {
      this._isDSTShifted = false;
    }

    return this._isDSTShifted;
  }

  function isLocal() {
    return this.isValid() ? !this._isUTC : false;
  }

  function isUtcOffset() {
    return this.isValid() ? this._isUTC : false;
  }

  function isUtc() {
    return this.isValid() ? this._isUTC && this._offset === 0 : false;
  }

  // ASP.NET json date format regex
  const aspNetRegex = /^(\-|\+)?(?:(\d*)[. ])?(\d+)\:(\d+)(?:\:(\d+)(\.\d*)?)?$/;

  // from http://docs.closure-library.googlecode.com/git/closure_goog_date_date.js.source.html
  // somewhat more in line with 4.4.3.2 2004 spec, but allows decimal anywhere
  // and further modified to allow for strings containing both week and day
  const isoRegex = /^(-|\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;

  function createDuration(input, key) {
    let duration = input;
    // matching against regexp is expensive, do it on demand
    let match = null;
    let sign;
    let ret;
    let diffRes;

    if (isDuration(input)) {
      duration = {
        ms: input._milliseconds,
        d: input._days,
        M: input._months,
      };
    } else if (isNumber(input)) {
      duration = {};
      if (key) {
        duration[key] = input;
      } else {
        duration.milliseconds = input;
      }
    } else if (match = aspNetRegex.exec(input)) {
      sign = (match[1] === '-') ? -1 : 1;
      duration = {
        y: 0,
        d: toInt(match[DATE]) * sign,
        h: toInt(match[HOUR]) * sign,
        m: toInt(match[MINUTE]) * sign,
        s: toInt(match[SECOND]) * sign,
        ms: toInt(absRound(match[MILLISECOND] * 1000)) * sign, // the millisecond decimal point is included in the match
      };
    } else if (match = isoRegex.exec(input)) {
      sign = (match[1] === '-') ? -1 : 1;
      duration = {
        y: parseIso(match[2], sign),
        M: parseIso(match[3], sign),
        w: parseIso(match[4], sign),
        d: parseIso(match[5], sign),
        h: parseIso(match[6], sign),
        m: parseIso(match[7], sign),
        s: parseIso(match[8], sign),
      };
    } else if (duration == null) { // checks for null or undefined
      duration = {};
    } else if (typeof duration === 'object' && ('from' in duration || 'to' in duration)) {
      diffRes = momentsDifference(createLocal(duration.from), createLocal(duration.to));

      duration = {};
      duration.ms = diffRes.milliseconds;
      duration.M = diffRes.months;
    }

    ret = new Duration(duration);

    if (isDuration(input) && hasOwnProp(input, '_locale')) {
      ret._locale = input._locale;
    }

    return ret;
  }

  createDuration.fn = Duration.prototype;
  createDuration.invalid = createInvalid$1;

  function parseIso(inp, sign) {
    // We'd normally use ~~inp for this, but unfortunately it also
    // converts floats to ints.
    // inp may be undefined, so careful calling replace on it.
    const res = inp && parseFloat(inp.replace(',', '.'));
    // apply sign while we're at it
    return (isNaN(res) ? 0 : res) * sign;
  }

  function positiveMomentsDifference(base, other) {
    const res = {};

    res.months = other.month() - base.month()
      + (other.year() - base.year()) * 12;
    if (base.clone().add(res.months, 'M').isAfter(other)) {
      --res.months;
    }

    res.milliseconds = +other - +(base.clone().add(res.months, 'M'));

    return res;
  }

  function momentsDifference(base, other) {
    let res;
    if (!(base.isValid() && other.isValid())) {
      return { milliseconds: 0, months: 0 };
    }

    other = cloneWithOffset(other, base);
    if (base.isBefore(other)) {
      res = positiveMomentsDifference(base, other);
    } else {
      res = positiveMomentsDifference(other, base);
      res.milliseconds = -res.milliseconds;
      res.months = -res.months;
    }

    return res;
  }

  // TODO: remove 'name' arg after deprecation is removed
  function createAdder(direction, name) {
    return function (val, period) {
      let dur; let
        tmp;
      // invert the arguments, but complain about it
      if (period !== null && !isNaN(+period)) {
        deprecateSimple(name, `moment().${name}(period, number) is deprecated. Please use moment().${name}(number, period). `
          + 'See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info.');
        tmp = val;
        val = period;
        period = tmp;
      }

      val = typeof val === 'string' ? +val : val;
      dur = createDuration(val, period);
      addSubtract(this, dur, direction);
      return this;
    };
  }

  function addSubtract(mom, duration, isAdding, updateOffset) {
    const milliseconds = duration._milliseconds;
    const days = absRound(duration._days);
    const months = absRound(duration._months);

    if (!mom.isValid()) {
      // No op
      return;
    }

    updateOffset = updateOffset == null ? true : updateOffset;

    if (months) {
      setMonth(mom, get(mom, 'Month') + months * isAdding);
    }
    if (days) {
      set$1(mom, 'Date', get(mom, 'Date') + days * isAdding);
    }
    if (milliseconds) {
      mom._d.setTime(mom._d.valueOf() + milliseconds * isAdding);
    }
    if (updateOffset) {
      hooks.updateOffset(mom, days || months);
    }
  }

  const add = createAdder(1, 'add');
  const subtract = createAdder(-1, 'subtract');

  function getCalendarFormat(myMoment, now) {
    const diff = myMoment.diff(now, 'days', true);
    return diff < -6 ? 'sameElse'
      : diff < -1 ? 'lastWeek'
        : diff < 0 ? 'lastDay'
          : diff < 1 ? 'sameDay'
            : diff < 2 ? 'nextDay'
              : diff < 7 ? 'nextWeek' : 'sameElse';
  }

  function calendar$1(time, formats) {
    // We want to compare the start of today, vs this.
    // Getting start-of-today depends on whether we're local/utc/offset or not.
    const now = time || createLocal();
    const sod = cloneWithOffset(now, this).startOf('day');
    const format = hooks.calendarFormat(this, sod) || 'sameElse';

    const output = formats && (isFunction(formats[format]) ? formats[format].call(this, now) : formats[format]);

    return this.format(output || this.localeData().calendar(format, this, createLocal(now)));
  }

  function clone() {
    return new Moment(this);
  }

  function isAfter(input, units) {
    const localInput = isMoment(input) ? input : createLocal(input);
    if (!(this.isValid() && localInput.isValid())) {
      return false;
    }
    units = normalizeUnits(units) || 'millisecond';
    if (units === 'millisecond') {
      return this.valueOf() > localInput.valueOf();
    }
    return localInput.valueOf() < this.clone().startOf(units).valueOf();
  }

  function isBefore(input, units) {
    const localInput = isMoment(input) ? input : createLocal(input);
    if (!(this.isValid() && localInput.isValid())) {
      return false;
    }
    units = normalizeUnits(units) || 'millisecond';
    if (units === 'millisecond') {
      return this.valueOf() < localInput.valueOf();
    }
    return this.clone().endOf(units).valueOf() < localInput.valueOf();
  }

  function isBetween(from, to, units, inclusivity) {
    const localFrom = isMoment(from) ? from : createLocal(from);
    const localTo = isMoment(to) ? to : createLocal(to);
    if (!(this.isValid() && localFrom.isValid() && localTo.isValid())) {
      return false;
    }
    inclusivity = inclusivity || '()';
    return (inclusivity[0] === '(' ? this.isAfter(localFrom, units) : !this.isBefore(localFrom, units))
      && (inclusivity[1] === ')' ? this.isBefore(localTo, units) : !this.isAfter(localTo, units));
  }

  function isSame(input, units) {
    const localInput = isMoment(input) ? input : createLocal(input);
    let inputMs;
    if (!(this.isValid() && localInput.isValid())) {
      return false;
    }
    units = normalizeUnits(units) || 'millisecond';
    if (units === 'millisecond') {
      return this.valueOf() === localInput.valueOf();
    }
    inputMs = localInput.valueOf();
    return this.clone().startOf(units).valueOf() <= inputMs && inputMs <= this.clone().endOf(units).valueOf();
  }

  function isSameOrAfter(input, units) {
    return this.isSame(input, units) || this.isAfter(input, units);
  }

  function isSameOrBefore(input, units) {
    return this.isSame(input, units) || this.isBefore(input, units);
  }

  function diff(input, units, asFloat) {
    let that;
    let zoneDelta;
    let output;

    if (!this.isValid()) {
      return NaN;
    }

    that = cloneWithOffset(input, this);

    if (!that.isValid()) {
      return NaN;
    }

    zoneDelta = (that.utcOffset() - this.utcOffset()) * 6e4;

    units = normalizeUnits(units);

    switch (units) {
      case 'year':
        output = monthDiff(this, that) / 12;
        break;
      case 'month':
        output = monthDiff(this, that);
        break;
      case 'quarter':
        output = monthDiff(this, that) / 3;
        break;
      case 'second':
        output = (this - that) / 1e3;
        break; // 1000
      case 'minute':
        output = (this - that) / 6e4;
        break; // 1000 * 60
      case 'hour':
        output = (this - that) / 36e5;
        break; // 1000 * 60 * 60
      case 'day':
        output = (this - that - zoneDelta) / 864e5;
        break; // 1000 * 60 * 60 * 24, negate dst
      case 'week':
        output = (this - that - zoneDelta) / 6048e5;
        break; // 1000 * 60 * 60 * 24 * 7, negate dst
      default:
        output = this - that;
    }

    return asFloat ? output : absFloor(output);
  }

  function monthDiff(a, b) {
    // difference in months
    const wholeMonthDiff = ((b.year() - a.year()) * 12) + (b.month() - a.month());
    // b is in (anchor - 1 month, anchor + 1 month)
    const anchor = a.clone().add(wholeMonthDiff, 'months');
    let anchor2; let
      adjust;

    if (b - anchor < 0) {
      anchor2 = a.clone().add(wholeMonthDiff - 1, 'months');
      // linear across the month
      adjust = (b - anchor) / (anchor - anchor2);
    } else {
      anchor2 = a.clone().add(wholeMonthDiff + 1, 'months');
      // linear across the month
      adjust = (b - anchor) / (anchor2 - anchor);
    }

    // check for negative zero, return zero if negative zero
    return -(wholeMonthDiff + adjust) || 0;
  }

  hooks.defaultFormat = 'YYYY-MM-DDTHH:mm:ssZ';
  hooks.defaultFormatUtc = 'YYYY-MM-DDTHH:mm:ss[Z]';

  function toString() {
    return this.clone().locale('en').format('ddd MMM DD YYYY HH:mm:ss [GMT]ZZ');
  }

  function toISOString(keepOffset) {
    if (!this.isValid()) {
      return null;
    }
    const utc = keepOffset !== true;
    const m = utc ? this.clone().utc() : this;
    if (m.year() < 0 || m.year() > 9999) {
      return formatMoment(m, utc ? 'YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]' : 'YYYYYY-MM-DD[T]HH:mm:ss.SSSZ');
    }
    if (isFunction(Date.prototype.toISOString)) {
      // native implementation is ~50x faster, use it when we can
      if (utc) {
        return this.toDate().toISOString();
      }
      return new Date(this.valueOf() + this.utcOffset() * 60 * 1000).toISOString().replace('Z', formatMoment(m, 'Z'));
    }
    return formatMoment(m, utc ? 'YYYY-MM-DD[T]HH:mm:ss.SSS[Z]' : 'YYYY-MM-DD[T]HH:mm:ss.SSSZ');
  }

  /**
   * Return a human readable representation of a moment that can
   * also be evaluated to get a new moment which is the same
   *
   * @link https://nodejs.org/dist/latest/docs/api/util.html#util_custom_inspect_function_on_objects
   */
  function inspect() {
    if (!this.isValid()) {
      return `moment.invalid(/* ${this._i} */)`;
    }
    let func = 'moment';
    let zone = '';
    if (!this.isLocal()) {
      func = this.utcOffset() === 0 ? 'moment.utc' : 'moment.parseZone';
      zone = 'Z';
    }
    const prefix = `[${func}("]`;
    const year = (this.year() >= 0 && this.year() <= 9999) ? 'YYYY' : 'YYYYYY';
    const datetime = '-MM-DD[T]HH:mm:ss.SSS';
    const suffix = `${zone}[")]`;

    return this.format(prefix + year + datetime + suffix);
  }

  function format(inputString) {
    if (!inputString) {
      inputString = this.isUtc() ? hooks.defaultFormatUtc : hooks.defaultFormat;
    }
    const output = formatMoment(this, inputString);
    return this.localeData().postformat(output);
  }

  function from(time, withoutSuffix) {
    if (this.isValid()
      && ((isMoment(time) && time.isValid())
        || createLocal(time).isValid())) {
      return createDuration({ to: this, from: time }).locale(this.locale()).humanize(!withoutSuffix);
    }
    return this.localeData().invalidDate();
  }

  function fromNow(withoutSuffix) {
    return this.from(createLocal(), withoutSuffix);
  }

  function to(time, withoutSuffix) {
    if (this.isValid()
      && ((isMoment(time) && time.isValid())
        || createLocal(time).isValid())) {
      return createDuration({ from: this, to: time }).locale(this.locale()).humanize(!withoutSuffix);
    }
    return this.localeData().invalidDate();
  }

  function toNow(withoutSuffix) {
    return this.to(createLocal(), withoutSuffix);
  }

  // If passed a locale key, it will set the locale for this
  // instance.  Otherwise, it will return the locale configuration
  // variables for this instance.
  function locale(key) {
    let newLocaleData;

    if (key === undefined) {
      return this._locale._abbr;
    }
    newLocaleData = getLocale(key);
    if (newLocaleData != null) {
      this._locale = newLocaleData;
    }
    return this;
  }

  const lang = deprecate(
    'moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.',
    function (key) {
      if (key === undefined) {
        return this.localeData();
      }
      return this.locale(key);
    },
  );

  function localeData() {
    return this._locale;
  }

  const MS_PER_SECOND = 1000;
  const MS_PER_MINUTE = 60 * MS_PER_SECOND;
  const MS_PER_HOUR = 60 * MS_PER_MINUTE;
  const MS_PER_400_YEARS = (365 * 400 + 97) * 24 * MS_PER_HOUR;

  // actual modulo - handles negative numbers (for dates before 1970):
  function mod$1(dividend, divisor) {
    return (dividend % divisor + divisor) % divisor;
  }

  function localStartOfDate(y, m, d) {
    // the date constructor remaps years 0-99 to 1900-1999
    if (y < 100 && y >= 0) {
      // preserve leap years using a full 400 year cycle, then reset
      return new Date(y + 400, m, d) - MS_PER_400_YEARS;
    }
    return new Date(y, m, d).valueOf();
  }

  function utcStartOfDate(y, m, d) {
    // Date.UTC remaps years 0-99 to 1900-1999
    if (y < 100 && y >= 0) {
      // preserve leap years using a full 400 year cycle, then reset
      return Date.UTC(y + 400, m, d) - MS_PER_400_YEARS;
    }
    return Date.UTC(y, m, d);
  }

  function startOf(units) {
    let time;
    units = normalizeUnits(units);
    if (units === undefined || units === 'millisecond' || !this.isValid()) {
      return this;
    }

    const startOfDate = this._isUTC ? utcStartOfDate : localStartOfDate;

    switch (units) {
      case 'year':
        time = startOfDate(this.year(), 0, 1);
        break;
      case 'quarter':
        time = startOfDate(this.year(), this.month() - this.month() % 3, 1);
        break;
      case 'month':
        time = startOfDate(this.year(), this.month(), 1);
        break;
      case 'week':
        time = startOfDate(this.year(), this.month(), this.date() - this.weekday());
        break;
      case 'isoWeek':
        time = startOfDate(this.year(), this.month(), this.date() - (this.isoWeekday() - 1));
        break;
      case 'day':
      case 'date':
        time = startOfDate(this.year(), this.month(), this.date());
        break;
      case 'hour':
        time = this._d.valueOf();
        time -= mod$1(time + (this._isUTC ? 0 : this.utcOffset() * MS_PER_MINUTE), MS_PER_HOUR);
        break;
      case 'minute':
        time = this._d.valueOf();
        time -= mod$1(time, MS_PER_MINUTE);
        break;
      case 'second':
        time = this._d.valueOf();
        time -= mod$1(time, MS_PER_SECOND);
        break;
    }

    this._d.setTime(time);
    hooks.updateOffset(this, true);
    return this;
  }

  function endOf(units) {
    let time;
    units = normalizeUnits(units);
    if (units === undefined || units === 'millisecond' || !this.isValid()) {
      return this;
    }

    const startOfDate = this._isUTC ? utcStartOfDate : localStartOfDate;

    switch (units) {
      case 'year':
        time = startOfDate(this.year() + 1, 0, 1) - 1;
        break;
      case 'quarter':
        time = startOfDate(this.year(), this.month() - this.month() % 3 + 3, 1) - 1;
        break;
      case 'month':
        time = startOfDate(this.year(), this.month() + 1, 1) - 1;
        break;
      case 'week':
        time = startOfDate(this.year(), this.month(), this.date() - this.weekday() + 7) - 1;
        break;
      case 'isoWeek':
        time = startOfDate(this.year(), this.month(), this.date() - (this.isoWeekday() - 1) + 7) - 1;
        break;
      case 'day':
      case 'date':
        time = startOfDate(this.year(), this.month(), this.date() + 1) - 1;
        break;
      case 'hour':
        time = this._d.valueOf();
        time += MS_PER_HOUR - mod$1(time + (this._isUTC ? 0 : this.utcOffset() * MS_PER_MINUTE), MS_PER_HOUR) - 1;
        break;
      case 'minute':
        time = this._d.valueOf();
        time += MS_PER_MINUTE - mod$1(time, MS_PER_MINUTE) - 1;
        break;
      case 'second':
        time = this._d.valueOf();
        time += MS_PER_SECOND - mod$1(time, MS_PER_SECOND) - 1;
        break;
    }

    this._d.setTime(time);
    hooks.updateOffset(this, true);
    return this;
  }

  function valueOf() {
    return this._d.valueOf() - ((this._offset || 0) * 60000);
  }

  function unix() {
    return Math.floor(this.valueOf() / 1000);
  }

  function toDate() {
    return new Date(this.valueOf());
  }

  function toArray() {
    const m = this;
    return [m.year(), m.month(), m.date(), m.hour(), m.minute(), m.second(), m.millisecond()];
  }

  function toObject() {
    const m = this;
    return {
      years: m.year(),
      months: m.month(),
      date: m.date(),
      hours: m.hours(),
      minutes: m.minutes(),
      seconds: m.seconds(),
      milliseconds: m.milliseconds(),
    };
  }

  function toJSON() {
    // new Date(NaN).toJSON() === null
    return this.isValid() ? this.toISOString() : null;
  }

  function isValid$2() {
    return isValid(this);
  }

  function parsingFlags() {
    return extend({}, getParsingFlags(this));
  }

  function invalidAt() {
    return getParsingFlags(this).overflow;
  }

  function creationData() {
    return {
      input: this._i,
      format: this._f,
      locale: this._locale,
      isUTC: this._isUTC,
      strict: this._strict,
    };
  }

  // FORMATTING

  addFormatToken(0, ['gg', 2], 0, function () {
    return this.weekYear() % 100;
  });

  addFormatToken(0, ['GG', 2], 0, function () {
    return this.isoWeekYear() % 100;
  });

  function addWeekYearFormatToken(token, getter) {
    addFormatToken(0, [token, token.length], 0, getter);
  }

  addWeekYearFormatToken('gggg', 'weekYear');
  addWeekYearFormatToken('ggggg', 'weekYear');
  addWeekYearFormatToken('GGGG', 'isoWeekYear');
  addWeekYearFormatToken('GGGGG', 'isoWeekYear');

  // ALIASES

  addUnitAlias('weekYear', 'gg');
  addUnitAlias('isoWeekYear', 'GG');

  // PRIORITY

  addUnitPriority('weekYear', 1);
  addUnitPriority('isoWeekYear', 1);

  // PARSING

  addRegexToken('G', matchSigned);
  addRegexToken('g', matchSigned);
  addRegexToken('GG', match1to2, match2);
  addRegexToken('gg', match1to2, match2);
  addRegexToken('GGGG', match1to4, match4);
  addRegexToken('gggg', match1to4, match4);
  addRegexToken('GGGGG', match1to6, match6);
  addRegexToken('ggggg', match1to6, match6);

  addWeekParseToken(['gggg', 'ggggg', 'GGGG', 'GGGGG'], (input, week, config, token) => {
    week[token.substr(0, 2)] = toInt(input);
  });

  addWeekParseToken(['gg', 'GG'], (input, week, config, token) => {
    week[token] = hooks.parseTwoDigitYear(input);
  });

  // MOMENTS

  function getSetWeekYear(input) {
    return getSetWeekYearHelper.call(
      this,
      input,
      this.week(),
      this.weekday(),
      this.localeData()._week.dow,
      this.localeData()._week.doy,
    );
  }

  function getSetISOWeekYear(input) {
    return getSetWeekYearHelper.call(
      this,
      input,

      this.isoWeek(),

      this.isoWeekday(),

      1,

      4,
    );
  }

  function getISOWeeksInYear() {
    return weeksInYear(this.year(), 1, 4);
  }

  function getWeeksInYear() {
    const weekInfo = this.localeData()._week;
    return weeksInYear(this.year(), weekInfo.dow, weekInfo.doy);
  }

  function getSetWeekYearHelper(input, week, weekday, dow, doy) {
    let weeksTarget;
    if (input == null) {
      return weekOfYear(this, dow, doy).year;
    }
    weeksTarget = weeksInYear(input, dow, doy);
    if (week > weeksTarget) {
      week = weeksTarget;
    }
    return setWeekAll.call(this, input, week, weekday, dow, doy);
  }

  function setWeekAll(weekYear, week, weekday, dow, doy) {
    const dayOfYearData = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy);
    const date = createUTCDate(dayOfYearData.year, 0, dayOfYearData.dayOfYear);

    this.year(date.getUTCFullYear());
    this.month(date.getUTCMonth());
    this.date(date.getUTCDate());
    return this;
  }

  // FORMATTING

  addFormatToken('Q', 0, 'Qo', 'quarter');

  // ALIASES

  addUnitAlias('quarter', 'Q');

  // PRIORITY

  addUnitPriority('quarter', 7);

  // PARSING

  addRegexToken('Q', match1);
  addParseToken('Q', (input, array) => {
    array[MONTH] = (toInt(input) - 1) * 3;
  });

  // MOMENTS

  function getSetQuarter(input) {
    return input == null ? Math.ceil((this.month() + 1) / 3) : this.month((input - 1) * 3 + this.month() % 3);
  }

  // FORMATTING

  addFormatToken('D', ['DD', 2], 'Do', 'date');

  // ALIASES

  addUnitAlias('date', 'D');

  // PRIORITY
  addUnitPriority('date', 9);

  // PARSING

  addRegexToken('D', match1to2);
  addRegexToken('DD', match1to2, match2);
  addRegexToken('Do', (isStrict, locale) =>
    // TODO: Remove "ordinalParse" fallback in next major release.
    (isStrict
      ? (locale._dayOfMonthOrdinalParse || locale._ordinalParse)
      : locale._dayOfMonthOrdinalParseLenient));

  addParseToken(['D', 'DD'], DATE);
  addParseToken('Do', (input, array) => {
    array[DATE] = toInt(input.match(match1to2)[0]);
  });

  // MOMENTS

  const getSetDayOfMonth = makeGetSet('Date', true);

  // FORMATTING

  addFormatToken('DDD', ['DDDD', 3], 'DDDo', 'dayOfYear');

  // ALIASES

  addUnitAlias('dayOfYear', 'DDD');

  // PRIORITY
  addUnitPriority('dayOfYear', 4);

  // PARSING

  addRegexToken('DDD', match1to3);
  addRegexToken('DDDD', match3);
  addParseToken(['DDD', 'DDDD'], (input, array, config) => {
    config._dayOfYear = toInt(input);
  });

  // HELPERS

  // MOMENTS

  function getSetDayOfYear(input) {
    const dayOfYear = Math.round((this.clone().startOf('day') - this.clone().startOf('year')) / 864e5) + 1;
    return input == null ? dayOfYear : this.add((input - dayOfYear), 'd');
  }

  // FORMATTING

  addFormatToken('m', ['mm', 2], 0, 'minute');

  // ALIASES

  addUnitAlias('minute', 'm');

  // PRIORITY

  addUnitPriority('minute', 14);

  // PARSING

  addRegexToken('m', match1to2);
  addRegexToken('mm', match1to2, match2);
  addParseToken(['m', 'mm'], MINUTE);

  // MOMENTS

  const getSetMinute = makeGetSet('Minutes', false);

  // FORMATTING

  addFormatToken('s', ['ss', 2], 0, 'second');

  // ALIASES

  addUnitAlias('second', 's');

  // PRIORITY

  addUnitPriority('second', 15);

  // PARSING

  addRegexToken('s', match1to2);
  addRegexToken('ss', match1to2, match2);
  addParseToken(['s', 'ss'], SECOND);

  // MOMENTS

  const getSetSecond = makeGetSet('Seconds', false);

  // FORMATTING

  addFormatToken('S', 0, 0, function () {
    return ~~(this.millisecond() / 100);
  });

  addFormatToken(0, ['SS', 2], 0, function () {
    return ~~(this.millisecond() / 10);
  });

  addFormatToken(0, ['SSS', 3], 0, 'millisecond');
  addFormatToken(0, ['SSSS', 4], 0, function () {
    return this.millisecond() * 10;
  });
  addFormatToken(0, ['SSSSS', 5], 0, function () {
    return this.millisecond() * 100;
  });
  addFormatToken(0, ['SSSSSS', 6], 0, function () {
    return this.millisecond() * 1000;
  });
  addFormatToken(0, ['SSSSSSS', 7], 0, function () {
    return this.millisecond() * 10000;
  });
  addFormatToken(0, ['SSSSSSSS', 8], 0, function () {
    return this.millisecond() * 100000;
  });
  addFormatToken(0, ['SSSSSSSSS', 9], 0, function () {
    return this.millisecond() * 1000000;
  });

  // ALIASES

  addUnitAlias('millisecond', 'ms');

  // PRIORITY

  addUnitPriority('millisecond', 16);

  // PARSING

  addRegexToken('S', match1to3, match1);
  addRegexToken('SS', match1to3, match2);
  addRegexToken('SSS', match1to3, match3);

  let token;
  for (token = 'SSSS'; token.length <= 9; token += 'S') {
    addRegexToken(token, matchUnsigned);
  }

  function parseMs(input, array) {
    array[MILLISECOND] = toInt((`0.${input}`) * 1000);
  }

  for (token = 'S'; token.length <= 9; token += 'S') {
    addParseToken(token, parseMs);
  }
  // MOMENTS

  const getSetMillisecond = makeGetSet('Milliseconds', false);

  // FORMATTING

  addFormatToken('z', 0, 0, 'zoneAbbr');
  addFormatToken('zz', 0, 0, 'zoneName');

  // MOMENTS

  function getZoneAbbr() {
    return this._isUTC ? 'UTC' : '';
  }

  function getZoneName() {
    return this._isUTC ? 'Coordinated Universal Time' : '';
  }

  const proto = Moment.prototype;

  proto.add = add;
  proto.calendar = calendar$1;
  proto.clone = clone;
  proto.diff = diff;
  proto.endOf = endOf;
  proto.format = format;
  proto.from = from;
  proto.fromNow = fromNow;
  proto.to = to;
  proto.toNow = toNow;
  proto.get = stringGet;
  proto.invalidAt = invalidAt;
  proto.isAfter = isAfter;
  proto.isBefore = isBefore;
  proto.isBetween = isBetween;
  proto.isSame = isSame;
  proto.isSameOrAfter = isSameOrAfter;
  proto.isSameOrBefore = isSameOrBefore;
  proto.isValid = isValid$2;
  proto.lang = lang;
  proto.locale = locale;
  proto.localeData = localeData;
  proto.max = prototypeMax;
  proto.min = prototypeMin;
  proto.parsingFlags = parsingFlags;
  proto.set = stringSet;
  proto.startOf = startOf;
  proto.subtract = subtract;
  proto.toArray = toArray;
  proto.toObject = toObject;
  proto.toDate = toDate;
  proto.toISOString = toISOString;
  proto.inspect = inspect;
  proto.toJSON = toJSON;
  proto.toString = toString;
  proto.unix = unix;
  proto.valueOf = valueOf;
  proto.creationData = creationData;
  proto.year = getSetYear;
  proto.isLeapYear = getIsLeapYear;
  proto.weekYear = getSetWeekYear;
  proto.isoWeekYear = getSetISOWeekYear;
  proto.quarter = proto.quarters = getSetQuarter;
  proto.month = getSetMonth;
  proto.daysInMonth = getDaysInMonth;
  proto.week = proto.weeks = getSetWeek;
  proto.isoWeek = proto.isoWeeks = getSetISOWeek;
  proto.weeksInYear = getWeeksInYear;
  proto.isoWeeksInYear = getISOWeeksInYear;
  proto.date = getSetDayOfMonth;
  proto.day = proto.days = getSetDayOfWeek;
  proto.weekday = getSetLocaleDayOfWeek;
  proto.isoWeekday = getSetISODayOfWeek;
  proto.dayOfYear = getSetDayOfYear;
  proto.hour = proto.hours = getSetHour;
  proto.minute = proto.minutes = getSetMinute;
  proto.second = proto.seconds = getSetSecond;
  proto.millisecond = proto.milliseconds = getSetMillisecond;
  proto.utcOffset = getSetOffset;
  proto.utc = setOffsetToUTC;
  proto.local = setOffsetToLocal;
  proto.parseZone = setOffsetToParsedOffset;
  proto.hasAlignedHourOffset = hasAlignedHourOffset;
  proto.isDST = isDaylightSavingTime;
  proto.isLocal = isLocal;
  proto.isUtcOffset = isUtcOffset;
  proto.isUtc = isUtc;
  proto.isUTC = isUtc;
  proto.zoneAbbr = getZoneAbbr;
  proto.zoneName = getZoneName;
  proto.dates = deprecate('dates accessor is deprecated. Use date instead.', getSetDayOfMonth);
  proto.months = deprecate('months accessor is deprecated. Use month instead', getSetMonth);
  proto.years = deprecate('years accessor is deprecated. Use year instead', getSetYear);
  proto.zone = deprecate('moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/', getSetZone);
  proto.isDSTShifted = deprecate('isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information', isDaylightSavingTimeShifted);

  function createUnix(input) {
    return createLocal(input * 1000);
  }

  function createInZone() {
    return createLocal.apply(null, arguments).parseZone();
  }

  function preParsePostFormat(string) {
    return string;
  }

  const proto$1 = Locale.prototype;

  proto$1.calendar = calendar;
  proto$1.longDateFormat = longDateFormat;
  proto$1.invalidDate = invalidDate;
  proto$1.ordinal = ordinal;
  proto$1.preparse = preParsePostFormat;
  proto$1.postformat = preParsePostFormat;
  proto$1.relativeTime = relativeTime;
  proto$1.pastFuture = pastFuture;
  proto$1.set = set;

  proto$1.months = localeMonths;
  proto$1.monthsShort = localeMonthsShort;
  proto$1.monthsParse = localeMonthsParse;
  proto$1.monthsRegex = monthsRegex;
  proto$1.monthsShortRegex = monthsShortRegex;
  proto$1.week = localeWeek;
  proto$1.firstDayOfYear = localeFirstDayOfYear;
  proto$1.firstDayOfWeek = localeFirstDayOfWeek;

  proto$1.weekdays = localeWeekdays;
  proto$1.weekdaysMin = localeWeekdaysMin;
  proto$1.weekdaysShort = localeWeekdaysShort;
  proto$1.weekdaysParse = localeWeekdaysParse;

  proto$1.weekdaysRegex = weekdaysRegex;
  proto$1.weekdaysShortRegex = weekdaysShortRegex;
  proto$1.weekdaysMinRegex = weekdaysMinRegex;

  proto$1.isPM = localeIsPM;
  proto$1.meridiem = localeMeridiem;

  function get$1(format, index, field, setter) {
    const locale = getLocale();
    const utc = createUTC().set(setter, index);
    return locale[field](utc, format);
  }

  function listMonthsImpl(format, index, field) {
    if (isNumber(format)) {
      index = format;
      format = undefined;
    }

    format = format || '';

    if (index != null) {
      return get$1(format, index, field, 'month');
    }

    let i;
    const out = [];
    for (i = 0; i < 12; i++) {
      out[i] = get$1(format, i, field, 'month');
    }
    return out;
  }

  // ()
  // (5)
  // (fmt, 5)
  // (fmt)
  // (true)
  // (true, 5)
  // (true, fmt, 5)
  // (true, fmt)
  function listWeekdaysImpl(localeSorted, format, index, field) {
    if (typeof localeSorted === 'boolean') {
      if (isNumber(format)) {
        index = format;
        format = undefined;
      }

      format = format || '';
    } else {
      format = localeSorted;
      index = format;
      localeSorted = false;

      if (isNumber(format)) {
        index = format;
        format = undefined;
      }

      format = format || '';
    }

    const locale = getLocale();
    const shift = localeSorted ? locale._week.dow : 0;

    if (index != null) {
      return get$1(format, (index + shift) % 7, field, 'day');
    }

    let i;
    const out = [];
    for (i = 0; i < 7; i++) {
      out[i] = get$1(format, (i + shift) % 7, field, 'day');
    }
    return out;
  }

  function listMonths(format, index) {
    return listMonthsImpl(format, index, 'months');
  }

  function listMonthsShort(format, index) {
    return listMonthsImpl(format, index, 'monthsShort');
  }

  function listWeekdays(localeSorted, format, index) {
    return listWeekdaysImpl(localeSorted, format, index, 'weekdays');
  }

  function listWeekdaysShort(localeSorted, format, index) {
    return listWeekdaysImpl(localeSorted, format, index, 'weekdaysShort');
  }

  function listWeekdaysMin(localeSorted, format, index) {
    return listWeekdaysImpl(localeSorted, format, index, 'weekdaysMin');
  }

  getSetGlobalLocale('en', {
    dayOfMonthOrdinalParse: /\d{1,2}(th|st|nd|rd)/,
    ordinal(number) {
      const b = number % 10;
      const output = (toInt(number % 100 / 10) === 1) ? 'th'
        : (b === 1) ? 'st'
          : (b === 2) ? 'nd'
            : (b === 3) ? 'rd' : 'th';
      return number + output;
    },
  });

  // Side effect imports

  hooks.lang = deprecate('moment.lang is deprecated. Use moment.locale instead.', getSetGlobalLocale);
  hooks.langData = deprecate('moment.langData is deprecated. Use moment.localeData instead.', getLocale);

  const mathAbs = Math.abs;

  function abs() {
    const data = this._data;

    this._milliseconds = mathAbs(this._milliseconds);
    this._days = mathAbs(this._days);
    this._months = mathAbs(this._months);

    data.milliseconds = mathAbs(data.milliseconds);
    data.seconds = mathAbs(data.seconds);
    data.minutes = mathAbs(data.minutes);
    data.hours = mathAbs(data.hours);
    data.months = mathAbs(data.months);
    data.years = mathAbs(data.years);

    return this;
  }

  function addSubtract$1(duration, input, value, direction) {
    const other = createDuration(input, value);

    duration._milliseconds += direction * other._milliseconds;
    duration._days += direction * other._days;
    duration._months += direction * other._months;

    return duration._bubble();
  }

  // supports only 2.0-style add(1, 's') or add(duration)
  function add$1(input, value) {
    return addSubtract$1(this, input, value, 1);
  }

  // supports only 2.0-style subtract(1, 's') or subtract(duration)
  function subtract$1(input, value) {
    return addSubtract$1(this, input, value, -1);
  }

  function absCeil(number) {
    if (number < 0) {
      return Math.floor(number);
    }
    return Math.ceil(number);
  }

  function bubble() {
    let milliseconds = this._milliseconds;
    let days = this._days;
    let months = this._months;
    const data = this._data;
    let seconds; let minutes; let hours; let years; let
      monthsFromDays;

    // if we have a mix of positive and negative values, bubble down first
    // check: https://github.com/moment/moment/issues/2166
    if (!((milliseconds >= 0 && days >= 0 && months >= 0)
        || (milliseconds <= 0 && days <= 0 && months <= 0))) {
      milliseconds += absCeil(monthsToDays(months) + days) * 864e5;
      days = 0;
      months = 0;
    }

    // The following code bubbles up values, see the tests for
    // examples of what that means.
    data.milliseconds = milliseconds % 1000;

    seconds = absFloor(milliseconds / 1000);
    data.seconds = seconds % 60;

    minutes = absFloor(seconds / 60);
    data.minutes = minutes % 60;

    hours = absFloor(minutes / 60);
    data.hours = hours % 24;

    days += absFloor(hours / 24);

    // convert days to months
    monthsFromDays = absFloor(daysToMonths(days));
    months += monthsFromDays;
    days -= absCeil(monthsToDays(monthsFromDays));

    // 12 months -> 1 year
    years = absFloor(months / 12);
    months %= 12;

    data.days = days;
    data.months = months;
    data.years = years;

    return this;
  }

  function daysToMonths(days) {
    // 400 years have 146097 days (taking into account leap year rules)
    // 400 years have 12 months === 4800
    return days * 4800 / 146097;
  }

  function monthsToDays(months) {
    // the reverse of daysToMonths
    return months * 146097 / 4800;
  }

  function as(units) {
    if (!this.isValid()) {
      return NaN;
    }
    let days;
    let months;
    const milliseconds = this._milliseconds;

    units = normalizeUnits(units);

    if (units === 'month' || units === 'quarter' || units === 'year') {
      days = this._days + milliseconds / 864e5;
      months = this._months + daysToMonths(days);
      switch (units) {
        case 'month':
          return months;
        case 'quarter':
          return months / 3;
        case 'year':
          return months / 12;
      }
    } else {
      // handle milliseconds separately because of floating point math errors (issue #1867)
      days = this._days + Math.round(monthsToDays(this._months));
      switch (units) {
        case 'week':
          return days / 7 + milliseconds / 6048e5;
        case 'day':
          return days + milliseconds / 864e5;
        case 'hour':
          return days * 24 + milliseconds / 36e5;
        case 'minute':
          return days * 1440 + milliseconds / 6e4;
        case 'second':
          return days * 86400 + milliseconds / 1000;
          // Math.floor prevents floating point math errors here
        case 'millisecond':
          return Math.floor(days * 864e5) + milliseconds;
        default:
          throw new Error(`Unknown unit ${units}`);
      }
    }
  }

  // TODO: Use this.as('ms')?
  function valueOf$1() {
    if (!this.isValid()) {
      return NaN;
    }
    return (
      this._milliseconds
      + this._days * 864e5
      + (this._months % 12) * 2592e6
      + toInt(this._months / 12) * 31536e6
    );
  }

  function makeAs(alias) {
    return function () {
      return this.as(alias);
    };
  }

  const asMilliseconds = makeAs('ms');
  const asSeconds = makeAs('s');
  const asMinutes = makeAs('m');
  const asHours = makeAs('h');
  const asDays = makeAs('d');
  const asWeeks = makeAs('w');
  const asMonths = makeAs('M');
  const asQuarters = makeAs('Q');
  const asYears = makeAs('y');

  function clone$1() {
    return createDuration(this);
  }

  function get$2(units) {
    units = normalizeUnits(units);
    return this.isValid() ? this[`${units}s`]() : NaN;
  }

  function makeGetter(name) {
    return function () {
      return this.isValid() ? this._data[name] : NaN;
    };
  }

  const milliseconds = makeGetter('milliseconds');
  const seconds = makeGetter('seconds');
  const minutes = makeGetter('minutes');
  const hours = makeGetter('hours');
  const days = makeGetter('days');
  const months = makeGetter('months');
  const years = makeGetter('years');

  function weeks() {
    return absFloor(this.days() / 7);
  }

  let { round } = Math;
  const thresholds = {
    ss: 44, // a few seconds to seconds
    s: 45, // seconds to minute
    m: 45, // minutes to hour
    h: 22, // hours to day
    d: 26, // days to month
    M: 11, // months to year
  };

  // helper function for moment.fn.from, moment.fn.fromNow, and moment.duration.fn.humanize
  function substituteTimeAgo(string, number, withoutSuffix, isFuture, locale) {
    return locale.relativeTime(number || 1, !!withoutSuffix, string, isFuture);
  }

  function relativeTime$1(posNegDuration, withoutSuffix, locale) {
    const duration = createDuration(posNegDuration).abs();
    const seconds = round(duration.as('s'));
    const minutes = round(duration.as('m'));
    const hours = round(duration.as('h'));
    const days = round(duration.as('d'));
    const months = round(duration.as('M'));
    const years = round(duration.as('y'));

    const a = seconds <= thresholds.ss && ['s', seconds]
      || seconds < thresholds.s && ['ss', seconds]
      || minutes <= 1 && ['m']
      || minutes < thresholds.m && ['mm', minutes]
      || hours <= 1 && ['h']
      || hours < thresholds.h && ['hh', hours]
      || days <= 1 && ['d']
      || days < thresholds.d && ['dd', days]
      || months <= 1 && ['M']
      || months < thresholds.M && ['MM', months]
      || years <= 1 && ['y'] || ['yy', years];

    a[2] = withoutSuffix;
    a[3] = +posNegDuration > 0;
    a[4] = locale;
    return substituteTimeAgo.apply(null, a);
  }

  // This function allows you to set the rounding function for relative time strings
  function getSetRelativeTimeRounding(roundingFunction) {
    if (roundingFunction === undefined) {
      return round;
    }
    if (typeof (roundingFunction) === 'function') {
      round = roundingFunction;
      return true;
    }
    return false;
  }

  // This function allows you to set a threshold for relative time strings
  function getSetRelativeTimeThreshold(threshold, limit) {
    if (thresholds[threshold] === undefined) {
      return false;
    }
    if (limit === undefined) {
      return thresholds[threshold];
    }
    thresholds[threshold] = limit;
    if (threshold === 's') {
      thresholds.ss = limit - 1;
    }
    return true;
  }

  function humanize(withSuffix) {
    if (!this.isValid()) {
      return this.localeData().invalidDate();
    }

    const locale = this.localeData();
    let output = relativeTime$1(this, !withSuffix, locale);

    if (withSuffix) {
      output = locale.pastFuture(+this, output);
    }

    return locale.postformat(output);
  }

  const abs$1 = Math.abs;

  function sign(x) {
    return ((x > 0) - (x < 0)) || +x;
  }

  function toISOString$1() {
    // for ISO strings we do not use the normal bubbling rules:
    //  * milliseconds bubble up until they become hours
    //  * days do not bubble at all
    //  * months bubble up until they become years
    // This is because there is no context-free conversion between hours and days
    // (think of clock changes)
    // and also not between days and months (28-31 days per month)
    if (!this.isValid()) {
      return this.localeData().invalidDate();
    }

    let seconds = abs$1(this._milliseconds) / 1000;
    const days = abs$1(this._days);
    let months = abs$1(this._months);
    let minutes; let hours; let
      years;

    // 3600 seconds -> 60 minutes -> 1 hour
    minutes = absFloor(seconds / 60);
    hours = absFloor(minutes / 60);
    seconds %= 60;
    minutes %= 60;

    // 12 months -> 1 year
    years = absFloor(months / 12);
    months %= 12;

    // inspired by https://github.com/dordille/moment-isoduration/blob/master/moment.isoduration.js
    const Y = years;
    const M = months;
    const D = days;
    const h = hours;
    const m = minutes;
    const s = seconds ? seconds.toFixed(3).replace(/\.?0+$/, '') : '';
    const total = this.asSeconds();

    if (!total) {
      // this is the same as C#'s (Noda) and python (isodate)...
      // but not other JS (goog.date)
      return 'P0D';
    }

    const totalSign = total < 0 ? '-' : '';
    const ymSign = sign(this._months) !== sign(total) ? '-' : '';
    const daysSign = sign(this._days) !== sign(total) ? '-' : '';
    const hmsSign = sign(this._milliseconds) !== sign(total) ? '-' : '';

    return `${totalSign}P${
      Y ? `${ymSign + Y}Y` : ''
    }${M ? `${ymSign + M}M` : ''
    }${D ? `${daysSign + D}D` : ''
    }${(h || m || s) ? 'T' : ''
    }${h ? `${hmsSign + h}H` : ''
    }${m ? `${hmsSign + m}M` : ''
    }${s ? `${hmsSign + s}S` : ''}`;
  }

  const proto$2 = Duration.prototype;

  proto$2.isValid = isValid$1;
  proto$2.abs = abs;
  proto$2.add = add$1;
  proto$2.subtract = subtract$1;
  proto$2.as = as;
  proto$2.asMilliseconds = asMilliseconds;
  proto$2.asSeconds = asSeconds;
  proto$2.asMinutes = asMinutes;
  proto$2.asHours = asHours;
  proto$2.asDays = asDays;
  proto$2.asWeeks = asWeeks;
  proto$2.asMonths = asMonths;
  proto$2.asQuarters = asQuarters;
  proto$2.asYears = asYears;
  proto$2.valueOf = valueOf$1;
  proto$2._bubble = bubble;
  proto$2.clone = clone$1;
  proto$2.get = get$2;
  proto$2.milliseconds = milliseconds;
  proto$2.seconds = seconds;
  proto$2.minutes = minutes;
  proto$2.hours = hours;
  proto$2.days = days;
  proto$2.weeks = weeks;
  proto$2.months = months;
  proto$2.years = years;
  proto$2.humanize = humanize;
  proto$2.toISOString = toISOString$1;
  proto$2.toString = toISOString$1;
  proto$2.toJSON = toISOString$1;
  proto$2.locale = locale;
  proto$2.localeData = localeData;

  proto$2.toIsoString = deprecate('toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)', toISOString$1);
  proto$2.lang = lang;

  // Side effect imports

  // FORMATTING

  addFormatToken('X', 0, 0, 'unix');
  addFormatToken('x', 0, 0, 'valueOf');

  // PARSING

  addRegexToken('x', matchSigned);
  addRegexToken('X', matchTimestamp);
  addParseToken('X', (input, array, config) => {
    config._d = new Date(parseFloat(input, 10) * 1000);
  });
  addParseToken('x', (input, array, config) => {
    config._d = new Date(toInt(input));
  });

  // Side effect imports

  hooks.version = '2.24.0';

  setHookCallback(createLocal);

  hooks.fn = proto;
  hooks.min = min;
  hooks.max = max;
  hooks.now = now;
  hooks.utc = createUTC;
  hooks.unix = createUnix;
  hooks.months = listMonths;
  hooks.isDate = isDate;
  hooks.locale = getSetGlobalLocale;
  hooks.invalid = createInvalid;
  hooks.duration = createDuration;
  hooks.isMoment = isMoment;
  hooks.weekdays = listWeekdays;
  hooks.parseZone = createInZone;
  hooks.localeData = getLocale;
  hooks.isDuration = isDuration;
  hooks.monthsShort = listMonthsShort;
  hooks.weekdaysMin = listWeekdaysMin;
  hooks.defineLocale = defineLocale;
  hooks.updateLocale = updateLocale;
  hooks.locales = listLocales;
  hooks.weekdaysShort = listWeekdaysShort;
  hooks.normalizeUnits = normalizeUnits;
  hooks.relativeTimeRounding = getSetRelativeTimeRounding;
  hooks.relativeTimeThreshold = getSetRelativeTimeThreshold;
  hooks.calendarFormat = getCalendarFormat;
  hooks.prototype = proto;

  // currently HTML5 input type only supports 24-hour formats
  hooks.HTML5_FMT = {
    DATETIME_LOCAL: 'YYYY-MM-DDTHH:mm', // <input type="datetime-local" />
    DATETIME_LOCAL_SECONDS: 'YYYY-MM-DDTHH:mm:ss', // <input type="datetime-local" step="1" />
    DATETIME_LOCAL_MS: 'YYYY-MM-DDTHH:mm:ss.SSS', // <input type="datetime-local" step="0.001" />
    DATE: 'YYYY-MM-DD', // <input type="date" />
    TIME: 'HH:mm', // <input type="time" />
    TIME_SECONDS: 'HH:mm:ss', // <input type="time" step="1" />
    TIME_MS: 'HH:mm:ss.SSS', // <input type="time" step="0.001" />
    WEEK: 'GGGG-[W]WW', // <input type="week" />
    MONTH: 'YYYY-MM', // <input type="month" />
  };

  return hooks;
})));

function getAllUrlclockSettings(url) {
  // get query string from url (optional) or window
  let queryString = url ? url.split('?')[1] : window.location.search.slice(1);

  // we'll store the parameters here
  const obj = {};

  // if query string exists
  if (queryString) {
    // stuff after # is not part of query string, so get rid of it
    queryString = queryString.split('#')[0];

    // split our query string into its component parts
    const arr = queryString.split('&');

    for (let i = 0; i < arr.length; i++) {
      // separate the keys and the values
      const a = arr[i].split('=');

      // set parameter name and value (use 'true' if empty)
      let paramName = a[0];
      let paramValue = typeof (a[1]) === 'undefined' ? true : a[1];

      // (optional) keep case consistent
      paramName = paramName.toLowerCase();
      if (typeof paramValue === 'string') paramValue = paramValue.toLowerCase();

      // if the paramName ends with square brackets, e.g. colors[] or colors[2]
      if (paramName.match(/\[(\d+)?\]$/)) {
        // create key if it doesn't exist
        const key = paramName.replace(/\[(\d+)?\]/, '');
        if (!obj[key]) obj[key] = [];

        // if it's an indexed array e.g. colors[2]
        if (paramName.match(/\[\d+\]$/)) {
          // get the index value and add the entry at the appropriate position
          const index = /\[(\d+)\]/.exec(paramName)[1];
          obj[key][index] = paramValue;
        } else {
          // otherwise add the value to the end of the array
          obj[key].push(paramValue);
        }
      } else {
        // we're dealing with a string
        if (!obj[paramName]) {
          // if it doesn't exist, create property
          obj[paramName] = paramValue;
        } else if (obj[paramName] && typeof obj[paramName] === 'string') {
          // if property does exist and it's a string, convert it to an array
          obj[paramName] = [obj[paramName]];
          obj[paramName].push(paramValue);
        } else {
          // otherwise add the property
          obj[paramName].push(paramValue);
        }
      }
    }
  }

  return obj;
}
const cityTimeMoment = moment.utc().add(getAllUrlclockSettings().utc, 'hours').format('HH:mm');
// console.log(getAllUrlclockSettings().utc);
const cityArray = [{
  city: {
    en: decodeURI(getAllUrlclockSettings().eventcity),
  },
  eventText: {
    en: 'Event',
    fr: 'Événement',
    es: 'Torneo',
    pt: 'Torneio',
    ko: '이벤트',
  },
  myTimeText: {
    en: 'My Time',
    fr: 'Heure Locale',
    es: 'Mi Hora',
    pt: 'Meu Hora',
    ko: '내 시간',
  },
  teeTimeText: {
    en: 'TEE TIMES',
    fr: 'HEURES DE DÉPART',
    es: 'HORARIOS DE SALIDA',
    pt: 'HORÁRIOS DE SAÍDA',
    ko: '조 편성',
  },
  teeTimeAccessibiltyTextEvent: {
    en: 'Tee Time in event time zone button',
    fr: 'Bouton de départ, heure locale du tournoi',
    es: 'Tee time en zona horaria del evento',
    pt: 'Tee Time no horário do evento',
    ko: '',
  },
  teeTimeAccessibiltyTextMyTime: {
    en: 'Tee Time in local time button',
    fr: 'Bouton de départ, heure locale',
    es: 'Tee time en hora local',
    pt: 'Tee Time no horário local',
    ko: '',
  },
  teeTimeGotoRolex: {
    en: 'Go to Rolex Link',
    fr: 'Aller au lien Rolex',
    es: 'Enlace Rolex',
    pt: 'Clique aqui para o Link da Rolex',
    ko: '',
  },
  startDate: 20131003,
  endDate: 20251003,
  // timezone: cityTimeMoment,
  offset: 0,
}];
// console.log(cityArray)
const extension = 'svg';
const imageExtension = 'svg';
const imgFolder = 'img';
// console.log(getAllUrlclockSettings().eventname)
/*
   * Available dimensions.
   * How to: comment unused ones.
   */
// var dim = {width: 56, height: 56, scale: 0.6};// scale 0.6
// var dim = {width: 60, height: 60, scale: 0.65};// scale 0.65
// var dim = {width: 64, height: 64, scale: 0.7};// scale 0.7
const dim = { width: 180, height: 180, scale: 0.97 }; // scale 0.75
// var dim = {width: 73, height: 73, scale: 0.8};// scale 0.8
// var dim = {width: 82, height: 82, scale: 0.9};// scale 0.9
// var dim = {width: 90, height: 90, scale: 1};// scale 1 <- default one
// var dim = {width: 99, height: 99, scale: 1.1};// scale 1.1
// var dim = {width: 109, height: 109, scale: 1.2};// scale 1.2

/*
 * Available needles
 * How to use: comment unused ones.
 */
const needlesFolder = './toggle/img/'; // deprecated
// var needlesFolder = 'css/images/needles/green/';
// var needlesFolder = 'css/images/needles/black/';
// var needlesFolder = 'css/images/needles/silver/';

/* set the clock width */
const clockWidth = dim.width;
/* set the clock height */
const clockHeight = dim.height;

const clockSettings = {
  LANG: 'en', // Language
  contentWidth: 225, // px Width of the content
  contentHeight: 100, // px Height of the content
  clockWidth: dim.width,
  /* width of the clock to be set on top the html file */
  clockHeight: dim.height,
  /* height of the clock to be set on top the html file */
  bgFileName: 'bg.png',
  /* set the of the background file */
  flashname: '',
  /* set the flash name without .swf (place the file in the img folder) */
  trackingurl: 'https://www.rolex.com/?cmpid=dsp_Clock_pgatour.com_rlx1901680',
  /* set the tracking url */
  trackingPixel: '',
  trackUrlW: 60, // px Width of the tracker url a#trackUrl
  trackUrlH: 56, // px Height of the tracker url a#trackUrl
  trackUrlL: 0, // ??
  timeZTop: '19px',
  timeZLeft: '111px',
  yourtTop: '58px',
  yourtLeft: '111px',
  trackUrlNewArea: false,
  theLocalText: 'Your Time',
  /* set your time text to be shown on the banner */
  trailingZero: true,
  amPm: true,
  /* set custom offset if city doesn't exist in the list */
  customOffset: '',
  /* set custom offset if city doesn't exist in the list */
  customOffset1: '',
  customOffset2: '',
  customDST: '',
  customDST1: '',
  customDST2: '',
  time24hours: true,
  /* show time in 24 hours format with true */
  showText: true,
  /* hide all text and time with false */
  showTime: false,
  /* show time without city / your time text with true */
  showDay: false,
  /* change all text to Uppercase with true */
  upperCase: false,
  /* change all text to Uppercase with true */
  globalXcenter: (dim.width / 2) - 0.75,
  globalYcenter: (dim.height / 2) + 2,
  globalXscale: dim.scale,
  globalYscale: dim.scale,
  watchContainerID: 'global_watch',
  handsFolder: './toggle/img/',
  retinaXcenter: dim.width / 2,
  /* change the clock X position */
  retinaYcenter: dim.height / 2,
  /* change the clock Y position */
  retinaXscale: dim.scale,
  /* change the clock X scale */
  retinaYscale: dim.scale,
  /* change the clock Y scale */
  greencolor: '#027D57',
  /* change the text city time color */
  yellowcolor: '#A37E2C',
  /* change the text your time color */
  pointPosition: '78px',
  /* change the dot right position */
  point2Position: '78px',
  /* change the dot right position */
  textRightPosition: '0px',
  /* change the text blocks right position */
  textYourTimeRightPosition: '0px',
  /* change the text blocks right position */
  forceFlash: false,
  forceFallback: false,
  handsclockSettings: {
    // imagetype SVG
    svg: {
      hour: { width: 9 },
      minute: { width: 9 },
      second: { width: 6, xrotation: 3 },
    },
    // imagetype PNG
    png: {
      hour: { width: 9 },
      minute: { width: 9 },
      second: { width: 6, xrotation: 3 },
    },
  },
};

document.addEventListener('DOMContentLoaded', () => {
  buildClock(clockSettings);
});

/**
 * Package: buildClock
 *
 * Description:
 * this file is the javascript to generate the watch with or without text
 *
 * Files:
 *  - watch_js/clock.core.min.js
 *
 * License:
 * Copyright (c) 2012, matchbox France http://www.matchbox.fr
 * This program is dual licensed under the GNU General Public License
 * and Simplified BSD license.
 */

window.requestAnimFrame = (function () {
  return window.requestAnimationFrame
    || window.webkitRequestAnimationFrame
    || window.mozRequestAnimationFrame
    || window.oRequestAnimationFrame
    || window.msRequestAnimationFrame
    || function (callback) {
      window.setTimeout(callback, 1000 / 60);
    };
}());
// console.log(clockSettings)
const image_folder = clockSettings.handsFolder;
const all_parts = new Array('hours', 'minutes', 'seconds', 'top_center');

const hours_p = new Array();
hours_p.url = `hours.${imageExtension}`;
hours_p.update_mode = 'hours_base_12';
hours_p.width = clockSettings.handsclockSettings[imageExtension].hour.width;
hours_p.height = 61;
hours_p.xrotation = clockSettings.handsclockSettings[imageExtension].hour.width / 2;
hours_p.yrotation = 49;
hours_p.xcenteroffset = 0;
hours_p.ycenteroffset = 0;

const minutes_p = new Array();
minutes_p.url = `minutes.${imageExtension}`;
minutes_p.update_mode = 'minutes_base_60';
minutes_p.width = clockSettings.handsclockSettings[imageExtension].minute.width;
minutes_p.height = 75;
minutes_p.xrotation = clockSettings.handsclockSettings[imageExtension].minute.width / 2;
minutes_p.yrotation = 60;
minutes_p.xcenteroffset = 0;
minutes_p.ycenteroffset = 0;

const seconds_p = new Array();
seconds_p.url = `seconds.${imageExtension}`;
seconds_p.update_mode = 'seconds_base_60';
seconds_p.width = clockSettings.handsclockSettings[imageExtension].second.width;
seconds_p.height = 92;
seconds_p.xrotation = clockSettings.handsclockSettings[imageExtension].second.xrotation;
seconds_p.yrotation = 70;
seconds_p.xcenteroffset = 0;
seconds_p.ycenteroffset = 0;
seconds_p.watch_x_center = 0;
seconds_p.watch_y_center = 0;

const top_center_p = new Array();
top_center_p.url = 'center.png';
top_center_p.width = 5;
top_center_p.height = 5;
top_center_p.xcenteroffset = -2.5;
top_center_p.ycenteroffset = -7;

const cyclop_mask_p = new Array();

const global_watch_p = new Array();
global_watch_p.rotation_angle = 0;
global_watch_p.width = clockSettings.clockWidth;
global_watch_p.height = clockSettings.clockHeight;
global_watch_p.xscale = clockSettings.globalXscale;
global_watch_p.yscale = clockSettings.globalYscale;

function countProperties(a) {
  let b = 0;
  for (const c in a) {
    if (a.hasOwnProperty(c)) { ++b; }
  }
  return b;
}
//        function onImageLoaded(a) {
/// /            console.log(all_p_to_be_loaded)
//            all_p_to_be_loaded--;
//            if (all_p_to_be_loaded == 0) {
//            }
//        }

const partsContainer = document.createElement('div');
partsContainer.style.position = 'absolute';
partsContainer.style.width = '1px';
partsContainer.style.height = '1px';
partsContainer.style.padding = '0';
partsContainer.style.margin = '-2px';
partsContainer.style.overflow = 'hidden';
partsContainer.style.clip = 'rect(0, 0, 0, 0)';
partsContainer.style.border = '0';
document.getElementsByTagName('body')[0].appendChild(partsContainer);

/* load sprite */
const loadSpriteErrors = [];

function loadSprite(i, src) {
  //            console.log("i=" + i + "; src=" + src);
  const deferred = $.Deferred();
  all_p[i].image = document.createElement('img');
  all_p[i].image.id = `p_${all_parts[i]}`;
  all_p[i].image.onload = function () {
    deferred.resolve();
  };
  all_p[i].image.onerror = function () {
    loadSpriteErrors.push(src);
    $('.content').hide();
    $('.fallback').show();
  };
  partsContainer.appendChild(all_p[i].image);
  all_p[i].image.src = src;
  return deferred.promise();
}
var all_p = new Array();
let all_p_to_be_loaded = all_parts.length;
for (i = 0; i < all_parts.length; i++) {
  all_p[i] = eval(`${all_parts[i]}_p`);
}
const loaders = [];
for (var i = 0; i < all_parts.length; i++) {
  if (all_p[i].url != null) {
    // loads img
    loaders.push(loadSprite(i, image_folder + all_p[i].url));
    if (!all_p[i].fileformat) {
      all_p[i].fileformat = all_p[i].url.substring(all_p[i].url.length - 3, all_p[i].url.length);
    }
  } else {
    all_p_to_be_loaded--;
  }
  if (!all_p[i].xcenteroffset) {
    all_p[i].xcenteroffset = 0;
  }
  if (!all_p[i].ycenteroffset) {
    all_p[i].ycenteroffset = 0;
  }
  if (!all_p[i].xoriginoffset) {
    all_p[i].xoriginoffset = null;
  }
  if (!all_p[i].yoriginoffset) {
    all_p[i].yoriginoffset = null;
  }
  if (!all_p[i].xcenter) {
    all_p[i].xcenter = 0;
  }
  if (!all_p[i].ycenter) {
    all_p[i].ycenter = 0;
  }
  if (!all_p[i].update_mode) {
    all_p[i].update_mode = null;
  }
  if (!all_p[i].watch_x_center) {
    all_p[i].offset_alternate_x_center = 0;
  } else {
    all_p[i].offset_alternate_x_center = global_watch_p[all_p[i].watch_x_center] - global_watch_p.xcenter;
  }
  if (!all_p[i].watch_y_center) {
    all_p[i].offset_alternate_y_center = -4;
  } else {
    all_p[i].offset_alternate_y_center = global_watch_p[all_p[i].watch_y_center] - global_watch_p.ycenter;
  }
}

/* load simultaneously all sprites */
$.when.apply(null, loaders).done(() => {
  // callback when everything was loaded
  all_p_to_be_loaded -= loaders.length; // decrement the number of images to load.
});

function f_calculate_additional_vars() {
  if (GLOBAL_LIGHT_SOURCE != undefined) {
    TOP_LIGHT_START = GLOBAL_LIGHT_SOURCE - 90;
    TOP_LIGHT_END = GLOBAL_LIGHT_SOURCE + 90;
    BOTTOM_LIGHT_START = GLOBAL_LIGHT_SOURCE - 90;
    BOTTOM_LIGHT_END = GLOBAL_LIGHT_SOURCE + 90;
    TOP_SHADE_START = GLOBAL_LIGHT_SOURCE + 90;
    TOP_SHADE_END = GLOBAL_LIGHT_SOURCE - 90;
    BOTTOM_SHADE_START = GLOBAL_LIGHT_SOURCE + 90;
    BOTTOM_SHADE_END = GLOBAL_LIGHT_SOURCE - 90;
    LEFT_LIGHT_START = GLOBAL_LIGHT_SOURCE;
    LEFT_LIGHT_END = GLOBAL_LIGHT_SOURCE + 180;
    RIGHT_LIGHT_START = GLOBAL_LIGHT_SOURCE + 180;
    RIGHT_LIGHT_END = GLOBAL_LIGHT_SOURCE;
    LEFT_SHADE_START = GLOBAL_LIGHT_SOURCE + 180;
    LEFT_SHADE_END = GLOBAL_LIGHT_SOURCE;
    RIGHT_SHADE_START = GLOBAL_LIGHT_SOURCE;
    RIGHT_SHADE_END = GLOBAL_LIGHT_SOURCE + 180;
  }
  if (GLOBAL_MIN_ALPHA != undefined) {
    TOP_LIGHT_MIN = BOTTOM_LIGHT_MIN = TOP_SHADE_MIN = BOTTOM_SHADE_MIN = LEFT_LIGHT_MIN = RIGHT_LIGHT_MIN = LEFT_SHADE_MIN = RIGHT_SHADE_MIN = GLOBAL_MIN_ALPHA;
  }
  if (GLOBAL_MAX_ALPHA != undefined) {
    TOP_LIGHT_MAX = BOTTOM_LIGHT_MAX = TOP_SHADE_MAX = BOTTOM_SHADE_MAX = LEFT_LIGHT_MAX = RIGHT_LIGHT_MAX = LEFT_SHADE_MAX = RIGHT_SHADE_MAX = GLOBAL_MAX_ALPHA;
  }
  while (TOP_LIGHT_START > TOP_LIGHT_END) {
    TOP_LIGHT_END += 360;
  }
  while (BOTTOM_LIGHT_START > BOTTOM_LIGHT_END) {
    BOTTOM_LIGHT_END += 360;
  }
  while (TOP_SHADE_START > TOP_SHADE_END) {
    TOP_SHADE_END += 360;
  }
  while (BOTTOM_SHADE_START > BOTTOM_SHADE_END) {
    BOTTOM_SHADE_END += 360;
  }
  while (LEFT_LIGHT_START > LEFT_LIGHT_END) {
    LEFT_LIGHT_END += 360;
  }
  while (RIGHT_LIGHT_START > RIGHT_LIGHT_END) {
    RIGHT_LIGHT_END += 360;
  }
  while (LEFT_SHADE_START > LEFT_SHADE_END) {
    LEFT_SHADE_END += 360;
  }
  while (RIGHT_SHADE_START > RIGHT_SHADE_END) {
    RIGHT_SHADE_END += 360;
  }
  while (TOP_LIGHT_END > 360) {
    TOP_LIGHT_START -= 360;
    TOP_LIGHT_END -= 360;
  }
  while (BOTTOM_LIGHT_END > 360) {
    BOTTOM_LIGHT_START -= 360;
    BOTTOM_LIGHT_END -= 360;
  }
  while (TOP_SHADE_END > 360) {
    TOP_SHADE_START -= 360;
    TOP_SHADE_END -= 360;
  }
  while (BOTTOM_SHADE_END > 360) {
    BOTTOM_SHADE_START -= 360;
    BOTTOM_SHADE_END -= 360;
  }
  while (LEFT_LIGHT_END > 360) {
    LEFT_LIGHT_START -= 360;
    LEFT_LIGHT_END -= 360;
  }
  while (RIGHT_LIGHT_END > 360) {
    RIGHT_LIGHT_START -= 360;
    RIGHT_LIGHT_END -= 360;
  }
  while (LEFT_SHADE_END > 360) {
    LEFT_SHADE_START -= 360;
    LEFT_SHADE_END -= 360;
  }
  while (RIGHT_SHADE_END > 360) {
    RIGHT_SHADE_START -= 360;
    RIGHT_SHADE_END -= 360;
  }
  if (TOP_LIGHT_START < TOP_LIGHT_END) {
    top_light_max_point = (TOP_LIGHT_START + TOP_LIGHT_END) / 2 % 360;
    top_light_range = TOP_LIGHT_END - TOP_LIGHT_START;
  } else {
    top_light_max_point = (TOP_LIGHT_START + TOP_LIGHT_END) % 360 / 2;
    top_light_range = 360 + TOP_LIGHT_END - TOP_LIGHT_START;
  }
  top_light_mid_range = top_light_range / 2;
  if (BOTTOM_LIGHT_START < BOTTOM_LIGHT_END) {
    bottom_light_max_point = (BOTTOM_LIGHT_START + BOTTOM_LIGHT_END) / 2 % 360;
    bottom_light_range = BOTTOM_LIGHT_END - BOTTOM_LIGHT_START;
  } else {
    bottom_light_max_point = (BOTTOM_LIGHT_START + BOTTOM_LIGHT_END) % 360 / 2;
    bottom_light_range = 360 + BOTTOM_LIGHT_END - BOTTOM_LIGHT_START;
  }
  bottom_light_mid_range = bottom_light_range / 2;
  if (TOP_SHADE_START < TOP_SHADE_END) {
    top_shade_max_point = (TOP_SHADE_START + TOP_SHADE_END) / 2 % 360;
    top_shade_range = TOP_SHADE_END - TOP_SHADE_START;
  } else {
    top_shade_max_point = (TOP_SHADE_START + TOP_SHADE_END) % 360 / 2;
    top_shade_range = 360 + TOP_SHADE_END - TOP_SHADE_START;
  }
  top_shade_mid_range = top_shade_range / 2;
  if (BOTTOM_SHADE_START < BOTTOM_SHADE_END) {
    bottom_shade_max_point = (BOTTOM_SHADE_START + BOTTOM_SHADE_END) / 2 % 360;
    bottom_shade_range = BOTTOM_SHADE_END - BOTTOM_SHADE_START;
  } else {
    bottom_shade_max_point = (BOTTOM_SHADE_START + BOTTOM_SHADE_END) % 360 / 2;
    bottom_shade_range = 360 + BOTTOM_SHADE_END - BOTTOM_SHADE_START;
  }
  bottom_shade_mid_range = bottom_shade_range / 2;
  if (LEFT_LIGHT_START < LEFT_LIGHT_END) {
    left_light_max_point = (LEFT_LIGHT_START + LEFT_LIGHT_END) / 2 % 360;
    left_light_range = LEFT_LIGHT_END - LEFT_LIGHT_START;
  } else {
    left_light_max_point = (LEFT_LIGHT_START + LEFT_LIGHT_END) % 360 / 2;
    left_light_range = 360 + LEFT_LIGHT_END - LEFT_LIGHT_START;
  }
  left_light_mid_range = left_light_range / 2;
  if (RIGHT_LIGHT_START < RIGHT_LIGHT_END) {
    right_light_max_point = (RIGHT_LIGHT_START + RIGHT_LIGHT_END) / 2 % 360;
    right_light_range = RIGHT_LIGHT_END - RIGHT_LIGHT_START;
  } else {
    right_light_max_point = (RIGHT_LIGHT_START + RIGHT_LIGHT_END) % 360 / 2;
    right_light_range = 360 + RIGHT_LIGHT_END - RIGHT_LIGHT_START;
  }
  right_light_mid_range = right_light_range / 2;
  if (LEFT_SHADE_START < LEFT_SHADE_END) {
    left_shade_max_point = (LEFT_SHADE_START + LEFT_SHADE_END) / 2 % 360;
    left_shade_range = LEFT_SHADE_END - LEFT_SHADE_START;
  } else {
    left_shade_max_point = (LEFT_SHADE_START + LEFT_SHADE_END) % 360 / 2;
    left_shade_range = 360 + LEFT_SHADE_END - LEFT_SHADE_START;
  }
  left_shade_mid_range = left_shade_range / 2;
  if (RIGHT_SHADE_START < RIGHT_SHADE_END) {
    right_shade_max_point = (RIGHT_SHADE_START + RIGHT_SHADE_END) / 2 % 360;
    right_shade_range = RIGHT_SHADE_END - RIGHT_SHADE_START;
  } else {
    right_shade_max_point = (RIGHT_SHADE_START + RIGHT_SHADE_END) % 360 / 2;
    right_shade_range = 360 + RIGHT_SHADE_END - RIGHT_SHADE_START;
  }
  right_shade_mid_range = right_shade_range / 2;
}

function getAlphaForRotation(a, b, c) {
  b = 180 * b / Math.PI + 90;
  subf_find_distance_to_max_point = function (a) {
    let c = Math.abs(a - b);
    if (c > 180) {
      c = Math.abs(180 - (c - 180));
    }
    return c;
  };
  let d;
  if (a == 'top_light') {
    if (c == 'reverse') {
      this_hand_distance_to_top_light_point = subf_find_distance_to_max_point(-top_light_max_point);
    } else {
      this_hand_distance_to_top_light_point = subf_find_distance_to_max_point(top_light_max_point);
    }
    if (this_hand_distance_to_top_light_point <= top_light_mid_range) {
      d = TOP_LIGHT_MIN + (1 - this_hand_distance_to_top_light_point / top_light_mid_range) * (TOP_LIGHT_MAX - TOP_LIGHT_MIN);
    } else {
      d = TOP_LIGHT_MIN;
    }
  } else if (a == 'bottom_light') {
    if (c == 'reverse') {
      this_hand_distance_to_bottom_light_point = subf_find_distance_to_max_point(-bottom_light_max_point);
    } else {
      this_hand_distance_to_bottom_light_point = subf_find_distance_to_max_point(bottom_light_max_point);
    }
    if (180 - this_hand_distance_to_bottom_light_point <= bottom_light_mid_range) {
      d = BOTTOM_LIGHT_MIN + (1 - (180 - this_hand_distance_to_bottom_light_point) / bottom_light_mid_range) * (BOTTOM_LIGHT_MAX - BOTTOM_LIGHT_MIN);
    } else {
      d = BOTTOM_LIGHT_MIN;
    }
  } else if (a == 'top_shade') {
    if (c == 'reverse') {
      this_hand_distance_to_top_shade_point = subf_find_distance_to_max_point(-top_shade_max_point);
    } else {
      this_hand_distance_to_top_shade_point = subf_find_distance_to_max_point(top_shade_max_point);
    }
    if (this_hand_distance_to_top_shade_point <= top_shade_mid_range) {
      d = TOP_SHADE_MIN + (1 - this_hand_distance_to_top_shade_point / top_shade_mid_range) * (TOP_SHADE_MAX - TOP_SHADE_MIN);
    } else {
      d = TOP_SHADE_MIN;
    }
  } else if (a == 'bottom_shade') {
    if (c == 'reverse') {
      this_hand_distance_to_bottom_shade_point = subf_find_distance_to_max_point(-bottom_shade_max_point);
    } else {
      this_hand_distance_to_bottom_shade_point = subf_find_distance_to_max_point(bottom_shade_max_point);
    }
    if (180 - this_hand_distance_to_bottom_shade_point <= bottom_shade_mid_range) {
      d = BOTTOM_SHADE_MIN + (1 - (180 - this_hand_distance_to_bottom_shade_point) / bottom_shade_mid_range) * (BOTTOM_SHADE_MAX - BOTTOM_SHADE_MIN);
    } else {
      d = BOTTOM_SHADE_MIN;
    }
  }
  if (c == 'reverse') {
    if (a == 'left_light') {
      this_hand_distance_to_left_light_point = subf_find_distance_to_max_point(-left_light_max_point);
      if (this_hand_distance_to_left_light_point <= left_light_mid_range) {
        d = LEFT_LIGHT_MIN + (1 - this_hand_distance_to_left_light_point / left_light_mid_range) * (LEFT_LIGHT_MAX - LEFT_LIGHT_MIN);
      } else {
        d = LEFT_LIGHT_MIN;
      }
    } else if (a == 'right_light') {
      if (this_hand_distance_to_right_light_point <= right_light_mid_range) {
        d = RIGHT_LIGHT_MIN + (1 - this_hand_distance_to_right_light_point / right_light_mid_range) * (RIGHT_LIGHT_MAX - RIGHT_LIGHT_MIN);
      } else {
        d = RIGHT_LIGHT_MIN;
      }
    } else if (a == 'left_shade') {
      this_hand_distance_to_left_shade_point = subf_find_distance_to_max_point(-left_shade_max_point);
      if (this_hand_distance_to_left_shade_point <= left_shade_mid_range) {
        d = (1 - this_hand_distance_to_left_shade_point / left_shade_mid_range) * (LEFT_SHADE_MAX - LEFT_SHADE_MIN);
      } else {
        d = LEFT_SHADE_MIN;
      }
    } else if (a == 'right_shade') {
      this_hand_distance_to_right_shade_point = subf_find_distance_to_max_point(-right_shade_max_point);
      if (this_hand_distance_to_right_shade_point <= right_shade_mid_range) {
        d = (1 - this_hand_distance_to_right_shade_point / right_shade_mid_range) * (RIGHT_SHADE_MAX - RIGHT_SHADE_MIN);
      } else {
        d = RIGHT_SHADE_MIN;
      }
    }
  } else if (a == 'left_light') {
    this_hand_distance_to_left_light_point = subf_find_distance_to_max_point(left_light_max_point);
    if (this_hand_distance_to_left_light_point <= left_light_mid_range) {
      d = LEFT_LIGHT_MIN + (1 - this_hand_distance_to_left_light_point / left_light_mid_range) * (LEFT_LIGHT_MAX - LEFT_LIGHT_MIN);
    } else {
      d = LEFT_LIGHT_MIN;
    }
  } else if (a == 'right_light') {
    this_hand_distance_to_right_light_point = subf_find_distance_to_max_point(-right_light_max_point);
    this_hand_distance_to_right_light_point = subf_find_distance_to_max_point(right_light_max_point);
    if (this_hand_distance_to_right_light_point <= right_light_mid_range) {
      d = RIGHT_LIGHT_MIN + (1 - this_hand_distance_to_right_light_point / right_light_mid_range) * (RIGHT_LIGHT_MAX - RIGHT_LIGHT_MIN);
    } else {
      d = RIGHT_LIGHT_MIN;
    }
  } else if (a == 'left_shade') {
    this_hand_distance_to_left_shade_point = subf_find_distance_to_max_point(left_shade_max_point);
    if (this_hand_distance_to_left_shade_point <= left_shade_mid_range) {
      d = LEFT_SHADE_MIN + (1 - this_hand_distance_to_left_shade_point / left_shade_mid_range) * (LEFT_SHADE_MAX - LEFT_SHADE_MIN);
    } else {
      d = LEFT_SHADE_MIN;
    }
  } else if (a == 'right_shade') {
    this_hand_distance_to_right_shade_point = subf_find_distance_to_max_point(right_shade_max_point);
    if (this_hand_distance_to_right_shade_point <= right_shade_mid_range) {
      d = RIGHT_SHADE_MIN + (1 - this_hand_distance_to_right_shade_point / right_shade_mid_range) * (RIGHT_SHADE_MAX - RIGHT_SHADE_MIN);
    } else {
      d = RIGHT_SHADE_MIN;
    }
  }
  return d / 100;
}
var GLOBAL_LIGHT_SOURCE = 360;
var GLOBAL_MIN_ALPHA = 0;
var GLOBAL_MAX_ALPHA = 100;
var TOP_LIGHT_START = 0;
var TOP_LIGHT_END = 0;
var BOTTOM_LIGHT_START = 0;
var BOTTOM_LIGHT_END = 0;
var TOP_SHADE_START = 0;
var TOP_SHADE_END = 0;
var BOTTOM_SHADE_START = 0;
var BOTTOM_SHADE_END = 0;
var LEFT_LIGHT_START = 0;
var LEFT_LIGHT_END = 0;
var RIGHT_LIGHT_START = 0;
var RIGHT_LIGHT_END = 0;
var LEFT_SHADE_START = 0;
var LEFT_SHADE_END = 0;
var RIGHT_SHADE_START = 0;
var RIGHT_SHADE_END = 0;
var TOP_LIGHT_MIN = 0;
var TOP_LIGHT_MAX = 0;
var BOTTOM_LIGHT_MIN = 0;
var BOTTOM_LIGHT_MAX = 0;
var TOP_SHADE_MIN = 0;
var TOP_SHADE_MAX = 0;
var BOTTOM_SHADE_MIN = 0;
var BOTTOM_SHADE_MAX = 0;
var LEFT_LIGHT_MIN = 0;
var LEFT_LIGHT_MAX = 0;
var RIGHT_LIGHT_MIN = 0;
var RIGHT_LIGHT_MAX = 0;
var LEFT_SHADE_MIN = 0;
var LEFT_SHADE_MAX = 0;
var RIGHT_SHADE_MIN = 0;
var RIGHT_SHADE_MAX = 0;
var top_light_max_point = 0;
var top_light_range = 0;
var top_light_mid_range = 0;
var bottom_light_max_point = 0;
var bottom_light_range = 0;
var bottom_light_mid_range = 0;
var top_shade_max_point = 0;
var top_shade_range = 0;
var top_shade_mid_range = 0;
var bottom_shade_max_point = 0;
var bottom_shade_range = 0;
var bottom_shade_mid_range = 0;
f_calculate_additional_vars();
let updated;

function getHiddenProp() {
  const prefixes = ['webkit', 'moz', 'ms', 'o'];

  // if 'hidden' is natively supported just return it
  if ('hidden' in document) { return 'hidden'; }

  // otherwise loop over all the known prefixes until we find one
  for (let i = 0; i < prefixes.length; i++) {
    if ((`${prefixes[i]}Hidden`) in document) { return `${prefixes[i]}Hidden`; }
  }

  // otherwise it's not supported
  return null;
}

function isHidden() {
  const prop = getHiddenProp();
  if (!prop) { return false; }

  return document[prop];
}
const visProp = getHiddenProp();
if (visProp) {
  const evtname = `${visProp.replace(/[H|h]idden/, '')}visibilitychange`;
  document.addEventListener(evtname, visChange);
}

function visChange() {
  if (isHidden()) { updated = false; } else { updateTime(); }
}

// self.onblur = function() { updated = false; }
// self.onfocus = function() { updateTime() }

function updateTime() {
  if (clockSettings.isCountdownClock) {
    if (updated == true) {
      current_seconds += 1000 / 10;

      if (current_seconds >= 60) {
        // console.log(current_seconds)
        currentTime = new Date();
        currentTime.setHours(currentTime.getHours() + hoursOffset);
        currentTime.setMinutes(currentTime.getMinutes() + minutesOffset);
        currentTime.setSeconds(currentTime.getSeconds() + secondsOffset);
        current_hours = currentTime.getHours();
        current_minutes = currentTime.getMinutes();
        current_seconds = currentTime.getSeconds();
        current_milliseconds = currentTime.getMilliseconds();
      }
      // console.log(currentTime)
    } else {
      currentTime = new Date();
      // console.log(current_seconds)
      currentTime.setHours(currentTime.getHours() + hoursOffset);
      currentTime.setMinutes(currentTime.getMinutes() + minutesOffset);
      currentTime.setSeconds(currentTime.getSeconds() + secondsOffset);
      monthdate = currentTime.getDate(); // n¬¨¬®¬¨¬Æ¬¨¬®¬¨√Ü‚Äö√Ñ√∂‚àö√ë‚àö‚àÇ‚Äö√†√∂‚Äö√Ñ‚Ä†‚Äö√†√∂¬¨‚Ñ¢ du jour local: 0..31
      weekday_num = currentTime.getDay(); // jour de la semaine local: 0=> sun, ..., 6=> sat
      current_hours = currentTime.getHours();
      current_minutes = currentTime.getMinutes();
      current_seconds = currentTime.getSeconds();
      current_milliseconds = currentTime.getMilliseconds();
      // console.log(current_seconds,currentTime.getMilliseconds())
      // console.log(monthdate,weekday_num,current_hours,current_minutes,current_seconds)
      updated = true;
    }
  } else {
    currentTime = new Date();
    currentTime.setHours(currentTime.getHours() + hoursOffset);
    currentTime.setMinutes(currentTime.getMinutes() + minutesOffset);
    currentTime.setSeconds(currentTime.getSeconds() + secondsOffset);
    monthdate = currentTime.getDate();
    weekday_num = currentTime.getDay();
    current_seconds = currentTime.getSeconds();
    current_minutes = currentTime.getMinutes();
    current_hours = currentTime.getHours();
    current_milliseconds = currentTime.getMilliseconds();
  }
}

function setTimeToDefaultTime() {
  currentTime = new Date();
  currentTime.setHours(10);
  currentTime.setMinutes(11);
  currentTime.setSeconds(31);
  monthdate = currentTime.getDate();
  weekday_num = currentTime.getDay();
  current_seconds = currentTime.getSeconds();
  current_minutes = currentTime.getMinutes();
  current_hours = currentTime.getHours();
  current_milliseconds = currentTime.getMilliseconds();
}

function updateTimeCalculations() {
  let a = current_hours;
  weekday_num++;
  if (a > 12) {
    a -= 12;
  }
  display_calculation.seconds_base_60 = current_seconds * timeSlice;
  display_calculation.seconds_base_60 += current_milliseconds * timeSlice / 1e3;
  display_calculation.seconds_base_60 += rotCorrect;
  display_calculation.minutes_base_60 = current_minutes * timeSlice;
  display_calculation.minutes_base_60 += current_seconds * timeSlice / 60;
  display_calculation.minutes_base_60 += rotCorrect;
  display_calculation.minutes_base_30 = current_minutes * timeSlice * 2;
  display_calculation.minutes_base_30 += current_seconds * timeSlice * 2 / 60;
  display_calculation.minutes_base_30 += rotCorrect;
  display_calculation.hours_base_12 = a * timeSlice * 5;
  display_calculation.hours_base_12 += current_minutes * timeSlice / 12;
  display_calculation.hours_base_12 += rotCorrect;
  display_calculation.monthdate_base_31 = monthdate * (timeSlice / 6) * (360 / 31);
  display_calculation.monthdate_base_31 += rotCorrect;
}

function easeInOutQuad(a, b, c, d) {
  if (a < d / 2) { return 2 * c * a * a / (d * d) + b; }
  ts = a - d / 2;
  return -2 * c * ts * ts / (d * d) + 2 * c * ts / d + c / 2 + b;
}

function setHoursOffset(a) {
  hoursOffset = a;
}

function setMinutesOffset(a) {
  minutesOffset = a;
}

function setSecondsOffset(a) {
  secondsOffset = a;
}

function getCurrentShownTime() {
  let a = '';
  if (current_hours < 10) {
    a += '0';
  }
  a += current_hours;
  a += ':';
  if (current_minutes < 10) {
    a += '0';
  }
  a += current_minutes;
  return a;
}

function updateOnTimeDisplayOnce() {
  updateTimeCalculations();
  updateDisplay();
}

function updateOnTimeDisplayOvertime() {
  updateTime();
  updateOnTimeDisplayOnce();
  timeoutID = window.setTimeout(updateOnTimeDisplayOvertime, tickDelay);
}
const ticks_per_seconds = 10;
let parts_starting_z_index = 23;
var tickDelay = 1e3 / ticks_per_seconds;
var timeSlice = Math.PI * 2 / 60;
var rotCorrect = global_watch_p.rotation_angle * (timeSlice / 6);
var display_calculation = new Array();
var currentTime = null;
var hoursOffset = 0;
var minutesOffset = 0;
var secondsOffset = 0;
var monthdate = null;
var weekday_num = null;
var current_seconds = null;
var current_minutes = null;
var current_hours = null;
var current_milliseconds = null;
const canvasId = 'regular_timepiece_canvas';
const watchContainer = clockSettings.watchContainerID;
const canvasParent = document.getElementById(canvasId);

function prepareTimepieceElements() {
  if (prepareTimepieceElementsIsDone == false) {
    for (i = 0; i < all_parts.length; i++) {
      if (all_p[i].update_mode == 'monthdate' || all_p[i].update_mode == 'weekday') {
        if (all_p[i].url == null) {
          var a = document.createElement('DIV');
        } else {
          var a = document.createElement('CANVAS');
        }
        document.getElementById(watchContainer).appendChild(a);
        if (typeof G_vmlCanvasManager !== 'undefined') {
          a = G_vmlCanvasManager.initElement(a);
        }
        a.setAttribute('id', `${all_parts[i]}_div`);
        a.style.position = 'absolute';
        a.style.width = `${all_p[i].width}px`;
        a.style.height = `${all_p[i].height}px`;
        a.style.left = `${all_p[i].xoriginoffset}px`;
        a.style.top = `${all_p[i].yoriginoffset}px`;
        if (all_p[i].url == null) {
          a.style.color = `#${all_p[i].txt_color}`;
          a.style.fontSize = all_p[i].txt_fontSize;
          a.style.fontFamily = 'Arial';
          a.style.textAlign = 'center';
        }
        parts_starting_z_index += i;
        a.style.zIndex = parts_starting_z_index;
      }
    }
    var b = document.createElement('CANVAS');
    document.getElementById(watchContainer).appendChild(b);
    if (typeof G_vmlCanvasManager !== 'undefined') {
      b = G_vmlCanvasManager.initElement(b);
    }
    b.setAttribute('id', 'regular_timepiece_canvas');
    b.style.position = 'absolute';
    b.setAttribute('width', global_watch_p.width);
    b.setAttribute('height', global_watch_p.height);
    b.style.zIndex = parts_starting_z_index;
    if (cyclop_mask_p.url) {
      var b = document.createElement('CANVAS');
      document.getElementById(watchContainer).appendChild(b);
      if (typeof G_vmlCanvasManager !== 'undefined') {
        b = G_vmlCanvasManager.initElement(b);
      }
      b.setAttribute('id', 'magnified_timepiece_canvas');
      b.style.position = 'absolute';
      b.setAttribute('width', global_watch_p.width);
      b.setAttribute('height', global_watch_p.height);
      b.style.zIndex = parts_starting_z_index + 1;
    }
    prepareTimepieceElementsIsDone = true;
  }
}

function placeCanvas(a, b, c) {
  a.clearRect(-global_watch_p.width, -global_watch_p.height, global_watch_p.width * 2, global_watch_p.height * 2);
  if (b == false) {} else {
    a.save();
    if (c) {
      a.translate(global_watch_p[c.watch_x_center], global_watch_p[c.watch_y_center]);
    } else {
      a.translate(global_watch_p.xcenter, global_watch_p.ycenter);
    }
  }
}

function updateDisplay() {
  if (cyclop_mask_p.url) {
    var a = document.getElementById(canvasId);
    var b = a.getContext('2d');
    placeCanvas(b, true);
    drawTimepiece(b, true);
    b.save();
    b.translate(-global_watch_p.xcenter, -global_watch_p.ycenter);
    b.globalCompositeOperation = 'destination-in';
    b.drawImage(cyclop_mask_p.image, 0, 0, cyclop_mask_p.width, cyclop_mask_p.height);
    b.restore();
    b.restore();
  }
  var a = document.getElementById(canvasId);
  if (a.getContext) {
    var b = a.getContext('2d');
    placeCanvas(b, true);
    drawTimepiece(b, false);
    if (cyclop_mask_p.url) {
      b.save();
      b.translate(-global_watch_p.xcenter, -global_watch_p.ycenter);
      b.globalCompositeOperation = 'destination-out';
      b.drawImage(cyclop_mask_p.image, 0, 0, cyclop_mask_p.width, cyclop_mask_p.height);
      b.restore();
    }
    b.restore();
  } else {
    alert('no context');
  }
}

function drawTimepiece(a, b) {
  magnify_x_offset = 0;
  magnify_y_offset = 0;
  magnify_x_scale = 1;
  magnify_y_scale = 1;
  if (b == true) {
    magnify_x_offset = cyclop_mask_p.xcenteroffset;
    magnify_y_offset = cyclop_mask_p.ycenteroffset;
    magnify_x_scale = cyclop_mask_p.xscale;
    magnify_y_scale = cyclop_mask_p.yscale;
  }
  a.globalCompositeOperation = 'source-over';
  for (let i = 0; i < all_parts.length; i++) {
    const c = all_p[i];
    a.save();
    if (all_p[i].update_mode != null) {
      if (all_p[i].update_mode == 'monthdate') {
        if (all_p[i].url == null) {
          document.getElementById(`${all_parts[i]}_div`).innerHTML = monthdate;
        } else {
          document.getElementById(`${all_parts[i]}_div`).style.background = `url('${image_folder}num_${monthdate}.${all_p[i].fileformat}')`;
        }
      } else if (all_p[i].update_mode == 'weekday') {
        document.getElementById(`${all_parts[i]}_div`).style.background = `url('${image_folder}weekday_${weekday_num}.${all_p[i].fileformat}')`;
      } else {
        a.translate(c.xcenteroffset, c.ycenteroffset);
        a.translate(magnify_x_offset, magnify_y_offset);
        a.translate(c.offset_alternate_x_center, c.offset_alternate_y_center);
        a.scale(global_watch_p.xscale * magnify_x_scale, global_watch_p.yscale * magnify_y_scale);
        a.rotate(display_calculation[c.update_mode]);
        a.translate(-c.xrotation, -c.yrotation);

        //                        var img = c["image"];
        //                        console.log(img, c["width"],c["height"])
        const img = document.getElementById(`p_${all_parts[i]}`);
        //                        console.log("p_" + all_parts[i]);
        //                        canvas = document.getElementById(canvasId)
        //                        ctx = canvas.getContext('2d')
        //                        ctx.drawImage(img, 0, 0, c["width"], c["height"]);
        a.drawImage(img, 0, 0, c.width, c.height);
        for (const d in all_p[i].__lightEffects) {
          if (all_p[i].__lightEffects[d].height > 0) {
            a.globalAlpha = getAlphaForRotation(d, display_calculation[c.update_mode], 'normal');
            a.drawImage(c.__lightEffects[d], 0, 0, c.width, c.height);
          }
        }
      }
    } else {
      a.translate(all_p[i].xcenteroffset, all_p[i].ycenteroffset);
      a.translate(-all_p[i].xcenter, -all_p[i].ycenter);
      a.drawImage(all_p[i].image, 0, 0, all_p[i].width, all_p[i].height);
    }
    a.restore();
  }
}

function startWatchEngineWhenReady() {
  if (all_p_to_be_loaded < 1) {
    prepareTimepieceElements();
    //                updateOnTimeDisplayOvertime();
    window.setTimeout(updateOnTimeDisplayOvertime, 0);
  } else {
    requestAnimFrame(startWatchEngineWhenReady);
  }
}

function startWatchEngine() {
  //            if (window.addEventListener) {
  //                window.addEventListener("load", function() {
  startWatchEngineWhenReady();
  //                }, false)
  //            } else if (window.attachEvent) {
  //                window.attachEvent("onload", function() {
  //                    startWatchEngineWhenReady()
  //                })
  //            }
}

function showStaticWatchOnTime() {
  if (all_p_to_be_loaded < 1) {
    prepareTimepieceElements();
    setTimeToDefaultTime();
    updateOnTimeDisplayOnce();
  } else {
    timeoutID = window.setTimeout('showStaticWatchOnTime()', tickDelay);
  }
}

function spinToCurrentTimeAfterDelay(a) {}
var prepareTimepieceElementsIsDone = false;
const weekday_displayed = false;
var magnify_x_offset = 0;
var magnify_y_offset = 0;

function removeElement(id) {
  const element = document.getElementById(id);
  element.parentNode.removeChild(element);
}

// console.log(extension);
// console.log(all_p);
// create object
document.addEventListener('DOMContentLoaded', () => {
  // start preloading
  // for (i in all_p)
  // {
  //     var imageObj_i = new Image();
  //     imageObj_i.src = all_p[i]['image'];
  //     console.log(imageObj_i.src)
  // }
});

/**
 * Method: <buildClock>
 *
 * Description:
 * Configure the watch html part
 *
 * Parameters:
 * clockWidth : clockWidth          - width of the clock to be set on top the html file
 * clockHeight : clockHeight        - height of the clock to be set on top the html file
 * bgFileName : 'bg.png'            - set the of the background file
 * flashname : 'usga_295x100_lake_orion'    - set the falsh name without .swf (place the file in the img folder)
 * trackingurl : 'http ///www.rolex.com/en/home/?cmpid=dw20126128'  - set the tracking url
 * theLocalText : 'Your Time'       - set your time text to be shown on the banner
 * theCityText : ' ' + 'Lake Orion' - set city text to be shown on the banner
 * theCity : 'boston'               - set name of the city for it's offset
 * amPm: true                       - set custom offset if city doesn't exist in the list
 * customOffset : ''                - set custom offset if city doesn't exist in the list
 * time24hours : false              - show time in 24s format with true
 * showText : true                  - hide all text and time with false
 * showTime : false                 - show time without city : your time text with true
 * showDay : true                   - change all text to Uppercase with true
 * upperCase : false                - change all text to Uppercase with true
 * retinaXcenter : 142              - change the clock X position
 * retinaYcenter : 50               - change the clock Y position
 * retinaXscale : 1.1               - change the clock X scale
 * retinaYscale : 1.1               - change the clock Y scale
 * greencolor : '#987633'       - change the text city time color
 * yellowcolor : '#0F3C03'      - change the text your time color
 * pointPosition : '72px'           - change the dot right position
 * textRightPosition : '10px'       - change the text blocks right position
 * textYourtimeTopPosition : '18px' - change the yourtime div top position
 * textTimezoneTopPosition : '54px' - change the timezone div top position
 */
function buildClock(clockSettings) {
  document.querySelector('html').classList.add(getAllUrlclockSettings().lang);
  if (typeof clockSettings.blockClass === 'undefined') { clockSettings.blockClass = 'block'; }
  if (typeof clockSettings.activeClass === 'undefined') { clockSettings.activeClass = 'active'; }

  document.getElementById('rolexClockWim-container').style.width = `${clockSettings.contentWidth}px`;
  document.getElementById('rolexClockWim-container').style.height = `${clockSettings.contentHeight}px`;
  // document.getElementById("col-1").style.height = clockSettings.contentHeight + "px";
  // var col2 = document.getElementById("col-2");
  // // col2.style.height = clockSettings.contentHeight + "px";
  // for (var i in col2.childNodes) {
  //     var child = col2.childNodes[i];
  //     if (child.nodeType == 1)
  //         child.style.height = clockSettings.contentHeight + "px";
  // }
  // document.getElementById("col-3").style.height = clockSettings.contentHeight + "px";
  // document.getElementById("tracker").style.height = clockSettings.contentHeight + "px";
  const trcking = document.querySelectorAll('.tracker');
  for (var i = 0; i < trcking.length; i++) {
    trcking[i].href = clockSettings.trackingurl;
  }

  // document.getElementById("rolexClockWim-backToRolex").style.width = clockSettings.clockWidth + "px";
  // document.getElementById("rolexClockWim-backToRolex").style.height = clockSettings.clockHeight + "px";
  // document.getElementById("tracker").href = clockSettings.trackingurl;

  global_watch_p.xscale = clockSettings.retinaXscale;
  global_watch_p.yscale = clockSettings.retinaYscale;

  // else {
  //  document.getElementById("rolexClockWim-container").style.background = "transparent url('" + imgFolder + "/" + clockSettings.bgFileName + "') 00% 50% no-repeat"
  // }
  if (!clockSettings.forceFallback && !clockSettings.forceFlash) {
    // document.getElementById("trackUrl").href = clockSettings.trackingurl;
    if (clockSettings.showText == false) {
      document.getElementById('rolexClockWim-container').removeChild(document.getElementById('timezone'));
      document.getElementById('rolexClockWim-container').removeChild(document.getElementById('yourtime'));
    } else {
      const yourtime = document.getElementById('yourTime');
      const timeTimezon = document.getElementById('timezone');

      var language = getAllUrlclockSettings().lang;
      var language = language.toLowerCase();
      const now_date = new Date();

      const year = now_date.getFullYear();
      let month = now_date.getMonth() + 1;
      let day = now_date.getDate();
      if (month < 10) {
        month = `0${month}`;
      }
      if (day < 10) {
        day = `0${day}`;
      }
      const names = [];
      const timezones = [];
      const timezone_dst = [];
      const myTimeText = [];
      const teeTimeText = [];
      const eventText = [];
      const teeTimeAccessibiltyTextEvent = [];
      const teeTimeAccessibiltyTextMyTime = [];
      const teeTimeGotoRolex = [];
      const todayfull = Number(`${year}${month}${day}`);
      String.prototype.trim = function () {
        return this.replace(/\s/g, '');
      };
      let index = null;
      for (var i = 0; i < cityArray.length; i++) {
        if (todayfull >= cityArray[i].startDate && todayfull <= cityArray[i].endDate) {
          index = i;

          function changeBg(bg) {
            global_watch_p.xscale = clockSettings.globalXscale;
            global_watch_p.yscale = clockSettings.globalYscale;
            global_watch_p.xcenter = clockSettings.globalXcenter;
            global_watch_p.ycenter = clockSettings.globalYcenter;
            // yourtime.style.top = clockSettings.yourtTop;
            // yourtime.style.left = clockSettings.yourtLeft;
            // timeTimezon.style.top = clockSettings.timeZTop;
            // timeTimezon.style.left = clockSettings.timeZLeft;
            if (bg == 'full') {
              document.getElementById('rolexClockWim-container').style.background = `#fff url(''${imgFolder}/bg.jpg') no-repeat`;
              // timeTimezon.style.display = "block";
              // yourtime.style.display = "block";
              // trackUrl.style.left = clockSettings.trackUrlL + 'px';
              // trackUrl.style.height = clockSettings.trackUrlH + 'px';
              // trackUrl.style.width = clockSettings.trackUrlW + 'px';
            } else {
              document.getElementById('rolexClockWim-container').style.background = `transparent url('${imgFolder}/bg.jpg') no-repeat`;
              // yourtime.style.display = "none";
              // timeTimezon.style.display = "none";
              // trackUrl.style.left = clockSettings.trackUrlL + 'px';
              // trackUrl.style.height = clockSettings.trackUrlH + 'px';
              // trackUrl.style.width = clockSettings.trackUrlW + 'px';
            }
          }
          if (language == '') {
            names.push(cityArray[index].city.en);
          } else {
            names.push(cityArray[index].city.en);
            myTimeText.push(cityArray[index].myTimeText[language]);
            teeTimeText.push(cityArray[index].teeTimeText[language]);
            eventText.push(cityArray[index].eventText[language]);
            teeTimeAccessibiltyTextEvent.push(cityArray[index].teeTimeAccessibiltyTextEvent[language]);
            teeTimeAccessibiltyTextMyTime.push(cityArray[index].teeTimeAccessibiltyTextMyTime[language]);
            teeTimeGotoRolex.push(cityArray[index].teeTimeGotoRolex[language]);
          }
          timezones.push(cityArray[index].timezone);
          timezone_dst.push(cityArray[index].dst);
          clockSettings.theLocalText = myTimeText[0];
          clockSettings.eventText = eventText[0];
          clockSettings.teeTimeText = teeTimeText[0];
          clockSettings.teeTimeAccessibiltyTextEvent = teeTimeAccessibiltyTextEvent[0];
          clockSettings.teeTimeAccessibiltyTextMyTime = teeTimeAccessibiltyTextMyTime[0];
          clockSettings.teeTimeGotoRolex = teeTimeGotoRolex[0];

          if (names.length == 1) {
            changeBg('full');
            clockSettings.theCityText = (names[0]).replace(/\+\b/gi, ' ');
            clockSettings.eventText = (eventText[0]).replace(/\+\b/gi, ' ');
            clockSettings.theLocalText = (myTimeText[0]).replace(/\+\b/gi, ' ');
            clockSettings.teeTimeText = (teeTimeText[0]).replace(/\+\b/gi, ' ');
            clockSettings.customOffset = timezones[0],
            clockSettings.theCity = (names[0].toLowerCase()).trim();

            clockSettings.customDST = timezone_dst[0];
          } else if (names.length == 0 || names.length == '') {
            changeBg();
          }
        }
      }

      const Arrow = document.getElementById('arrow');
      const Arrow0 = document.getElementById('arrow0');

      let thenewOffset;
      let customOffset;
      let elem;

      //                 yourtime.onclick = function() {
      //                     // console.log(this)
      //                     document.querySelector('.block-city1').classList.remove(clockSettings.activeClass);
      //                     this.classList.add(clockSettings.activeClass);
      //                     Arrow.style.display = "block";
      //                     Arrow0.style.display = "none";

      //                     showCurrentTime();

      //                 };
      //                 timeTimezon.onclick = function() {
      // // console.log(this)
      //                 document.querySelector('.block-local').classList.remove(clockSettings.activeClass);
      //                 this.classList.add(clockSettings.activeClass);
      //                 Arrow.style.display = "none";
      //                 Arrow0.style.display = "block";

      //                 showTimeIn(clockSettings.theCity, clockSettings.customOffset, "", clockSettings.customDST);

      //             };

      $('.switch').on('click', function (event) {
        event.preventDefault();
        const { origin } = document.location;

        if ($('#teetime').attr('aria-checked') === 'true') {
          // console.log($('#teetime').attr('aria-label'))
          $('#teetime').attr('aria-label', clockSettings.teeTimeAccessibiltyTextEvent + $('#rolexClockCityTime').text());
          $('#teetime').attr('aria-checked', 'false').removeAttr('checked');
          $('.label').html(clockSettings.eventText);
          $(this).removeClass('active');
          // console.log($('#teetime').att('checked'))
          $('.mytime').css({ color: '#333' });
          $('.event').css({ color: 'rgb(0,96,57)' });
          var data = {
            name: 'rolex-teetime-toggle', value: 'On', offset: getAllUrlclockSettings().utc, lang: getAllUrlclockSettings().lang,
          };
          // console.log(data)
          $('#regular_timepiece_canvas').attr('aria-label', $('#rolexClockCityTime').text());
          showTimeIn(clockSettings.theCity, clockSettings.customOffset, '');
          window.top.postMessage(JSON.stringify(data), origin);
        } else

        if ($('#teetime').attr('aria-checked') === 'false') {
          // console.log($('#teetime').attr('aria-label'))
          $(this).addClass('active');
          $('#teetime').attr('aria-label', clockSettings.teeTimeAccessibiltyTextMyTime + $('#rolexClockYourTime').text());
          $('#teetime').attr('aria-checked', 'true').attr('checked', 'checked');
          $('.label').html(clockSettings.theLocalText);
          $('.mytime').css({ color: 'rgb(0,96,57)' });
          $('.event').css({ color: '#333' });
          showCurrentTime();
          $('#regular_timepiece_canvas').attr('aria-label', $('#rolexClockYourTime').text());
          var data = {
            name: 'rolex-teetime-toggle', value: 'Off', offset: getAllUrlclockSettings().utc, lang: getAllUrlclockSettings().lang,
          };
          window.top.postMessage(JSON.stringify(data), origin);
        }
      });
      $('.switch').on('keypress', function (event) {
        event.preventDefault();
        const { origin } = document.location;

        if (event.which === 13) {
          if ($('#teetime').attr('aria-checked') === 'true') {
            // console.log($('#teetime').attr('aria-label'))
            $('#teetime').attr('aria-label', clockSettings.teeTimeAccessibiltyTextEvent + $('#rolexClockCityTime').text());
            $('#teetime').attr('aria-checked', 'false').removeAttr('checked');
            $('.label').html(clockSettings.eventText);
            $(this).removeClass('active');
            // console.log($('#teetime').att('checked'))
            $('.mytime').css({ color: '#333' });
            $('.event').css({ color: 'rgb(0,96,57)' });
            var data = {
              name: 'rolex-teetime-toggle', value: 'On', offset: getAllUrlclockSettings().utc, lang: getAllUrlclockSettings().lang,
            };
            // console.log(data)
            $('#regular_timepiece_canvas').attr('aria-label', $('#rolexClockCityTime').text());
            showTimeIn(clockSettings.theCity, clockSettings.customOffset, '');
            window.top.postMessage(JSON.stringify(data), origin);
          } else

          if ($('#teetime').attr('aria-checked') === 'false') {
            // console.log($('#teetime').attr('aria-label'))
            $(this).addClass('active');
            $('#teetime').attr('aria-label', clockSettings.teeTimeAccessibiltyTextMyTime + $('#rolexClockYourTime').text());
            $('#teetime').attr('aria-checked', 'true').attr('checked', 'checked');
            $('.label').html(clockSettings.theLocalText);
            $('.mytime').css({ color: 'rgb(0,96,57)' });
            $('.event').css({ color: '#333' });
            showCurrentTime();
            $('#regular_timepiece_canvas').attr('aria-label', $('#rolexClockYourTime').text());
            var data = {
              name: 'rolex-teetime-toggle', value: 'Off', offset: getAllUrlclockSettings().utc, lang: getAllUrlclockSettings().lang,
            };
            window.top.postMessage(JSON.stringify(data), origin);
          }
        }
      });

      if (clockSettings.showTime == true) {
        document.getElementById('timezone').removeChild(document.getElementById('textContainer1'));
        document.getElementById('yourtime').removeChild(document.getElementById('textContainer'));
      } else {
        document.getElementById('cityText').innerHTML = clockSettings.theCityText;
        document.getElementById('event').innerHTML = clockSettings.eventText;
        document.getElementById('teeTimeText').innerHTML = clockSettings.teeTimeText;
        document.getElementById('title').innerHTML = clockSettings.teeTimeText;
        document.getElementById('mytime').innerHTML = clockSettings.theLocalText;
        document.getElementById('textContainer1').title = clockSettings.theCityText.replace('"', '&quot;');
        document.getElementById('textContainer').title = clockSettings.theLocalText.replace('"', '&quot;');
        $('#teetime').attr('aria-label', clockSettings.teeTimeAccessibiltyTextEvent);
        $('.label').html(clockSettings.eventText);
        if (clockSettings.upperCase == true) {
          document.getElementById('cityText').style.textTransform = 'uppercase';
          document.getElementById('localtext').style.textTransform = 'uppercase';
        }
      }

      function updateShownTimeInHTMLComponentOvertime() {
        updateShownTimeInHTMLComponent();
        requestAnimFrame(updateShownTimeInHTMLComponentOvertime());
      }

      function showTimeIn(a, offset, elem, DST_TiMEZONE) {
        const b = new Date();
        let tempOffset = b.getTimezoneOffset();
        // console.log(b.getTimezoneOffset())
        today = `${b.getFullYear()}-${b.getMonth()}-${b.getDate()}-${b.getHours()}`;
        if (clockSettings.theCityText !== '' && elem == '') {
          if (a) {
            if ((names[0]).replace(/\+\b/gi, ' ') == clockSettings.theCityText) {
              tempOffset += 60 * timezones[0];
              // gettimezoneDST = getDST(new Date(), clockSettings.customDST);
              // if (gettimezoneDST == 100) {
              //     tempOffset += 60;
              // }
              cityTime(tempOffset, timezones[0], '');
              // console.log((getAllUrlclockSettings().dst*60) + b.getTimezoneOffset())
              tOffset = getAllUrlclockSettings().utc * 60;
              t2Offset = tOffset + b.getTimezoneOffset();
              // console.log(tOffset)
              setMinutesOffset(t2Offset);
            }
          }
        }
      }
      /* timezone text clock */

      function cityTime(thenewOffset, customOffset, elem) {
        // console.log(thenewOffset)
        const localTime = new Date();
        const localOffset = localTime.getTimezoneOffset() / 60;
        const cityTime = new Date(moment().utc().add(thenewOffset, 'hours'));
        // console.log(localOffset)
        // console.log(moment.utc().add(5.5, 'hours').format('MMM DD h:mm A'))
        // console.log(moment().utc().add(5.5, 'hours').toDate())
        cityTime.setHours(cityTime.getHours() + localOffset);
        cityTime.setMinutes(cityTime.getMinutes());
        cityTime.setSeconds(cityTime.getSeconds());
        const cityTime_millisecondes = cityTime.getMilliseconds();
        const cityTime_seconds = cityTime.getSeconds();
        let cityTime_minutes = cityTime.getMinutes();
        let cityTime_hours = cityTime.getHours();
        const cityTime_day = cityTime.getDay();
        if (cityTime_day == 0) {
          var f = 'Sun';
        } else if (cityTime_day == 1) {
          var f = 'Mon';
        } else if (cityTime_day == 2) {
          var f = 'Tue';
        } else if (cityTime_day == 3) {
          var f = 'Wed';
        } else if (cityTime_day == 4) {
          var f = 'Thu';
        } else if (cityTime_day == 5) {
          var f = 'Fri';
        } else if (cityTime_day == 6) {
          var f = 'Sat';
        }
        if (language === 'en' || language === 'kr') clockSettings.amPm = true;
        clockSettings.time24hours = false;
        // console.log(cityTime_hours)
        if (clockSettings.amPm == true) {
          var g = ' ';
          if (cityTime_hours >= 12) {
            g = ' PM';
          } else {
            g = ' AM';
          }
        } else {
          g = '';
        }
        if (clockSettings.time24hours == true) {
          g = '';
        } else if (cityTime_hours >= 13) {
          cityTime_hours -= 12;
        } else if (cityTime_hours == 0) {
          cityTime_hours = 12;
        }
        if (clockSettings.trailingZero == true) {
          if (cityTime_hours < 10) {
            cityTime_hours = `0${cityTime_hours}`;
          }
        }

        if (cityTime_minutes < 10) { cityTime_minutes = `0${cityTime_minutes}`; }

        if (clockSettings.showText == true) {
          if (clockSettings.showDay == true) {
            f = f;
          } else {
            f = '';
          }
        }

        function updateText(updated) {
          if (cityTime_seconds >= 0 && cityTime_seconds < 1) {
            update = document.getElementById(`rolexClockCityTime${elem}`).innerHTML = `${f} ${cityTime_hours}:${cityTime_minutes}${g}`;
            updateTime(thenewOffset, customOffset, elem);
          } else if (checked === undefined) {
            update = document.getElementById(`rolexClockCityTime${elem}`).innerHTML = `${f} ${cityTime_hours}:${cityTime_minutes}${g}`;
            var checked = 1;

            updateTime(thenewOffset, customOffset, elem);
          }
        }
        requestAnimFrame(updateText);
      }

      function updateTime(thenewOffset, customOffset, elem) {
        cityTime(getAllUrlclockSettings().utc, customOffset, elem);
      }
      /* yourtime text clock */
      function yourTime() {
        const a = new Date();
        a.setHours(a.getHours());
        a.setMinutes(a.getMinutes());
        a.setSeconds(a.getSeconds());
        const b = a.getSeconds();
        let c = a.getMinutes();
        let d = a.getHours();
        const e = a.getDay();
        if (e == 0) {
          var f = 'Sun';
        } else if (e == 1) {
          var f = 'Mon';
        } else if (e == 2) {
          var f = 'Tue';
        } else if (e == 3) {
          var f = 'Wed';
        } else if (e == 4) {
          var f = 'Thu';
        } else if (e == 5) {
          var f = 'Fri';
        } else if (e == 6) {
          var f = 'Sat';
        }
        if (language === 'en' || language === 'kr') clockSettings.amPm = true;
        clockSettings.time24hours = false;
        if (clockSettings.amPm == true) {
          var g = ' ';
          if (d >= 12) {
            g = ' PM';
          } else {
            g = ' AM';
          }
        } else {
          g = '';
        }
        if (clockSettings.time24hours == true) {
          g = '';
        } else if (d >= 13) {
          d -= 12;
        }
        if (clockSettings.trailingZero == true) {
          if (d < 10) {
            d = `0${d}`;
          }
        }
        if (c < 10) { c = `0${c}`; }

        if (clockSettings.showText == true) {
          if (clockSettings.showDay == true) {
            f = f;
          } else {
            f = '';
          }
          update = document.getElementById('rolexClockYourTime').innerHTML = `${f} ${d}:${c}${g}`;
        }
        if (clockSettings.upperCase == true) {
          document.getElementById('rolexClockYourTime').style.textTransform = 'uppercase';
        }

        setTimeout(() => {
          document.getElementById(canvasId).setAttribute('tabindex', '0');
          document.getElementById(canvasId).setAttribute('role', 'img');
          // if (lang == )
        }, 1000);
        requestAnimFrame(yourTime);
      }

      function showCurrentTime() {
        setMinutesOffset(0);
      }

      function updateShownTimeInHTMLComponent() {
        tempString = getCurrentShownTime();
      }
      // cityTime();

      if (clockSettings.theCity != '') {
        showTimeIn(clockSettings.theCity, clockSettings.customOffset, '');
      }

      yourTime();

      const data = {
        name: 'rolex-teetime-toggle', value: 'On', offset: getAllUrlclockSettings().utc, lang: getAllUrlclockSettings().lang,
      };

      showTimeIn(clockSettings.theCity, clockSettings.customOffset, '');
      setTimeout(() => {
        $('#regular_timepiece_canvas').attr('aria-label', $('#rolexClockCityTime').text());
        $('.sr-only').attr('aria-label', clockSettings.teeTimeGotoRolex);
        $('.rolexClockWim-backToRolex').attr('aria-label', clockSettings.teeTimeGotoRolex);
        $('#teetime').attr('aria-label', clockSettings.teeTimeAccessibiltyTextEvent + $('#rolexClockCityTime').text());
      }, 1000);
    }

    startWatchEngine();
  }
}
